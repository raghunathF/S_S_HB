
GccBoardProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003304  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00003304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a20  20000010  00003314  00020010  2**2
                  ALLOC
  3 .stack        00000400  20000a30  00003d34  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004ed49  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005c68  00000000  00000000  0006edda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000095f1  00000000  00000000  00074a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000870  00000000  00000000  0007e033  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000998  00000000  00000000  0007e8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018134  00000000  00000000  0007f23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012bb0  00000000  00000000  0009736f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e958  00000000  00000000  000a9f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014f4  00000000  00000000  00118878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 0e 00 20 dd 2d 00 00 d9 2d 00 00 d9 2d 00 00     0.. .-...-...-..
	...
      2c:	d9 2d 00 00 00 00 00 00 00 00 00 00 d9 2d 00 00     .-...........-..
      3c:	d9 2d 00 00 d9 2d 00 00 d9 2d 00 00 d9 2d 00 00     .-...-...-...-..
      4c:	d9 2d 00 00 2d 01 00 00 d9 2d 00 00 d9 2d 00 00     .-..-....-...-..
      5c:	00 00 00 00 d9 2d 00 00 a1 1b 00 00 b1 1b 00 00     .....-..........
      6c:	00 00 00 00 c5 15 00 00 c1 18 00 00 d1 18 00 00     ................
      7c:	d9 2d 00 00 d9 2d 00 00 d9 2d 00 00 d9 2d 00 00     .-...-...-...-..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000010 	.word	0x20000010
      ac:	00000000 	.word	0x00000000
      b0:	00003304 	.word	0x00003304

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000014 	.word	0x20000014
      e0:	00003304 	.word	0x00003304
      e4:	00003304 	.word	0x00003304
      e8:	00000000 	.word	0x00000000

000000ec <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
      ee:	2000      	movs	r0, #0
      f0:	4b08      	ldr	r3, [pc, #32]	; (114 <delay_init+0x28>)
      f2:	4798      	blx	r3
      f4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
      f6:	4c08      	ldr	r4, [pc, #32]	; (118 <delay_init+0x2c>)
      f8:	21fa      	movs	r1, #250	; 0xfa
      fa:	0089      	lsls	r1, r1, #2
      fc:	47a0      	blx	r4
      fe:	4b07      	ldr	r3, [pc, #28]	; (11c <delay_init+0x30>)
     100:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     102:	4907      	ldr	r1, [pc, #28]	; (120 <delay_init+0x34>)
     104:	0028      	movs	r0, r5
     106:	47a0      	blx	r4
     108:	4b06      	ldr	r3, [pc, #24]	; (124 <delay_init+0x38>)
     10a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     10c:	2205      	movs	r2, #5
     10e:	4b06      	ldr	r3, [pc, #24]	; (128 <delay_init+0x3c>)
     110:	601a      	str	r2, [r3, #0]
}
     112:	bd70      	pop	{r4, r5, r6, pc}
     114:	00002b69 	.word	0x00002b69
     118:	00002ead 	.word	0x00002ead
     11c:	20000000 	.word	0x20000000
     120:	000f4240 	.word	0x000f4240
     124:	20000004 	.word	0x20000004
     128:	e000e010 	.word	0xe000e010

0000012c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     12c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     12e:	2200      	movs	r2, #0
     130:	4b10      	ldr	r3, [pc, #64]	; (174 <EIC_Handler+0x48>)
     132:	701a      	strb	r2, [r3, #0]
     134:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     136:	4910      	ldr	r1, [pc, #64]	; (178 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     138:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     13a:	4e10      	ldr	r6, [pc, #64]	; (17c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     13c:	4c0d      	ldr	r4, [pc, #52]	; (174 <EIC_Handler+0x48>)
     13e:	e00a      	b.n	156 <EIC_Handler+0x2a>
		return eics[eic_index];
     140:	490d      	ldr	r1, [pc, #52]	; (178 <EIC_Handler+0x4c>)
     142:	e008      	b.n	156 <EIC_Handler+0x2a>
     144:	7823      	ldrb	r3, [r4, #0]
     146:	3301      	adds	r3, #1
     148:	b2db      	uxtb	r3, r3
     14a:	7023      	strb	r3, [r4, #0]
     14c:	2b0f      	cmp	r3, #15
     14e:	d810      	bhi.n	172 <EIC_Handler+0x46>
		return NULL;
     150:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     152:	2b1f      	cmp	r3, #31
     154:	d9f4      	bls.n	140 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     156:	0028      	movs	r0, r5
     158:	4018      	ands	r0, r3
     15a:	2201      	movs	r2, #1
     15c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     15e:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     160:	4210      	tst	r0, r2
     162:	d0ef      	beq.n	144 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     164:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     166:	009b      	lsls	r3, r3, #2
     168:	599b      	ldr	r3, [r3, r6]
     16a:	2b00      	cmp	r3, #0
     16c:	d0ea      	beq.n	144 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     16e:	4798      	blx	r3
     170:	e7e8      	b.n	144 <EIC_Handler+0x18>
			}
		}
	}
}
     172:	bd70      	pop	{r4, r5, r6, pc}
     174:	200008a4 	.word	0x200008a4
     178:	40001800 	.word	0x40001800
     17c:	200008a8 	.word	0x200008a8

00000180 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     180:	4a04      	ldr	r2, [pc, #16]	; (194 <_extint_enable+0x14>)
     182:	7813      	ldrb	r3, [r2, #0]
     184:	2102      	movs	r1, #2
     186:	430b      	orrs	r3, r1
     188:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     18a:	7853      	ldrb	r3, [r2, #1]
     18c:	b25b      	sxtb	r3, r3
     18e:	2b00      	cmp	r3, #0
     190:	dbfb      	blt.n	18a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     192:	4770      	bx	lr
     194:	40001800 	.word	0x40001800

00000198 <_system_extint_init>:
{
     198:	b500      	push	{lr}
     19a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     19c:	4a12      	ldr	r2, [pc, #72]	; (1e8 <_system_extint_init+0x50>)
     19e:	6993      	ldr	r3, [r2, #24]
     1a0:	2140      	movs	r1, #64	; 0x40
     1a2:	430b      	orrs	r3, r1
     1a4:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1a6:	a901      	add	r1, sp, #4
     1a8:	2300      	movs	r3, #0
     1aa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     1ac:	2005      	movs	r0, #5
     1ae:	4b0f      	ldr	r3, [pc, #60]	; (1ec <_system_extint_init+0x54>)
     1b0:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     1b2:	2005      	movs	r0, #5
     1b4:	4b0e      	ldr	r3, [pc, #56]	; (1f0 <_system_extint_init+0x58>)
     1b6:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1b8:	4a0e      	ldr	r2, [pc, #56]	; (1f4 <_system_extint_init+0x5c>)
     1ba:	7813      	ldrb	r3, [r2, #0]
     1bc:	2101      	movs	r1, #1
     1be:	430b      	orrs	r3, r1
     1c0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1c2:	7853      	ldrb	r3, [r2, #1]
     1c4:	b25b      	sxtb	r3, r3
     1c6:	2b00      	cmp	r3, #0
     1c8:	dbfb      	blt.n	1c2 <_system_extint_init+0x2a>
     1ca:	4b0b      	ldr	r3, [pc, #44]	; (1f8 <_system_extint_init+0x60>)
     1cc:	0019      	movs	r1, r3
     1ce:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1d0:	2200      	movs	r2, #0
     1d2:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1d4:	4299      	cmp	r1, r3
     1d6:	d1fc      	bne.n	1d2 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1d8:	2210      	movs	r2, #16
     1da:	4b08      	ldr	r3, [pc, #32]	; (1fc <_system_extint_init+0x64>)
     1dc:	601a      	str	r2, [r3, #0]
	_extint_enable();
     1de:	4b08      	ldr	r3, [pc, #32]	; (200 <_system_extint_init+0x68>)
     1e0:	4798      	blx	r3
}
     1e2:	b003      	add	sp, #12
     1e4:	bd00      	pop	{pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	40000400 	.word	0x40000400
     1ec:	00002c81 	.word	0x00002c81
     1f0:	00002bf5 	.word	0x00002bf5
     1f4:	40001800 	.word	0x40001800
     1f8:	200008a8 	.word	0x200008a8
     1fc:	e000e100 	.word	0xe000e100
     200:	00000181 	.word	0x00000181

00000204 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     204:	b500      	push	{lr}
     206:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     208:	ab01      	add	r3, sp, #4
     20a:	2280      	movs	r2, #128	; 0x80
     20c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     20e:	780a      	ldrb	r2, [r1, #0]
     210:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     212:	784a      	ldrb	r2, [r1, #1]
     214:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     216:	788a      	ldrb	r2, [r1, #2]
     218:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     21a:	0019      	movs	r1, r3
     21c:	4b01      	ldr	r3, [pc, #4]	; (224 <port_pin_set_config+0x20>)
     21e:	4798      	blx	r3
}
     220:	b003      	add	sp, #12
     222:	bd00      	pop	{pc}
     224:	00002d79 	.word	0x00002d79

00000228 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     228:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     22a:	2207      	movs	r2, #7
     22c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     22e:	421a      	tst	r2, r3
     230:	d1fc      	bne.n	22c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     232:	4770      	bx	lr

00000234 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     234:	b5f0      	push	{r4, r5, r6, r7, lr}
     236:	46ce      	mov	lr, r9
     238:	4647      	mov	r7, r8
     23a:	b580      	push	{r7, lr}
     23c:	b083      	sub	sp, #12
     23e:	0007      	movs	r7, r0
     240:	000d      	movs	r5, r1
     242:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     244:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     246:	0008      	movs	r0, r1
     248:	4b7b      	ldr	r3, [pc, #492]	; (438 <STACK_SIZE+0x38>)
     24a:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     24c:	4a7b      	ldr	r2, [pc, #492]	; (43c <STACK_SIZE+0x3c>)
     24e:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     250:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     252:	2301      	movs	r3, #1
     254:	40a3      	lsls	r3, r4
     256:	430b      	orrs	r3, r1
     258:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     25a:	a901      	add	r1, sp, #4
     25c:	7b33      	ldrb	r3, [r6, #12]
     25e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     260:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     262:	b2c4      	uxtb	r4, r0
     264:	0020      	movs	r0, r4
     266:	4b76      	ldr	r3, [pc, #472]	; (440 <STACK_SIZE+0x40>)
     268:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     26a:	0020      	movs	r0, r4
     26c:	4b75      	ldr	r3, [pc, #468]	; (444 <STACK_SIZE+0x44>)
     26e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     270:	7b30      	ldrb	r0, [r6, #12]
     272:	2100      	movs	r1, #0
     274:	4b74      	ldr	r3, [pc, #464]	; (448 <STACK_SIZE+0x48>)
     276:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     278:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     27a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     27c:	079b      	lsls	r3, r3, #30
     27e:	d504      	bpl.n	28a <i2c_master_init+0x56>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     280:	b003      	add	sp, #12
     282:	bc0c      	pop	{r2, r3}
     284:	4690      	mov	r8, r2
     286:	4699      	mov	r9, r3
     288:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     28a:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     28c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     28e:	07db      	lsls	r3, r3, #31
     290:	d4f6      	bmi.n	280 <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     292:	6838      	ldr	r0, [r7, #0]
     294:	4b68      	ldr	r3, [pc, #416]	; (438 <STACK_SIZE+0x38>)
     296:	4698      	mov	r8, r3
     298:	4798      	blx	r3
     29a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     29c:	496b      	ldr	r1, [pc, #428]	; (44c <STACK_SIZE+0x4c>)
     29e:	4b6c      	ldr	r3, [pc, #432]	; (450 <STACK_SIZE+0x50>)
     2a0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     2a2:	00a4      	lsls	r4, r4, #2
     2a4:	4b6b      	ldr	r3, [pc, #428]	; (454 <STACK_SIZE+0x54>)
     2a6:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     2a8:	2300      	movs	r3, #0
     2aa:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     2ac:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     2ae:	2200      	movs	r2, #0
     2b0:	4691      	mov	r9, r2
     2b2:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     2b4:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     2b6:	2225      	movs	r2, #37	; 0x25
     2b8:	4649      	mov	r1, r9
     2ba:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     2bc:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2be:	3314      	adds	r3, #20
     2c0:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2c2:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2c4:	0020      	movs	r0, r4
     2c6:	47c0      	blx	r8
     2c8:	4680      	mov	r8, r0
     2ca:	2380      	movs	r3, #128	; 0x80
     2cc:	466a      	mov	r2, sp
     2ce:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d0:	466b      	mov	r3, sp
     2d2:	464a      	mov	r2, r9
     2d4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2d6:	2301      	movs	r3, #1
     2d8:	466a      	mov	r2, sp
     2da:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     2dc:	466b      	mov	r3, sp
     2de:	464a      	mov	r2, r9
     2e0:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2e2:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     2e4:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2e6:	2800      	cmp	r0, #0
     2e8:	d077      	beq.n	3da <i2c_master_init+0x1a6>
	pin_conf.mux_position = pad0 & 0xFFFF;
     2ea:	466b      	mov	r3, sp
     2ec:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     2ee:	2302      	movs	r3, #2
     2f0:	466a      	mov	r2, sp
     2f2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     2f4:	0c00      	lsrs	r0, r0, #16
     2f6:	b2c0      	uxtb	r0, r0
     2f8:	4669      	mov	r1, sp
     2fa:	4b57      	ldr	r3, [pc, #348]	; (458 <STACK_SIZE+0x58>)
     2fc:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     2fe:	2d00      	cmp	r5, #0
     300:	d070      	beq.n	3e4 <i2c_master_init+0x1b0>
	pin_conf.mux_position = pad1 & 0xFFFF;
     302:	466b      	mov	r3, sp
     304:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     306:	2302      	movs	r3, #2
     308:	466a      	mov	r2, sp
     30a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     30c:	0c28      	lsrs	r0, r5, #16
     30e:	b2c0      	uxtb	r0, r0
     310:	4669      	mov	r1, sp
     312:	4b51      	ldr	r3, [pc, #324]	; (458 <STACK_SIZE+0x58>)
     314:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     316:	8ab3      	ldrh	r3, [r6, #20]
     318:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     31a:	8af3      	ldrh	r3, [r6, #22]
     31c:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     31e:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     320:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     322:	2b00      	cmp	r3, #0
     324:	d104      	bne.n	330 <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     326:	4b4d      	ldr	r3, [pc, #308]	; (45c <STACK_SIZE+0x5c>)
     328:	789b      	ldrb	r3, [r3, #2]
     32a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     32c:	0fdb      	lsrs	r3, r3, #31
     32e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     330:	68b1      	ldr	r1, [r6, #8]
     332:	6933      	ldr	r3, [r6, #16]
     334:	430b      	orrs	r3, r1
     336:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     338:	2224      	movs	r2, #36	; 0x24
     33a:	5cb2      	ldrb	r2, [r6, r2]
     33c:	2a00      	cmp	r2, #0
     33e:	d002      	beq.n	346 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     340:	2280      	movs	r2, #128	; 0x80
     342:	05d2      	lsls	r2, r2, #23
     344:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     346:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     348:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     34a:	222c      	movs	r2, #44	; 0x2c
     34c:	5cb2      	ldrb	r2, [r6, r2]
     34e:	2a00      	cmp	r2, #0
     350:	d103      	bne.n	35a <i2c_master_init+0x126>
     352:	2280      	movs	r2, #128	; 0x80
     354:	0492      	lsls	r2, r2, #18
     356:	4291      	cmp	r1, r2
     358:	d102      	bne.n	360 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     35a:	2280      	movs	r2, #128	; 0x80
     35c:	0512      	lsls	r2, r2, #20
     35e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     360:	222d      	movs	r2, #45	; 0x2d
     362:	5cb2      	ldrb	r2, [r6, r2]
     364:	2a00      	cmp	r2, #0
     366:	d002      	beq.n	36e <i2c_master_init+0x13a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     368:	2280      	movs	r2, #128	; 0x80
     36a:	0412      	lsls	r2, r2, #16
     36c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     36e:	222e      	movs	r2, #46	; 0x2e
     370:	5cb2      	ldrb	r2, [r6, r2]
     372:	2a00      	cmp	r2, #0
     374:	d002      	beq.n	37c <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     376:	2280      	movs	r2, #128	; 0x80
     378:	03d2      	lsls	r2, r2, #15
     37a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     37c:	6822      	ldr	r2, [r4, #0]
     37e:	4313      	orrs	r3, r2
     380:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     382:	2380      	movs	r3, #128	; 0x80
     384:	005b      	lsls	r3, r3, #1
     386:	6063      	str	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     388:	4645      	mov	r5, r8
     38a:	350e      	adds	r5, #14
     38c:	b2e8      	uxtb	r0, r5
     38e:	4b34      	ldr	r3, [pc, #208]	; (460 <STACK_SIZE+0x60>)
     390:	4798      	blx	r3
     392:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     394:	6873      	ldr	r3, [r6, #4]
     396:	4698      	mov	r8, r3
	tmp_baud = (int32_t)(div_ceil(fgclk -  4680000, 2 * fscl));
     398:	21fa      	movs	r1, #250	; 0xfa
     39a:	00c9      	lsls	r1, r1, #3
     39c:	6833      	ldr	r3, [r6, #0]
     39e:	4359      	muls	r1, r3
     3a0:	4b30      	ldr	r3, [pc, #192]	; (464 <STACK_SIZE+0x64>)
     3a2:	18c8      	adds	r0, r1, r3
     3a4:	19c0      	adds	r0, r0, r7
     3a6:	4b30      	ldr	r3, [pc, #192]	; (468 <STACK_SIZE+0x68>)
     3a8:	4798      	blx	r3
     3aa:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     3ac:	2380      	movs	r3, #128	; 0x80
     3ae:	049b      	lsls	r3, r3, #18
     3b0:	68b2      	ldr	r2, [r6, #8]
     3b2:	429a      	cmp	r2, r3
     3b4:	d01c      	beq.n	3f0 <i2c_master_init+0x1bc>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3b6:	2040      	movs	r0, #64	; 0x40
     3b8:	2dff      	cmp	r5, #255	; 0xff
     3ba:	d900      	bls.n	3be <i2c_master_init+0x18a>
     3bc:	e760      	b.n	280 <i2c_master_init+0x4c>
	int32_t tmp_baudlow_hs = 0;
     3be:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     3c0:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3c2:	23ff      	movs	r3, #255	; 0xff
     3c4:	402b      	ands	r3, r5
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     3c6:	0636      	lsls	r6, r6, #24
     3c8:	4333      	orrs	r3, r6
     3ca:	0400      	lsls	r0, r0, #16
     3cc:	22ff      	movs	r2, #255	; 0xff
     3ce:	0412      	lsls	r2, r2, #16
     3d0:	4010      	ands	r0, r2
     3d2:	4303      	orrs	r3, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     3d4:	60e3      	str	r3, [r4, #12]
	enum status_code tmp_status_code = STATUS_OK;
     3d6:	2000      	movs	r0, #0
     3d8:	e752      	b.n	280 <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     3da:	2100      	movs	r1, #0
     3dc:	0020      	movs	r0, r4
     3de:	4b23      	ldr	r3, [pc, #140]	; (46c <STACK_SIZE+0x6c>)
     3e0:	4798      	blx	r3
     3e2:	e782      	b.n	2ea <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     3e4:	2101      	movs	r1, #1
     3e6:	0020      	movs	r0, r4
     3e8:	4b20      	ldr	r3, [pc, #128]	; (46c <STACK_SIZE+0x6c>)
     3ea:	4798      	blx	r3
     3ec:	0005      	movs	r5, r0
     3ee:	e788      	b.n	302 <i2c_master_init+0xce>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3f0:	21fa      	movs	r1, #250	; 0xfa
     3f2:	0089      	lsls	r1, r1, #2
     3f4:	4643      	mov	r3, r8
     3f6:	434b      	muls	r3, r1
     3f8:	4698      	mov	r8, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2) / (3 * fscl_hs) - 1);
     3fa:	0078      	lsls	r0, r7, #1
     3fc:	0059      	lsls	r1, r3, #1
     3fe:	4441      	add	r1, r8
     400:	4b19      	ldr	r3, [pc, #100]	; (468 <STACK_SIZE+0x68>)
     402:	4798      	blx	r3
     404:	1e46      	subs	r6, r0, #1
		if (tmp_baudlow_hs) {
     406:	2e00      	cmp	r6, #0
     408:	d00b      	beq.n	422 <STACK_SIZE+0x22>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     40a:	4641      	mov	r1, r8
     40c:	0038      	movs	r0, r7
     40e:	4b16      	ldr	r3, [pc, #88]	; (468 <STACK_SIZE+0x68>)
     410:	4798      	blx	r3
     412:	3802      	subs	r0, #2
     414:	1b80      	subs	r0, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     416:	2dff      	cmp	r5, #255	; 0xff
     418:	d80b      	bhi.n	432 <STACK_SIZE+0x32>
     41a:	28ff      	cmp	r0, #255	; 0xff
     41c:	d9d1      	bls.n	3c2 <i2c_master_init+0x18e>
     41e:	2040      	movs	r0, #64	; 0x40
     420:	e72e      	b.n	280 <i2c_master_init+0x4c>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     422:	4643      	mov	r3, r8
     424:	0059      	lsls	r1, r3, #1
     426:	1e48      	subs	r0, r1, #1
     428:	19c0      	adds	r0, r0, r7
     42a:	4b0f      	ldr	r3, [pc, #60]	; (468 <STACK_SIZE+0x68>)
     42c:	4798      	blx	r3
     42e:	3801      	subs	r0, #1
     430:	e7f1      	b.n	416 <STACK_SIZE+0x16>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     432:	2040      	movs	r0, #64	; 0x40
     434:	e724      	b.n	280 <i2c_master_init+0x4c>
     436:	46c0      	nop			; (mov r8, r8)
     438:	00001b25 	.word	0x00001b25
     43c:	40000400 	.word	0x40000400
     440:	00002c81 	.word	0x00002c81
     444:	00002bf5 	.word	0x00002bf5
     448:	00001a59 	.word	0x00001a59
     44c:	00000899 	.word	0x00000899
     450:	00001b4d 	.word	0x00001b4d
     454:	200008f4 	.word	0x200008f4
     458:	00002d79 	.word	0x00002d79
     45c:	41002000 	.word	0x41002000
     460:	00002c9d 	.word	0x00002c9d
     464:	ffb896bf 	.word	0xffb896bf
     468:	00002ead 	.word	0x00002ead
     46c:	00001aa5 	.word	0x00001aa5

00000470 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     470:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     472:	7e1a      	ldrb	r2, [r3, #24]
     474:	0792      	lsls	r2, r2, #30
     476:	d507      	bpl.n	488 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     478:	2202      	movs	r2, #2
     47a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     47c:	8b5b      	ldrh	r3, [r3, #26]
     47e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     480:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     482:	17db      	asrs	r3, r3, #31
     484:	4018      	ands	r0, r3
}
     486:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     488:	8b5a      	ldrh	r2, [r3, #26]
     48a:	0752      	lsls	r2, r2, #29
     48c:	d506      	bpl.n	49c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     48e:	6859      	ldr	r1, [r3, #4]
     490:	22c0      	movs	r2, #192	; 0xc0
     492:	0292      	lsls	r2, r2, #10
     494:	430a      	orrs	r2, r1
     496:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     498:	2018      	movs	r0, #24
     49a:	e7f4      	b.n	486 <_i2c_master_address_response+0x16>
	return STATUS_OK;
     49c:	2000      	movs	r0, #0
     49e:	e7f2      	b.n	486 <_i2c_master_address_response+0x16>

000004a0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     4a0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     4a4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4a6:	2401      	movs	r4, #1
     4a8:	2502      	movs	r5, #2
     4aa:	7e11      	ldrb	r1, [r2, #24]
     4ac:	4221      	tst	r1, r4
     4ae:	d10b      	bne.n	4c8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     4b0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     4b2:	4229      	tst	r1, r5
     4b4:	d106      	bne.n	4c4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     4b6:	3301      	adds	r3, #1
     4b8:	b29b      	uxth	r3, r3
     4ba:	8901      	ldrh	r1, [r0, #8]
     4bc:	4299      	cmp	r1, r3
     4be:	d8f4      	bhi.n	4aa <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     4c0:	2012      	movs	r0, #18
     4c2:	e002      	b.n	4ca <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     4c4:	2000      	movs	r0, #0
     4c6:	e000      	b.n	4ca <_i2c_master_wait_for_bus+0x2a>
     4c8:	2000      	movs	r0, #0
}
     4ca:	bd30      	pop	{r4, r5, pc}

000004cc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     4cc:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4ce:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4d0:	6862      	ldr	r2, [r4, #4]
     4d2:	2380      	movs	r3, #128	; 0x80
     4d4:	02db      	lsls	r3, r3, #11
     4d6:	4313      	orrs	r3, r2
     4d8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     4da:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     4dc:	4b02      	ldr	r3, [pc, #8]	; (4e8 <_i2c_master_send_hs_master_code+0x1c>)
     4de:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4e0:	2301      	movs	r3, #1
     4e2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     4e4:	bd10      	pop	{r4, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	000004a1 	.word	0x000004a1

000004ec <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ee:	46de      	mov	lr, fp
     4f0:	4657      	mov	r7, sl
     4f2:	464e      	mov	r6, r9
     4f4:	4645      	mov	r5, r8
     4f6:	b5e0      	push	{r5, r6, r7, lr}
     4f8:	b083      	sub	sp, #12
     4fa:	0006      	movs	r6, r0
     4fc:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4fe:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     500:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     502:	682b      	ldr	r3, [r5, #0]
     504:	011b      	lsls	r3, r3, #4
     506:	0fdb      	lsrs	r3, r3, #31
     508:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     50a:	7a4b      	ldrb	r3, [r1, #9]
     50c:	2b00      	cmp	r3, #0
     50e:	d12b      	bne.n	568 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     510:	686b      	ldr	r3, [r5, #4]
     512:	4a58      	ldr	r2, [pc, #352]	; (674 <_i2c_master_read_packet+0x188>)
     514:	4013      	ands	r3, r2
     516:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     518:	464b      	mov	r3, r9
     51a:	7a1b      	ldrb	r3, [r3, #8]
     51c:	2b00      	cmp	r3, #0
     51e:	d127      	bne.n	570 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     520:	464b      	mov	r3, r9
     522:	881b      	ldrh	r3, [r3, #0]
     524:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     526:	464a      	mov	r2, r9
     528:	7a52      	ldrb	r2, [r2, #9]
     52a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     52c:	4313      	orrs	r3, r2
     52e:	2201      	movs	r2, #1
     530:	4313      	orrs	r3, r2
     532:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     534:	0030      	movs	r0, r6
     536:	4b50      	ldr	r3, [pc, #320]	; (678 <_i2c_master_read_packet+0x18c>)
     538:	4798      	blx	r3
     53a:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     53c:	4653      	mov	r3, sl
     53e:	2b00      	cmp	r3, #0
     540:	d003      	beq.n	54a <_i2c_master_read_packet+0x5e>
     542:	464b      	mov	r3, r9
     544:	885b      	ldrh	r3, [r3, #2]
     546:	2b01      	cmp	r3, #1
     548:	d03b      	beq.n	5c2 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     54a:	686b      	ldr	r3, [r5, #4]
     54c:	4a49      	ldr	r2, [pc, #292]	; (674 <_i2c_master_read_packet+0x188>)
     54e:	4013      	ands	r3, r2
     550:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     552:	9b01      	ldr	r3, [sp, #4]
     554:	2b00      	cmp	r3, #0
     556:	d03a      	beq.n	5ce <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     558:	9801      	ldr	r0, [sp, #4]
     55a:	b003      	add	sp, #12
     55c:	bc3c      	pop	{r2, r3, r4, r5}
     55e:	4690      	mov	r8, r2
     560:	4699      	mov	r9, r3
     562:	46a2      	mov	sl, r4
     564:	46ab      	mov	fp, r5
     566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     568:	7a89      	ldrb	r1, [r1, #10]
     56a:	4b44      	ldr	r3, [pc, #272]	; (67c <_i2c_master_read_packet+0x190>)
     56c:	4798      	blx	r3
     56e:	e7cf      	b.n	510 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     570:	464b      	mov	r3, r9
     572:	881b      	ldrh	r3, [r3, #0]
     574:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     576:	464a      	mov	r2, r9
     578:	7a52      	ldrb	r2, [r2, #9]
     57a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     57c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     57e:	2280      	movs	r2, #128	; 0x80
     580:	0212      	lsls	r2, r2, #8
     582:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     584:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     586:	0030      	movs	r0, r6
     588:	4b3b      	ldr	r3, [pc, #236]	; (678 <_i2c_master_read_packet+0x18c>)
     58a:	4798      	blx	r3
     58c:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     58e:	686b      	ldr	r3, [r5, #4]
     590:	4a38      	ldr	r2, [pc, #224]	; (674 <_i2c_master_read_packet+0x188>)
     592:	4013      	ands	r3, r2
     594:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     596:	2800      	cmp	r0, #0
     598:	d1de      	bne.n	558 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     59a:	0030      	movs	r0, r6
     59c:	4b38      	ldr	r3, [pc, #224]	; (680 <_i2c_master_read_packet+0x194>)
     59e:	4798      	blx	r3
     5a0:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     5a2:	2800      	cmp	r0, #0
     5a4:	d1d8      	bne.n	558 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5a6:	464b      	mov	r3, r9
     5a8:	881b      	ldrh	r3, [r3, #0]
     5aa:	0a1b      	lsrs	r3, r3, #8
     5ac:	2278      	movs	r2, #120	; 0x78
     5ae:	4313      	orrs	r3, r2
     5b0:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5b2:	464a      	mov	r2, r9
     5b4:	7a52      	ldrb	r2, [r2, #9]
     5b6:	0392      	lsls	r2, r2, #14
     5b8:	2101      	movs	r1, #1
     5ba:	430a      	orrs	r2, r1
     5bc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     5be:	626b      	str	r3, [r5, #36]	; 0x24
     5c0:	e7b8      	b.n	534 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5c2:	686a      	ldr	r2, [r5, #4]
     5c4:	2380      	movs	r3, #128	; 0x80
     5c6:	02db      	lsls	r3, r3, #11
     5c8:	4313      	orrs	r3, r2
     5ca:	606b      	str	r3, [r5, #4]
     5cc:	e7c1      	b.n	552 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     5ce:	0030      	movs	r0, r6
     5d0:	4b2b      	ldr	r3, [pc, #172]	; (680 <_i2c_master_read_packet+0x194>)
     5d2:	4798      	blx	r3
     5d4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     5d6:	2800      	cmp	r0, #0
     5d8:	d1be      	bne.n	558 <_i2c_master_read_packet+0x6c>
     5da:	3c01      	subs	r4, #1
     5dc:	b2a4      	uxth	r4, r4
     5de:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     5e0:	4b28      	ldr	r3, [pc, #160]	; (684 <_i2c_master_read_packet+0x198>)
     5e2:	469b      	mov	fp, r3
     5e4:	e015      	b.n	612 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     5e6:	2c01      	cmp	r4, #1
     5e8:	d020      	beq.n	62c <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     5ea:	0030      	movs	r0, r6
     5ec:	4b26      	ldr	r3, [pc, #152]	; (688 <_i2c_master_read_packet+0x19c>)
     5ee:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     5f0:	4643      	mov	r3, r8
     5f2:	1c5f      	adds	r7, r3, #1
     5f4:	b2bf      	uxth	r7, r7
     5f6:	2328      	movs	r3, #40	; 0x28
     5f8:	5ceb      	ldrb	r3, [r5, r3]
     5fa:	464a      	mov	r2, r9
     5fc:	6852      	ldr	r2, [r2, #4]
     5fe:	4641      	mov	r1, r8
     600:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     602:	0030      	movs	r0, r6
     604:	4b1c      	ldr	r3, [pc, #112]	; (678 <_i2c_master_read_packet+0x18c>)
     606:	4798      	blx	r3
     608:	3c01      	subs	r4, #1
     60a:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     60c:	2800      	cmp	r0, #0
     60e:	d115      	bne.n	63c <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     610:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     612:	455c      	cmp	r4, fp
     614:	d014      	beq.n	640 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     616:	8b6b      	ldrh	r3, [r5, #26]
     618:	069b      	lsls	r3, r3, #26
     61a:	d527      	bpl.n	66c <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     61c:	7af3      	ldrb	r3, [r6, #11]
     61e:	2b00      	cmp	r3, #0
     620:	d0e3      	beq.n	5ea <_i2c_master_read_packet+0xfe>
     622:	4653      	mov	r3, sl
     624:	2b00      	cmp	r3, #0
     626:	d1de      	bne.n	5e6 <_i2c_master_read_packet+0xfa>
     628:	2c00      	cmp	r4, #0
     62a:	d1de      	bne.n	5ea <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     62c:	686a      	ldr	r2, [r5, #4]
     62e:	2380      	movs	r3, #128	; 0x80
     630:	02db      	lsls	r3, r3, #11
     632:	4313      	orrs	r3, r2
     634:	606b      	str	r3, [r5, #4]
     636:	3c01      	subs	r4, #1
     638:	b2a4      	uxth	r4, r4
     63a:	e7ea      	b.n	612 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     63c:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     63e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     640:	7ab3      	ldrb	r3, [r6, #10]
     642:	2b00      	cmp	r3, #0
     644:	d109      	bne.n	65a <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     646:	0030      	movs	r0, r6
     648:	4b0f      	ldr	r3, [pc, #60]	; (688 <_i2c_master_read_packet+0x19c>)
     64a:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     64c:	2328      	movs	r3, #40	; 0x28
     64e:	5cea      	ldrb	r2, [r5, r3]
     650:	464b      	mov	r3, r9
     652:	685b      	ldr	r3, [r3, #4]
     654:	4641      	mov	r1, r8
     656:	545a      	strb	r2, [r3, r1]
     658:	e77e      	b.n	558 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     65a:	0030      	movs	r0, r6
     65c:	4b0a      	ldr	r3, [pc, #40]	; (688 <_i2c_master_read_packet+0x19c>)
     65e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     660:	686a      	ldr	r2, [r5, #4]
     662:	23c0      	movs	r3, #192	; 0xc0
     664:	029b      	lsls	r3, r3, #10
     666:	4313      	orrs	r3, r2
     668:	606b      	str	r3, [r5, #4]
     66a:	e7ec      	b.n	646 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     66c:	2341      	movs	r3, #65	; 0x41
     66e:	9301      	str	r3, [sp, #4]
     670:	e772      	b.n	558 <_i2c_master_read_packet+0x6c>
     672:	46c0      	nop			; (mov r8, r8)
     674:	fffbffff 	.word	0xfffbffff
     678:	000004a1 	.word	0x000004a1
     67c:	000004cd 	.word	0x000004cd
     680:	00000471 	.word	0x00000471
     684:	0000ffff 	.word	0x0000ffff
     688:	00000229 	.word	0x00000229

0000068c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	46de      	mov	lr, fp
     690:	4657      	mov	r7, sl
     692:	464e      	mov	r6, r9
     694:	4645      	mov	r5, r8
     696:	b5e0      	push	{r5, r6, r7, lr}
     698:	b083      	sub	sp, #12
     69a:	0006      	movs	r6, r0
     69c:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     69e:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     6a0:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     6a2:	4b32      	ldr	r3, [pc, #200]	; (76c <_i2c_master_write_packet+0xe0>)
     6a4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     6a6:	7a7b      	ldrb	r3, [r7, #9]
     6a8:	2b00      	cmp	r3, #0
     6aa:	d11d      	bne.n	6e8 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6ac:	686b      	ldr	r3, [r5, #4]
     6ae:	4a30      	ldr	r2, [pc, #192]	; (770 <_i2c_master_write_packet+0xe4>)
     6b0:	4013      	ands	r3, r2
     6b2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     6b4:	7a3b      	ldrb	r3, [r7, #8]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d01b      	beq.n	6f2 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6ba:	883b      	ldrh	r3, [r7, #0]
     6bc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6be:	7a7a      	ldrb	r2, [r7, #9]
     6c0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6c2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     6c4:	2280      	movs	r2, #128	; 0x80
     6c6:	0212      	lsls	r2, r2, #8
     6c8:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6ca:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     6cc:	0030      	movs	r0, r6
     6ce:	4b29      	ldr	r3, [pc, #164]	; (774 <_i2c_master_write_packet+0xe8>)
     6d0:	4798      	blx	r3
     6d2:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     6d4:	2800      	cmp	r0, #0
     6d6:	d013      	beq.n	700 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     6d8:	9801      	ldr	r0, [sp, #4]
     6da:	b003      	add	sp, #12
     6dc:	bc3c      	pop	{r2, r3, r4, r5}
     6de:	4690      	mov	r8, r2
     6e0:	4699      	mov	r9, r3
     6e2:	46a2      	mov	sl, r4
     6e4:	46ab      	mov	fp, r5
     6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6e8:	7ab9      	ldrb	r1, [r7, #10]
     6ea:	0030      	movs	r0, r6
     6ec:	4b22      	ldr	r3, [pc, #136]	; (778 <_i2c_master_write_packet+0xec>)
     6ee:	4798      	blx	r3
     6f0:	e7dc      	b.n	6ac <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6f2:	883b      	ldrh	r3, [r7, #0]
     6f4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     6f6:	7a7a      	ldrb	r2, [r7, #9]
     6f8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     6fa:	4313      	orrs	r3, r2
     6fc:	626b      	str	r3, [r5, #36]	; 0x24
     6fe:	e7e5      	b.n	6cc <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     700:	0030      	movs	r0, r6
     702:	4b1e      	ldr	r3, [pc, #120]	; (77c <_i2c_master_write_packet+0xf0>)
     704:	4798      	blx	r3
     706:	1e03      	subs	r3, r0, #0
     708:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     70a:	d1e5      	bne.n	6d8 <_i2c_master_write_packet+0x4c>
     70c:	46a0      	mov	r8, r4
     70e:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     710:	3320      	adds	r3, #32
     712:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     714:	4b15      	ldr	r3, [pc, #84]	; (76c <_i2c_master_write_packet+0xe0>)
     716:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     718:	4b16      	ldr	r3, [pc, #88]	; (774 <_i2c_master_write_packet+0xe8>)
     71a:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     71c:	4544      	cmp	r4, r8
     71e:	d015      	beq.n	74c <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     720:	8b6b      	ldrh	r3, [r5, #26]
     722:	464a      	mov	r2, r9
     724:	4213      	tst	r3, r2
     726:	d01d      	beq.n	764 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     728:	0030      	movs	r0, r6
     72a:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	5d1a      	ldrb	r2, [r3, r4]
     730:	2328      	movs	r3, #40	; 0x28
     732:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     734:	0030      	movs	r0, r6
     736:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     738:	2800      	cmp	r0, #0
     73a:	d106      	bne.n	74a <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     73c:	8b6b      	ldrh	r3, [r5, #26]
     73e:	3401      	adds	r4, #1
     740:	075b      	lsls	r3, r3, #29
     742:	d5eb      	bpl.n	71c <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     744:	231e      	movs	r3, #30
     746:	9301      	str	r3, [sp, #4]
     748:	e000      	b.n	74c <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     74a:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     74c:	7ab3      	ldrb	r3, [r6, #10]
     74e:	2b00      	cmp	r3, #0
     750:	d0c2      	beq.n	6d8 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     752:	0030      	movs	r0, r6
     754:	4b05      	ldr	r3, [pc, #20]	; (76c <_i2c_master_write_packet+0xe0>)
     756:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     758:	686a      	ldr	r2, [r5, #4]
     75a:	23c0      	movs	r3, #192	; 0xc0
     75c:	029b      	lsls	r3, r3, #10
     75e:	4313      	orrs	r3, r2
     760:	606b      	str	r3, [r5, #4]
     762:	e7b9      	b.n	6d8 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     764:	2341      	movs	r3, #65	; 0x41
     766:	9301      	str	r3, [sp, #4]
     768:	e7b6      	b.n	6d8 <_i2c_master_write_packet+0x4c>
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00000229 	.word	0x00000229
     770:	fffbffff 	.word	0xfffbffff
     774:	000004a1 	.word	0x000004a1
     778:	000004cd 	.word	0x000004cd
     77c:	00000471 	.word	0x00000471

00000780 <i2c_master_read_packet_wait>:
{
     780:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     782:	8b83      	ldrh	r3, [r0, #28]
     784:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     786:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     788:	2b00      	cmp	r3, #0
     78a:	d001      	beq.n	790 <i2c_master_read_packet_wait+0x10>
}
     78c:	0010      	movs	r0, r2
     78e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     790:	3301      	adds	r3, #1
     792:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     794:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     796:	4b02      	ldr	r3, [pc, #8]	; (7a0 <i2c_master_read_packet_wait+0x20>)
     798:	4798      	blx	r3
     79a:	0002      	movs	r2, r0
     79c:	e7f6      	b.n	78c <i2c_master_read_packet_wait+0xc>
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	000004ed 	.word	0x000004ed

000007a4 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     7a4:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     7a6:	8b83      	ldrh	r3, [r0, #28]
     7a8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     7aa:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	d001      	beq.n	7b4 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     7b0:	0010      	movs	r0, r2
     7b2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     7b4:	3301      	adds	r3, #1
     7b6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     7b8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     7ba:	4b02      	ldr	r3, [pc, #8]	; (7c4 <i2c_master_write_packet_wait+0x20>)
     7bc:	4798      	blx	r3
     7be:	0002      	movs	r2, r0
     7c0:	e7f6      	b.n	7b0 <i2c_master_write_packet_wait+0xc>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	0000068d 	.word	0x0000068d

000007c8 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     7c8:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     7ca:	2207      	movs	r2, #7
     7cc:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     7ce:	421a      	tst	r2, r3
     7d0:	d1fc      	bne.n	7cc <_i2c_master_wait_for_sync+0x4>
}
     7d2:	4770      	bx	lr

000007d4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     7d4:	b570      	push	{r4, r5, r6, lr}
     7d6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     7d8:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     7da:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     7dc:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     7de:	8b83      	ldrh	r3, [r0, #28]
     7e0:	1aed      	subs	r5, r5, r3
     7e2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     7e4:	8b83      	ldrh	r3, [r0, #28]
     7e6:	3b01      	subs	r3, #1
     7e8:	b29b      	uxth	r3, r3
     7ea:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     7ec:	0113      	lsls	r3, r2, #4
     7ee:	d51d      	bpl.n	82c <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     7f0:	7ac3      	ldrb	r3, [r0, #11]
     7f2:	2b00      	cmp	r3, #0
     7f4:	d003      	beq.n	7fe <_i2c_master_read+0x2a>
     7f6:	8b83      	ldrh	r3, [r0, #28]
     7f8:	b29b      	uxth	r3, r3
     7fa:	2b01      	cmp	r3, #1
     7fc:	d010      	beq.n	820 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     7fe:	8ba3      	ldrh	r3, [r4, #28]
     800:	b29b      	uxth	r3, r3
     802:	2b00      	cmp	r3, #0
     804:	d102      	bne.n	80c <_i2c_master_read+0x38>
		if (module->send_stop) {
     806:	7aa3      	ldrb	r3, [r4, #10]
     808:	2b00      	cmp	r3, #0
     80a:	d11c      	bne.n	846 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     80c:	0020      	movs	r0, r4
     80e:	4b12      	ldr	r3, [pc, #72]	; (858 <_i2c_master_read+0x84>)
     810:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     812:	6a23      	ldr	r3, [r4, #32]
     814:	195d      	adds	r5, r3, r5
     816:	2328      	movs	r3, #40	; 0x28
     818:	5cf3      	ldrb	r3, [r6, r3]
     81a:	b2db      	uxtb	r3, r3
     81c:	702b      	strb	r3, [r5, #0]
}
     81e:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     820:	6872      	ldr	r2, [r6, #4]
     822:	2380      	movs	r3, #128	; 0x80
     824:	02db      	lsls	r3, r3, #11
     826:	4313      	orrs	r3, r2
     828:	6073      	str	r3, [r6, #4]
     82a:	e7e8      	b.n	7fe <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     82c:	7ac3      	ldrb	r3, [r0, #11]
     82e:	2b00      	cmp	r3, #0
     830:	d0e5      	beq.n	7fe <_i2c_master_read+0x2a>
     832:	8b83      	ldrh	r3, [r0, #28]
     834:	b29b      	uxth	r3, r3
     836:	2b00      	cmp	r3, #0
     838:	d1e1      	bne.n	7fe <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     83a:	6872      	ldr	r2, [r6, #4]
     83c:	2380      	movs	r3, #128	; 0x80
     83e:	02db      	lsls	r3, r3, #11
     840:	4313      	orrs	r3, r2
     842:	6073      	str	r3, [r6, #4]
     844:	e7db      	b.n	7fe <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     846:	0020      	movs	r0, r4
     848:	4b03      	ldr	r3, [pc, #12]	; (858 <_i2c_master_read+0x84>)
     84a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     84c:	6872      	ldr	r2, [r6, #4]
     84e:	23c0      	movs	r3, #192	; 0xc0
     850:	029b      	lsls	r3, r3, #10
     852:	4313      	orrs	r3, r2
     854:	6073      	str	r3, [r6, #4]
     856:	e7d9      	b.n	80c <_i2c_master_read+0x38>
     858:	000007c9 	.word	0x000007c9

0000085c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     85c:	b570      	push	{r4, r5, r6, lr}
     85e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     860:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     862:	8b6b      	ldrh	r3, [r5, #26]
     864:	075b      	lsls	r3, r3, #29
     866:	d503      	bpl.n	870 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     868:	221e      	movs	r2, #30
     86a:	2325      	movs	r3, #37	; 0x25
     86c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     86e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     870:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     872:	8b83      	ldrh	r3, [r0, #28]
     874:	1af6      	subs	r6, r6, r3
     876:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     878:	8b83      	ldrh	r3, [r0, #28]
     87a:	3b01      	subs	r3, #1
     87c:	b29b      	uxth	r3, r3
     87e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     880:	4b04      	ldr	r3, [pc, #16]	; (894 <_i2c_master_write+0x38>)
     882:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     884:	6a23      	ldr	r3, [r4, #32]
     886:	199e      	adds	r6, r3, r6
     888:	7833      	ldrb	r3, [r6, #0]
     88a:	b2db      	uxtb	r3, r3
     88c:	2228      	movs	r2, #40	; 0x28
     88e:	54ab      	strb	r3, [r5, r2]
     890:	e7ed      	b.n	86e <_i2c_master_write+0x12>
     892:	46c0      	nop			; (mov r8, r8)
     894:	000007c9 	.word	0x000007c9

00000898 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     898:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     89a:	0080      	lsls	r0, r0, #2
     89c:	4b75      	ldr	r3, [pc, #468]	; (a74 <_i2c_master_interrupt_handler+0x1dc>)
     89e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8a0:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     8a2:	682b      	ldr	r3, [r5, #0]
     8a4:	011b      	lsls	r3, r3, #4
     8a6:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     8a8:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     8aa:	7e26      	ldrb	r6, [r4, #24]
     8ac:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     8ae:	8b63      	ldrh	r3, [r4, #26]
     8b0:	b29b      	uxth	r3, r3
     8b2:	2b00      	cmp	r3, #0
     8b4:	d103      	bne.n	8be <_i2c_master_interrupt_handler+0x26>
     8b6:	8ba3      	ldrh	r3, [r4, #28]
     8b8:	b29b      	uxth	r3, r3
     8ba:	2b00      	cmp	r3, #0
     8bc:	d123      	bne.n	906 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8be:	8b63      	ldrh	r3, [r4, #26]
     8c0:	b29b      	uxth	r3, r3
     8c2:	2b00      	cmp	r3, #0
     8c4:	d008      	beq.n	8d8 <_i2c_master_interrupt_handler+0x40>
     8c6:	8ba3      	ldrh	r3, [r4, #28]
     8c8:	b29b      	uxth	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	d104      	bne.n	8d8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     8ce:	3325      	adds	r3, #37	; 0x25
     8d0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     8d2:	2b05      	cmp	r3, #5
     8d4:	d100      	bne.n	8d8 <_i2c_master_interrupt_handler+0x40>
     8d6:	e06d      	b.n	9b4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     8d8:	8b63      	ldrh	r3, [r4, #26]
     8da:	b29b      	uxth	r3, r3
     8dc:	2b00      	cmp	r3, #0
     8de:	d024      	beq.n	92a <_i2c_master_interrupt_handler+0x92>
     8e0:	8ba3      	ldrh	r3, [r4, #28]
     8e2:	b29b      	uxth	r3, r3
     8e4:	2b00      	cmp	r3, #0
     8e6:	d020      	beq.n	92a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     8e8:	8b6b      	ldrh	r3, [r5, #26]
     8ea:	069b      	lsls	r3, r3, #26
     8ec:	d500      	bpl.n	8f0 <_i2c_master_interrupt_handler+0x58>
     8ee:	e081      	b.n	9f4 <_i2c_master_interrupt_handler+0x15c>
     8f0:	2a00      	cmp	r2, #0
     8f2:	d004      	beq.n	8fe <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     8f4:	8ba3      	ldrh	r3, [r4, #28]
     8f6:	b29b      	uxth	r3, r3
     8f8:	2b01      	cmp	r3, #1
     8fa:	d100      	bne.n	8fe <_i2c_master_interrupt_handler+0x66>
     8fc:	e07a      	b.n	9f4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     8fe:	2241      	movs	r2, #65	; 0x41
     900:	2325      	movs	r3, #37	; 0x25
     902:	54e2      	strb	r2, [r4, r3]
     904:	e011      	b.n	92a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     906:	7e2b      	ldrb	r3, [r5, #24]
     908:	07db      	lsls	r3, r3, #31
     90a:	d507      	bpl.n	91c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     90c:	2301      	movs	r3, #1
     90e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     910:	8b6b      	ldrh	r3, [r5, #26]
     912:	079b      	lsls	r3, r3, #30
     914:	d52e      	bpl.n	974 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     916:	2241      	movs	r2, #65	; 0x41
     918:	2325      	movs	r3, #37	; 0x25
     91a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     91c:	8ba3      	ldrh	r3, [r4, #28]
     91e:	b29b      	uxth	r3, r3
     920:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     922:	2325      	movs	r3, #37	; 0x25
     924:	5ce3      	ldrb	r3, [r4, r3]
     926:	2b05      	cmp	r3, #5
     928:	d038      	beq.n	99c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     92a:	8b63      	ldrh	r3, [r4, #26]
     92c:	b29b      	uxth	r3, r3
     92e:	2b00      	cmp	r3, #0
     930:	d007      	beq.n	942 <_i2c_master_interrupt_handler+0xaa>
     932:	8ba3      	ldrh	r3, [r4, #28]
     934:	b29b      	uxth	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	d103      	bne.n	942 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     93a:	3325      	adds	r3, #37	; 0x25
     93c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     93e:	2b05      	cmp	r3, #5
     940:	d064      	beq.n	a0c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     942:	2325      	movs	r3, #37	; 0x25
     944:	5ce3      	ldrb	r3, [r4, r3]
     946:	2b05      	cmp	r3, #5
     948:	d013      	beq.n	972 <_i2c_master_interrupt_handler+0xda>
     94a:	2325      	movs	r3, #37	; 0x25
     94c:	5ce3      	ldrb	r3, [r4, r3]
     94e:	2b00      	cmp	r3, #0
     950:	d00f      	beq.n	972 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     952:	2303      	movs	r3, #3
     954:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     956:	2300      	movs	r3, #0
     958:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     95a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     95c:	3325      	adds	r3, #37	; 0x25
     95e:	5ce3      	ldrb	r3, [r4, r3]
     960:	2b41      	cmp	r3, #65	; 0x41
     962:	d003      	beq.n	96c <_i2c_master_interrupt_handler+0xd4>
     964:	7aa3      	ldrb	r3, [r4, #10]
     966:	2b00      	cmp	r3, #0
     968:	d000      	beq.n	96c <_i2c_master_interrupt_handler+0xd4>
     96a:	e075      	b.n	a58 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     96c:	0773      	lsls	r3, r6, #29
     96e:	d500      	bpl.n	972 <_i2c_master_interrupt_handler+0xda>
     970:	e07b      	b.n	a6a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     972:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     974:	8b6b      	ldrh	r3, [r5, #26]
     976:	075b      	lsls	r3, r3, #29
     978:	d5d0      	bpl.n	91c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     97a:	2218      	movs	r2, #24
     97c:	2325      	movs	r3, #37	; 0x25
     97e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     980:	2300      	movs	r3, #0
     982:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     984:	7aa3      	ldrb	r3, [r4, #10]
     986:	2b00      	cmp	r3, #0
     988:	d0c8      	beq.n	91c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     98a:	0020      	movs	r0, r4
     98c:	4b3a      	ldr	r3, [pc, #232]	; (a78 <_i2c_master_interrupt_handler+0x1e0>)
     98e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     990:	686a      	ldr	r2, [r5, #4]
     992:	23c0      	movs	r3, #192	; 0xc0
     994:	029b      	lsls	r3, r3, #10
     996:	4313      	orrs	r3, r2
     998:	606b      	str	r3, [r5, #4]
     99a:	e7bf      	b.n	91c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     99c:	331f      	adds	r3, #31
     99e:	5ce3      	ldrb	r3, [r4, r3]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d003      	beq.n	9ac <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     9a4:	0020      	movs	r0, r4
     9a6:	4b35      	ldr	r3, [pc, #212]	; (a7c <_i2c_master_interrupt_handler+0x1e4>)
     9a8:	4798      	blx	r3
     9aa:	e7be      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     9ac:	0020      	movs	r0, r4
     9ae:	4b34      	ldr	r3, [pc, #208]	; (a80 <_i2c_master_interrupt_handler+0x1e8>)
     9b0:	4798      	blx	r3
     9b2:	e7ba      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     9b4:	331f      	adds	r3, #31
     9b6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     9b8:	2b00      	cmp	r3, #0
     9ba:	d000      	beq.n	9be <_i2c_master_interrupt_handler+0x126>
     9bc:	e78c      	b.n	8d8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     9be:	3303      	adds	r3, #3
     9c0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     9c2:	2300      	movs	r3, #0
     9c4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     9c6:	3325      	adds	r3, #37	; 0x25
     9c8:	2200      	movs	r2, #0
     9ca:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     9cc:	7aa3      	ldrb	r3, [r4, #10]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d107      	bne.n	9e2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     9d2:	2301      	movs	r3, #1
     9d4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     9d6:	07f3      	lsls	r3, r6, #31
     9d8:	d5a7      	bpl.n	92a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     9da:	68e3      	ldr	r3, [r4, #12]
     9dc:	0020      	movs	r0, r4
     9de:	4798      	blx	r3
     9e0:	e7a3      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     9e2:	0020      	movs	r0, r4
     9e4:	4b24      	ldr	r3, [pc, #144]	; (a78 <_i2c_master_interrupt_handler+0x1e0>)
     9e6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     9e8:	686a      	ldr	r2, [r5, #4]
     9ea:	23c0      	movs	r3, #192	; 0xc0
     9ec:	029b      	lsls	r3, r3, #10
     9ee:	4313      	orrs	r3, r2
     9f0:	606b      	str	r3, [r5, #4]
     9f2:	e7f0      	b.n	9d6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     9f4:	2324      	movs	r3, #36	; 0x24
     9f6:	5ce3      	ldrb	r3, [r4, r3]
     9f8:	2b00      	cmp	r3, #0
     9fa:	d103      	bne.n	a04 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     9fc:	0020      	movs	r0, r4
     9fe:	4b20      	ldr	r3, [pc, #128]	; (a80 <_i2c_master_interrupt_handler+0x1e8>)
     a00:	4798      	blx	r3
     a02:	e792      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     a04:	0020      	movs	r0, r4
     a06:	4b1d      	ldr	r3, [pc, #116]	; (a7c <_i2c_master_interrupt_handler+0x1e4>)
     a08:	4798      	blx	r3
     a0a:	e78e      	b.n	92a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     a0c:	331f      	adds	r3, #31
     a0e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a10:	2b01      	cmp	r3, #1
     a12:	d196      	bne.n	942 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     a14:	7e2b      	ldrb	r3, [r5, #24]
     a16:	079b      	lsls	r3, r3, #30
     a18:	d501      	bpl.n	a1e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     a1a:	2302      	movs	r3, #2
     a1c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     a1e:	2303      	movs	r3, #3
     a20:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a22:	2300      	movs	r3, #0
     a24:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a26:	3325      	adds	r3, #37	; 0x25
     a28:	2200      	movs	r2, #0
     a2a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     a2c:	07b3      	lsls	r3, r6, #30
     a2e:	d503      	bpl.n	a38 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     a30:	2324      	movs	r3, #36	; 0x24
     a32:	5ce3      	ldrb	r3, [r4, r3]
     a34:	2b01      	cmp	r3, #1
     a36:	d00b      	beq.n	a50 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     a38:	07f3      	lsls	r3, r6, #31
     a3a:	d400      	bmi.n	a3e <_i2c_master_interrupt_handler+0x1a6>
     a3c:	e781      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a3e:	2324      	movs	r3, #36	; 0x24
     a40:	5ce3      	ldrb	r3, [r4, r3]
     a42:	2b00      	cmp	r3, #0
     a44:	d000      	beq.n	a48 <_i2c_master_interrupt_handler+0x1b0>
     a46:	e77c      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a48:	68e3      	ldr	r3, [r4, #12]
     a4a:	0020      	movs	r0, r4
     a4c:	4798      	blx	r3
     a4e:	e778      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     a50:	6923      	ldr	r3, [r4, #16]
     a52:	0020      	movs	r0, r4
     a54:	4798      	blx	r3
     a56:	e774      	b.n	942 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     a58:	0020      	movs	r0, r4
     a5a:	4b07      	ldr	r3, [pc, #28]	; (a78 <_i2c_master_interrupt_handler+0x1e0>)
     a5c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     a5e:	686a      	ldr	r2, [r5, #4]
     a60:	23e0      	movs	r3, #224	; 0xe0
     a62:	02db      	lsls	r3, r3, #11
     a64:	4313      	orrs	r3, r2
     a66:	606b      	str	r3, [r5, #4]
     a68:	e780      	b.n	96c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     a6a:	6963      	ldr	r3, [r4, #20]
     a6c:	0020      	movs	r0, r4
     a6e:	4798      	blx	r3
}
     a70:	e77f      	b.n	972 <_i2c_master_interrupt_handler+0xda>
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	200008f4 	.word	0x200008f4
     a78:	000007c9 	.word	0x000007c9
     a7c:	000007d5 	.word	0x000007d5
     a80:	0000085d 	.word	0x0000085d

00000a84 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a84:	b5f0      	push	{r4, r5, r6, r7, lr}
     a86:	46de      	mov	lr, fp
     a88:	4657      	mov	r7, sl
     a8a:	464e      	mov	r6, r9
     a8c:	4645      	mov	r5, r8
     a8e:	b5e0      	push	{r5, r6, r7, lr}
     a90:	b091      	sub	sp, #68	; 0x44
     a92:	0005      	movs	r5, r0
     a94:	000c      	movs	r4, r1
     a96:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     a98:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a9a:	0008      	movs	r0, r1
     a9c:	4bbc      	ldr	r3, [pc, #752]	; (d90 <usart_init+0x30c>)
     a9e:	4798      	blx	r3
     aa0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     aa2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     aa4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     aa6:	07db      	lsls	r3, r3, #31
     aa8:	d506      	bpl.n	ab8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     aaa:	b011      	add	sp, #68	; 0x44
     aac:	bc3c      	pop	{r2, r3, r4, r5}
     aae:	4690      	mov	r8, r2
     ab0:	4699      	mov	r9, r3
     ab2:	46a2      	mov	sl, r4
     ab4:	46ab      	mov	fp, r5
     ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ab8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     aba:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     abc:	079b      	lsls	r3, r3, #30
     abe:	d4f4      	bmi.n	aaa <usart_init+0x26>
     ac0:	49b4      	ldr	r1, [pc, #720]	; (d94 <usart_init+0x310>)
     ac2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     ac4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ac6:	2301      	movs	r3, #1
     ac8:	40bb      	lsls	r3, r7
     aca:	4303      	orrs	r3, r0
     acc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     ace:	a90f      	add	r1, sp, #60	; 0x3c
     ad0:	272d      	movs	r7, #45	; 0x2d
     ad2:	5df3      	ldrb	r3, [r6, r7]
     ad4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ad6:	320e      	adds	r2, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ad8:	b2d3      	uxtb	r3, r2
     ada:	9302      	str	r3, [sp, #8]
     adc:	0018      	movs	r0, r3
     ade:	4bae      	ldr	r3, [pc, #696]	; (d98 <usart_init+0x314>)
     ae0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ae2:	9802      	ldr	r0, [sp, #8]
     ae4:	4bad      	ldr	r3, [pc, #692]	; (d9c <usart_init+0x318>)
     ae6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ae8:	5df0      	ldrb	r0, [r6, r7]
     aea:	2100      	movs	r1, #0
     aec:	4bac      	ldr	r3, [pc, #688]	; (da0 <usart_init+0x31c>)
     aee:	4798      	blx	r3
	module->character_size = config->character_size;
     af0:	7af3      	ldrb	r3, [r6, #11]
     af2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     af4:	2324      	movs	r3, #36	; 0x24
     af6:	5cf3      	ldrb	r3, [r6, r3]
     af8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     afa:	2325      	movs	r3, #37	; 0x25
     afc:	5cf3      	ldrb	r3, [r6, r3]
     afe:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b00:	7ef3      	ldrb	r3, [r6, #27]
     b02:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b04:	7f33      	ldrb	r3, [r6, #28]
     b06:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b08:	682b      	ldr	r3, [r5, #0]
     b0a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b0c:	0018      	movs	r0, r3
     b0e:	4ba0      	ldr	r3, [pc, #640]	; (d90 <usart_init+0x30c>)
     b10:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b12:	300e      	adds	r0, #14
	uint16_t baud  = 0;
     b14:	2200      	movs	r2, #0
     b16:	230e      	movs	r3, #14
     b18:	a906      	add	r1, sp, #24
     b1a:	468c      	mov	ip, r1
     b1c:	4463      	add	r3, ip
     b1e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     b20:	8a32      	ldrh	r2, [r6, #16]
     b22:	9202      	str	r2, [sp, #8]
     b24:	2380      	movs	r3, #128	; 0x80
     b26:	01db      	lsls	r3, r3, #7
     b28:	429a      	cmp	r2, r3
     b2a:	d100      	bne.n	b2e <usart_init+0xaa>
     b2c:	e09e      	b.n	c6c <usart_init+0x1e8>
     b2e:	d90f      	bls.n	b50 <usart_init+0xcc>
     b30:	23c0      	movs	r3, #192	; 0xc0
     b32:	01db      	lsls	r3, r3, #7
     b34:	9a02      	ldr	r2, [sp, #8]
     b36:	429a      	cmp	r2, r3
     b38:	d100      	bne.n	b3c <usart_init+0xb8>
     b3a:	e092      	b.n	c62 <usart_init+0x1de>
     b3c:	2380      	movs	r3, #128	; 0x80
     b3e:	021b      	lsls	r3, r3, #8
     b40:	429a      	cmp	r2, r3
     b42:	d000      	beq.n	b46 <usart_init+0xc2>
     b44:	e11f      	b.n	d86 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b46:	2303      	movs	r3, #3
     b48:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b4a:	2300      	movs	r3, #0
     b4c:	9307      	str	r3, [sp, #28]
     b4e:	e008      	b.n	b62 <usart_init+0xde>
	switch (config->sample_rate) {
     b50:	2380      	movs	r3, #128	; 0x80
     b52:	019b      	lsls	r3, r3, #6
     b54:	429a      	cmp	r2, r3
     b56:	d000      	beq.n	b5a <usart_init+0xd6>
     b58:	e115      	b.n	d86 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b5a:	2310      	movs	r3, #16
     b5c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b5e:	3b0f      	subs	r3, #15
     b60:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     b62:	6833      	ldr	r3, [r6, #0]
     b64:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     b66:	68f3      	ldr	r3, [r6, #12]
     b68:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     b6a:	6973      	ldr	r3, [r6, #20]
     b6c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     b6e:	7e33      	ldrb	r3, [r6, #24]
     b70:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b72:	2326      	movs	r3, #38	; 0x26
     b74:	5cf3      	ldrb	r3, [r6, r3]
     b76:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     b78:	6873      	ldr	r3, [r6, #4]
     b7a:	4699      	mov	r9, r3
	switch (transfer_mode)
     b7c:	2b00      	cmp	r3, #0
     b7e:	d100      	bne.n	b82 <usart_init+0xfe>
     b80:	e0a0      	b.n	cc4 <usart_init+0x240>
     b82:	2380      	movs	r3, #128	; 0x80
     b84:	055b      	lsls	r3, r3, #21
     b86:	4599      	cmp	r9, r3
     b88:	d100      	bne.n	b8c <usart_init+0x108>
     b8a:	e084      	b.n	c96 <usart_init+0x212>
	if(config->encoding_format_enable) {
     b8c:	7e73      	ldrb	r3, [r6, #25]
     b8e:	2b00      	cmp	r3, #0
     b90:	d002      	beq.n	b98 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     b92:	7eb3      	ldrb	r3, [r6, #26]
     b94:	4642      	mov	r2, r8
     b96:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     b98:	682a      	ldr	r2, [r5, #0]
     b9a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b9c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b9e:	2b00      	cmp	r3, #0
     ba0:	d1fc      	bne.n	b9c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     ba2:	330e      	adds	r3, #14
     ba4:	aa06      	add	r2, sp, #24
     ba6:	4694      	mov	ip, r2
     ba8:	4463      	add	r3, ip
     baa:	881b      	ldrh	r3, [r3, #0]
     bac:	4642      	mov	r2, r8
     bae:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     bb0:	9b05      	ldr	r3, [sp, #20]
     bb2:	9a03      	ldr	r2, [sp, #12]
     bb4:	4313      	orrs	r3, r2
     bb6:	9a04      	ldr	r2, [sp, #16]
     bb8:	4313      	orrs	r3, r2
     bba:	464a      	mov	r2, r9
     bbc:	4313      	orrs	r3, r2
     bbe:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bc0:	465b      	mov	r3, fp
     bc2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     bc4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bc6:	4653      	mov	r3, sl
     bc8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     bca:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     bcc:	2327      	movs	r3, #39	; 0x27
     bce:	5cf3      	ldrb	r3, [r6, r3]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d101      	bne.n	bd8 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     bd4:	3304      	adds	r3, #4
     bd6:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     bd8:	7e73      	ldrb	r3, [r6, #25]
     bda:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     bdc:	7f32      	ldrb	r2, [r6, #28]
     bde:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     be0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     be2:	7f72      	ldrb	r2, [r6, #29]
     be4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     be6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     be8:	2224      	movs	r2, #36	; 0x24
     bea:	5cb2      	ldrb	r2, [r6, r2]
     bec:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     bee:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     bf0:	2225      	movs	r2, #37	; 0x25
     bf2:	5cb2      	ldrb	r2, [r6, r2]
     bf4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     bf6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     bf8:	7ab1      	ldrb	r1, [r6, #10]
     bfa:	7af2      	ldrb	r2, [r6, #11]
     bfc:	4311      	orrs	r1, r2
     bfe:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     c00:	8933      	ldrh	r3, [r6, #8]
     c02:	2bff      	cmp	r3, #255	; 0xff
     c04:	d100      	bne.n	c08 <usart_init+0x184>
     c06:	e081      	b.n	d0c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c08:	2280      	movs	r2, #128	; 0x80
     c0a:	0452      	lsls	r2, r2, #17
     c0c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     c0e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c10:	232c      	movs	r3, #44	; 0x2c
     c12:	5cf3      	ldrb	r3, [r6, r3]
     c14:	2b00      	cmp	r3, #0
     c16:	d103      	bne.n	c20 <usart_init+0x19c>
     c18:	4b62      	ldr	r3, [pc, #392]	; (da4 <usart_init+0x320>)
     c1a:	789b      	ldrb	r3, [r3, #2]
     c1c:	079b      	lsls	r3, r3, #30
     c1e:	d501      	bpl.n	c24 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c20:	2380      	movs	r3, #128	; 0x80
     c22:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     c24:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c26:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     c28:	2b00      	cmp	r3, #0
     c2a:	d1fc      	bne.n	c26 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     c2c:	4643      	mov	r3, r8
     c2e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c30:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c32:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     c34:	2b00      	cmp	r3, #0
     c36:	d1fc      	bne.n	c32 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     c38:	4643      	mov	r3, r8
     c3a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c3c:	ab0e      	add	r3, sp, #56	; 0x38
     c3e:	2280      	movs	r2, #128	; 0x80
     c40:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c42:	2200      	movs	r2, #0
     c44:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     c46:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c48:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     c4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
     c4c:	930a      	str	r3, [sp, #40]	; 0x28
     c4e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c50:	930b      	str	r3, [sp, #44]	; 0x2c
     c52:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     c54:	930c      	str	r3, [sp, #48]	; 0x30
     c56:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     c58:	9302      	str	r3, [sp, #8]
     c5a:	930d      	str	r3, [sp, #52]	; 0x34
     c5c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c5e:	ae0a      	add	r6, sp, #40	; 0x28
     c60:	e063      	b.n	d2a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c62:	2308      	movs	r3, #8
     c64:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c66:	3b07      	subs	r3, #7
     c68:	9307      	str	r3, [sp, #28]
     c6a:	e77a      	b.n	b62 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     c6c:	6833      	ldr	r3, [r6, #0]
     c6e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     c70:	68f3      	ldr	r3, [r6, #12]
     c72:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     c74:	6973      	ldr	r3, [r6, #20]
     c76:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c78:	7e33      	ldrb	r3, [r6, #24]
     c7a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c7c:	2326      	movs	r3, #38	; 0x26
     c7e:	5cf3      	ldrb	r3, [r6, r3]
     c80:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     c82:	6873      	ldr	r3, [r6, #4]
     c84:	4699      	mov	r9, r3
	switch (transfer_mode)
     c86:	2b00      	cmp	r3, #0
     c88:	d018      	beq.n	cbc <usart_init+0x238>
     c8a:	2380      	movs	r3, #128	; 0x80
     c8c:	055b      	lsls	r3, r3, #21
     c8e:	4599      	cmp	r9, r3
     c90:	d001      	beq.n	c96 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     c92:	2000      	movs	r0, #0
     c94:	e025      	b.n	ce2 <usart_init+0x25e>
			if (!config->use_external_clock) {
     c96:	2327      	movs	r3, #39	; 0x27
     c98:	5cf3      	ldrb	r3, [r6, r3]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d000      	beq.n	ca0 <usart_init+0x21c>
     c9e:	e775      	b.n	b8c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     ca0:	6a33      	ldr	r3, [r6, #32]
     ca2:	001f      	movs	r7, r3
     ca4:	b2c0      	uxtb	r0, r0
     ca6:	4b40      	ldr	r3, [pc, #256]	; (da8 <usart_init+0x324>)
     ca8:	4798      	blx	r3
     caa:	0001      	movs	r1, r0
     cac:	220e      	movs	r2, #14
     cae:	ab06      	add	r3, sp, #24
     cb0:	469c      	mov	ip, r3
     cb2:	4462      	add	r2, ip
     cb4:	0038      	movs	r0, r7
     cb6:	4b3d      	ldr	r3, [pc, #244]	; (dac <usart_init+0x328>)
     cb8:	4798      	blx	r3
     cba:	e012      	b.n	ce2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     cbc:	2308      	movs	r3, #8
     cbe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     cc0:	2300      	movs	r3, #0
     cc2:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     cc4:	2327      	movs	r3, #39	; 0x27
     cc6:	5cf3      	ldrb	r3, [r6, r3]
     cc8:	2b00      	cmp	r3, #0
     cca:	d00e      	beq.n	cea <usart_init+0x266>
				status_code =
     ccc:	9b06      	ldr	r3, [sp, #24]
     cce:	9300      	str	r3, [sp, #0]
     cd0:	9b07      	ldr	r3, [sp, #28]
     cd2:	220e      	movs	r2, #14
     cd4:	a906      	add	r1, sp, #24
     cd6:	468c      	mov	ip, r1
     cd8:	4462      	add	r2, ip
     cda:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     cdc:	6a30      	ldr	r0, [r6, #32]
     cde:	4f34      	ldr	r7, [pc, #208]	; (db0 <usart_init+0x32c>)
     ce0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     ce2:	2800      	cmp	r0, #0
     ce4:	d000      	beq.n	ce8 <usart_init+0x264>
     ce6:	e6e0      	b.n	aaa <usart_init+0x26>
     ce8:	e750      	b.n	b8c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     cea:	6a33      	ldr	r3, [r6, #32]
     cec:	001f      	movs	r7, r3
     cee:	b2c0      	uxtb	r0, r0
     cf0:	4b2d      	ldr	r3, [pc, #180]	; (da8 <usart_init+0x324>)
     cf2:	4798      	blx	r3
     cf4:	0001      	movs	r1, r0
				status_code =
     cf6:	9b06      	ldr	r3, [sp, #24]
     cf8:	9300      	str	r3, [sp, #0]
     cfa:	9b07      	ldr	r3, [sp, #28]
     cfc:	220e      	movs	r2, #14
     cfe:	a806      	add	r0, sp, #24
     d00:	4684      	mov	ip, r0
     d02:	4462      	add	r2, ip
     d04:	0038      	movs	r0, r7
     d06:	4f2a      	ldr	r7, [pc, #168]	; (db0 <usart_init+0x32c>)
     d08:	47b8      	blx	r7
     d0a:	e7ea      	b.n	ce2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     d0c:	7ef3      	ldrb	r3, [r6, #27]
     d0e:	2b00      	cmp	r3, #0
     d10:	d100      	bne.n	d14 <usart_init+0x290>
     d12:	e77d      	b.n	c10 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d14:	2380      	movs	r3, #128	; 0x80
     d16:	04db      	lsls	r3, r3, #19
     d18:	431f      	orrs	r7, r3
     d1a:	e779      	b.n	c10 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d1c:	0020      	movs	r0, r4
     d1e:	4b25      	ldr	r3, [pc, #148]	; (db4 <usart_init+0x330>)
     d20:	4798      	blx	r3
     d22:	e007      	b.n	d34 <usart_init+0x2b0>
     d24:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d26:	2f04      	cmp	r7, #4
     d28:	d00d      	beq.n	d46 <usart_init+0x2c2>
     d2a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d2c:	00bb      	lsls	r3, r7, #2
     d2e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     d30:	2800      	cmp	r0, #0
     d32:	d0f3      	beq.n	d1c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     d34:	1c43      	adds	r3, r0, #1
     d36:	d0f5      	beq.n	d24 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d38:	a90e      	add	r1, sp, #56	; 0x38
     d3a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d3c:	0c00      	lsrs	r0, r0, #16
     d3e:	b2c0      	uxtb	r0, r0
     d40:	4b1d      	ldr	r3, [pc, #116]	; (db8 <usart_init+0x334>)
     d42:	4798      	blx	r3
     d44:	e7ee      	b.n	d24 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     d46:	2300      	movs	r3, #0
     d48:	60eb      	str	r3, [r5, #12]
     d4a:	612b      	str	r3, [r5, #16]
     d4c:	616b      	str	r3, [r5, #20]
     d4e:	61ab      	str	r3, [r5, #24]
     d50:	61eb      	str	r3, [r5, #28]
     d52:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     d54:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     d56:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     d58:	2200      	movs	r2, #0
     d5a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     d5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     d5e:	3330      	adds	r3, #48	; 0x30
     d60:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     d62:	3301      	adds	r3, #1
     d64:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     d66:	3301      	adds	r3, #1
     d68:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     d6a:	3301      	adds	r3, #1
     d6c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     d6e:	6828      	ldr	r0, [r5, #0]
     d70:	4b07      	ldr	r3, [pc, #28]	; (d90 <usart_init+0x30c>)
     d72:	4798      	blx	r3
     d74:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     d76:	4911      	ldr	r1, [pc, #68]	; (dbc <usart_init+0x338>)
     d78:	4b11      	ldr	r3, [pc, #68]	; (dc0 <usart_init+0x33c>)
     d7a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     d7c:	00a4      	lsls	r4, r4, #2
     d7e:	4b11      	ldr	r3, [pc, #68]	; (dc4 <usart_init+0x340>)
     d80:	50e5      	str	r5, [r4, r3]
	return status_code;
     d82:	2000      	movs	r0, #0
     d84:	e691      	b.n	aaa <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     d86:	2310      	movs	r3, #16
     d88:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d8a:	2300      	movs	r3, #0
     d8c:	9307      	str	r3, [sp, #28]
     d8e:	e6e8      	b.n	b62 <usart_init+0xde>
     d90:	00001b25 	.word	0x00001b25
     d94:	40000400 	.word	0x40000400
     d98:	00002c81 	.word	0x00002c81
     d9c:	00002bf5 	.word	0x00002bf5
     da0:	00001a59 	.word	0x00001a59
     da4:	41002000 	.word	0x41002000
     da8:	00002c9d 	.word	0x00002c9d
     dac:	0000199b 	.word	0x0000199b
     db0:	000019c5 	.word	0x000019c5
     db4:	00001aa5 	.word	0x00001aa5
     db8:	00002d79 	.word	0x00002d79
     dbc:	00000eb5 	.word	0x00000eb5
     dc0:	00001b4d 	.word	0x00001b4d
     dc4:	200008f4 	.word	0x200008f4

00000dc8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     dc8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     dca:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     dcc:	2a00      	cmp	r2, #0
     dce:	d101      	bne.n	dd4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     dd0:	0018      	movs	r0, r3
     dd2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     dd4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     dd6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     dd8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     dda:	2a00      	cmp	r2, #0
     ddc:	d1f8      	bne.n	dd0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     dde:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     de0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     de2:	2a00      	cmp	r2, #0
     de4:	d1fc      	bne.n	de0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     de6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     de8:	2102      	movs	r1, #2
     dea:	7e1a      	ldrb	r2, [r3, #24]
     dec:	420a      	tst	r2, r1
     dee:	d0fc      	beq.n	dea <usart_write_wait+0x22>
	return STATUS_OK;
     df0:	2300      	movs	r3, #0
     df2:	e7ed      	b.n	dd0 <usart_write_wait+0x8>

00000df4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     df4:	b5f0      	push	{r4, r5, r6, r7, lr}
     df6:	46ce      	mov	lr, r9
     df8:	4647      	mov	r7, r8
     dfa:	b580      	push	{r7, lr}
     dfc:	b083      	sub	sp, #12
     dfe:	0005      	movs	r5, r0
     e00:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e02:	2017      	movs	r0, #23
	if (length == 0) {
     e04:	2a00      	cmp	r2, #0
     e06:	d104      	bne.n	e12 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     e08:	b003      	add	sp, #12
     e0a:	bc0c      	pop	{r2, r3}
     e0c:	4690      	mov	r8, r2
     e0e:	4699      	mov	r9, r3
     e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     e12:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     e14:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     e16:	2b00      	cmp	r3, #0
     e18:	d0f6      	beq.n	e08 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e1a:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e1c:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     e1e:	2b00      	cmp	r3, #0
     e20:	d1fc      	bne.n	e1c <usart_write_buffer_wait+0x28>
	while (length--) {
     e22:	3a01      	subs	r2, #1
     e24:	b293      	uxth	r3, r2
     e26:	4699      	mov	r9, r3
     e28:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e2a:	2701      	movs	r7, #1
	while (length--) {
     e2c:	4b1f      	ldr	r3, [pc, #124]	; (eac <usart_write_buffer_wait+0xb8>)
     e2e:	4698      	mov	r8, r3
     e30:	e011      	b.n	e56 <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
     e32:	1c73      	adds	r3, r6, #1
     e34:	b29b      	uxth	r3, r3
     e36:	9a01      	ldr	r2, [sp, #4]
     e38:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e3a:	796a      	ldrb	r2, [r5, #5]
     e3c:	2a01      	cmp	r2, #1
     e3e:	d017      	beq.n	e70 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
     e40:	b289      	uxth	r1, r1
     e42:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     e44:	0028      	movs	r0, r5
     e46:	4b1a      	ldr	r3, [pc, #104]	; (eb0 <usart_write_buffer_wait+0xbc>)
     e48:	4798      	blx	r3
	while (length--) {
     e4a:	464b      	mov	r3, r9
     e4c:	3b01      	subs	r3, #1
     e4e:	b29b      	uxth	r3, r3
     e50:	4699      	mov	r9, r3
     e52:	4543      	cmp	r3, r8
     e54:	d013      	beq.n	e7e <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     e56:	7e23      	ldrb	r3, [r4, #24]
     e58:	423b      	tst	r3, r7
     e5a:	d1ea      	bne.n	e32 <usart_write_buffer_wait+0x3e>
     e5c:	4b13      	ldr	r3, [pc, #76]	; (eac <usart_write_buffer_wait+0xb8>)
     e5e:	7e22      	ldrb	r2, [r4, #24]
     e60:	423a      	tst	r2, r7
     e62:	d1e6      	bne.n	e32 <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
     e64:	2b01      	cmp	r3, #1
     e66:	d019      	beq.n	e9c <usart_write_buffer_wait+0xa8>
     e68:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     e6a:	2b00      	cmp	r3, #0
     e6c:	d1f7      	bne.n	e5e <usart_write_buffer_wait+0x6a>
     e6e:	e7e0      	b.n	e32 <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     e70:	3602      	adds	r6, #2
     e72:	b2b6      	uxth	r6, r6
     e74:	9a01      	ldr	r2, [sp, #4]
     e76:	5cd3      	ldrb	r3, [r2, r3]
     e78:	021b      	lsls	r3, r3, #8
     e7a:	4319      	orrs	r1, r3
     e7c:	e7e2      	b.n	e44 <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     e7e:	7e23      	ldrb	r3, [r4, #24]
     e80:	079b      	lsls	r3, r3, #30
     e82:	d40d      	bmi.n	ea0 <usart_write_buffer_wait+0xac>
     e84:	4b09      	ldr	r3, [pc, #36]	; (eac <usart_write_buffer_wait+0xb8>)
     e86:	2102      	movs	r1, #2
     e88:	7e22      	ldrb	r2, [r4, #24]
     e8a:	420a      	tst	r2, r1
     e8c:	d10a      	bne.n	ea4 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
     e8e:	2b01      	cmp	r3, #1
     e90:	d00a      	beq.n	ea8 <usart_write_buffer_wait+0xb4>
     e92:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     e94:	2b00      	cmp	r3, #0
     e96:	d1f7      	bne.n	e88 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
     e98:	2000      	movs	r0, #0
     e9a:	e7b5      	b.n	e08 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     e9c:	2012      	movs	r0, #18
     e9e:	e7b3      	b.n	e08 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     ea0:	2000      	movs	r0, #0
     ea2:	e7b1      	b.n	e08 <usart_write_buffer_wait+0x14>
     ea4:	2000      	movs	r0, #0
     ea6:	e7af      	b.n	e08 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     ea8:	2012      	movs	r0, #18
     eaa:	e7ad      	b.n	e08 <usart_write_buffer_wait+0x14>
     eac:	0000ffff 	.word	0x0000ffff
     eb0:	00000dc9 	.word	0x00000dc9

00000eb4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     eb6:	0080      	lsls	r0, r0, #2
     eb8:	4b62      	ldr	r3, [pc, #392]	; (1044 <_usart_interrupt_handler+0x190>)
     eba:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     ebc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     ebe:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     ec0:	2b00      	cmp	r3, #0
     ec2:	d1fc      	bne.n	ebe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     ec4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     ec6:	7da6      	ldrb	r6, [r4, #22]
     ec8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     eca:	2330      	movs	r3, #48	; 0x30
     ecc:	5ceb      	ldrb	r3, [r5, r3]
     ece:	2231      	movs	r2, #49	; 0x31
     ed0:	5caf      	ldrb	r7, [r5, r2]
     ed2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ed4:	07f3      	lsls	r3, r6, #31
     ed6:	d522      	bpl.n	f1e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     ed8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     eda:	b29b      	uxth	r3, r3
     edc:	2b00      	cmp	r3, #0
     ede:	d01c      	beq.n	f1a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ee0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     ee2:	7813      	ldrb	r3, [r2, #0]
     ee4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     ee6:	1c51      	adds	r1, r2, #1
     ee8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     eea:	7969      	ldrb	r1, [r5, #5]
     eec:	2901      	cmp	r1, #1
     eee:	d00e      	beq.n	f0e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ef0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     ef2:	05db      	lsls	r3, r3, #23
     ef4:	0ddb      	lsrs	r3, r3, #23
     ef6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     ef8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     efa:	3b01      	subs	r3, #1
     efc:	b29b      	uxth	r3, r3
     efe:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f00:	2b00      	cmp	r3, #0
     f02:	d10c      	bne.n	f1e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f04:	3301      	adds	r3, #1
     f06:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f08:	3301      	adds	r3, #1
     f0a:	75a3      	strb	r3, [r4, #22]
     f0c:	e007      	b.n	f1e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f0e:	7851      	ldrb	r1, [r2, #1]
     f10:	0209      	lsls	r1, r1, #8
     f12:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     f14:	3202      	adds	r2, #2
     f16:	62aa      	str	r2, [r5, #40]	; 0x28
     f18:	e7eb      	b.n	ef2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f1a:	2301      	movs	r3, #1
     f1c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f1e:	07b3      	lsls	r3, r6, #30
     f20:	d506      	bpl.n	f30 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f22:	2302      	movs	r3, #2
     f24:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f26:	2200      	movs	r2, #0
     f28:	3331      	adds	r3, #49	; 0x31
     f2a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f2c:	07fb      	lsls	r3, r7, #31
     f2e:	d41a      	bmi.n	f66 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f30:	0773      	lsls	r3, r6, #29
     f32:	d565      	bpl.n	1000 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     f34:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f36:	b29b      	uxth	r3, r3
     f38:	2b00      	cmp	r3, #0
     f3a:	d05f      	beq.n	ffc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f3c:	8b63      	ldrh	r3, [r4, #26]
     f3e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     f40:	071a      	lsls	r2, r3, #28
     f42:	d414      	bmi.n	f6e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f44:	223f      	movs	r2, #63	; 0x3f
     f46:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     f48:	2b00      	cmp	r3, #0
     f4a:	d034      	beq.n	fb6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     f4c:	079a      	lsls	r2, r3, #30
     f4e:	d511      	bpl.n	f74 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     f50:	221a      	movs	r2, #26
     f52:	2332      	movs	r3, #50	; 0x32
     f54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f56:	3b30      	subs	r3, #48	; 0x30
     f58:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     f5a:	077b      	lsls	r3, r7, #29
     f5c:	d550      	bpl.n	1000 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     f5e:	0028      	movs	r0, r5
     f60:	696b      	ldr	r3, [r5, #20]
     f62:	4798      	blx	r3
     f64:	e04c      	b.n	1000 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     f66:	0028      	movs	r0, r5
     f68:	68eb      	ldr	r3, [r5, #12]
     f6a:	4798      	blx	r3
     f6c:	e7e0      	b.n	f30 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     f6e:	2237      	movs	r2, #55	; 0x37
     f70:	4013      	ands	r3, r2
     f72:	e7e9      	b.n	f48 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f74:	075a      	lsls	r2, r3, #29
     f76:	d505      	bpl.n	f84 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     f78:	221e      	movs	r2, #30
     f7a:	2332      	movs	r3, #50	; 0x32
     f7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f7e:	3b2e      	subs	r3, #46	; 0x2e
     f80:	8363      	strh	r3, [r4, #26]
     f82:	e7ea      	b.n	f5a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f84:	07da      	lsls	r2, r3, #31
     f86:	d505      	bpl.n	f94 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     f88:	2213      	movs	r2, #19
     f8a:	2332      	movs	r3, #50	; 0x32
     f8c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f8e:	3b31      	subs	r3, #49	; 0x31
     f90:	8363      	strh	r3, [r4, #26]
     f92:	e7e2      	b.n	f5a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     f94:	06da      	lsls	r2, r3, #27
     f96:	d505      	bpl.n	fa4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     f98:	2242      	movs	r2, #66	; 0x42
     f9a:	2332      	movs	r3, #50	; 0x32
     f9c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     f9e:	3b22      	subs	r3, #34	; 0x22
     fa0:	8363      	strh	r3, [r4, #26]
     fa2:	e7da      	b.n	f5a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     fa4:	2220      	movs	r2, #32
     fa6:	421a      	tst	r2, r3
     fa8:	d0d7      	beq.n	f5a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     faa:	3221      	adds	r2, #33	; 0x21
     fac:	2332      	movs	r3, #50	; 0x32
     fae:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     fb0:	3b12      	subs	r3, #18
     fb2:	8363      	strh	r3, [r4, #26]
     fb4:	e7d1      	b.n	f5a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     fb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     fb8:	05db      	lsls	r3, r3, #23
     fba:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     fbc:	b2da      	uxtb	r2, r3
     fbe:	6a69      	ldr	r1, [r5, #36]	; 0x24
     fc0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     fc2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     fc4:	1c51      	adds	r1, r2, #1
     fc6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fc8:	7969      	ldrb	r1, [r5, #5]
     fca:	2901      	cmp	r1, #1
     fcc:	d010      	beq.n	ff0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     fce:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     fd0:	3b01      	subs	r3, #1
     fd2:	b29b      	uxth	r3, r3
     fd4:	85ab      	strh	r3, [r5, #44]	; 0x2c
     fd6:	2b00      	cmp	r3, #0
     fd8:	d112      	bne.n	1000 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     fda:	3304      	adds	r3, #4
     fdc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     fde:	2200      	movs	r2, #0
     fe0:	332e      	adds	r3, #46	; 0x2e
     fe2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     fe4:	07bb      	lsls	r3, r7, #30
     fe6:	d50b      	bpl.n	1000 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     fe8:	0028      	movs	r0, r5
     fea:	692b      	ldr	r3, [r5, #16]
     fec:	4798      	blx	r3
     fee:	e007      	b.n	1000 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ff0:	0a1b      	lsrs	r3, r3, #8
     ff2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     ff4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     ff6:	3301      	adds	r3, #1
     ff8:	626b      	str	r3, [r5, #36]	; 0x24
     ffa:	e7e8      	b.n	fce <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ffc:	2304      	movs	r3, #4
     ffe:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1000:	06f3      	lsls	r3, r6, #27
    1002:	d504      	bpl.n	100e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1004:	2310      	movs	r3, #16
    1006:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1008:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    100a:	06fb      	lsls	r3, r7, #27
    100c:	d40e      	bmi.n	102c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    100e:	06b3      	lsls	r3, r6, #26
    1010:	d504      	bpl.n	101c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1012:	2320      	movs	r3, #32
    1014:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1016:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1018:	073b      	lsls	r3, r7, #28
    101a:	d40b      	bmi.n	1034 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    101c:	0733      	lsls	r3, r6, #28
    101e:	d504      	bpl.n	102a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1020:	2308      	movs	r3, #8
    1022:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1024:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1026:	06bb      	lsls	r3, r7, #26
    1028:	d408      	bmi.n	103c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    102a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    102c:	0028      	movs	r0, r5
    102e:	69eb      	ldr	r3, [r5, #28]
    1030:	4798      	blx	r3
    1032:	e7ec      	b.n	100e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1034:	0028      	movs	r0, r5
    1036:	69ab      	ldr	r3, [r5, #24]
    1038:	4798      	blx	r3
    103a:	e7ef      	b.n	101c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    103c:	6a2b      	ldr	r3, [r5, #32]
    103e:	0028      	movs	r0, r5
    1040:	4798      	blx	r3
}
    1042:	e7f2      	b.n	102a <_usart_interrupt_handler+0x176>
    1044:	200008f4 	.word	0x200008f4

00001048 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1048:	2000      	movs	r0, #0
    104a:	4770      	bx	lr

0000104c <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    104c:	b530      	push	{r4, r5, lr}
    104e:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1050:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1052:	2903      	cmp	r1, #3
    1054:	d900      	bls.n	1058 <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1056:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
    1058:	4d11      	ldr	r5, [pc, #68]	; (10a0 <_tcc_set_compare_value+0x54>)
    105a:	42aa      	cmp	r2, r5
    105c:	d8fb      	bhi.n	1056 <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
    105e:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
    1060:	2b00      	cmp	r3, #0
    1062:	d010      	beq.n	1086 <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
    1064:	2480      	movs	r4, #128	; 0x80
    1066:	0264      	lsls	r4, r4, #9
    1068:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
    106a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    106c:	421c      	tst	r4, r3
    106e:	d1fc      	bne.n	106a <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1070:	2480      	movs	r4, #128	; 0x80
    1072:	0324      	lsls	r4, r4, #12
    1074:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
    1076:	6883      	ldr	r3, [r0, #8]
    1078:	421c      	tst	r4, r3
    107a:	d1fc      	bne.n	1076 <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
    107c:	311c      	adds	r1, #28
    107e:	0089      	lsls	r1, r1, #2
    1080:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
    1082:	2000      	movs	r0, #0
    1084:	e7e7      	b.n	1056 <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1086:	2480      	movs	r4, #128	; 0x80
    1088:	0064      	lsls	r4, r4, #1
    108a:	408c      	lsls	r4, r1
    108c:	6883      	ldr	r3, [r0, #8]
    108e:	421c      	tst	r4, r3
    1090:	d1fc      	bne.n	108c <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
    1092:	3110      	adds	r1, #16
    1094:	0089      	lsls	r1, r1, #2
    1096:	1841      	adds	r1, r0, r1
    1098:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    109a:	2000      	movs	r0, #0
    109c:	e7db      	b.n	1056 <_tcc_set_compare_value+0xa>
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	00ffffff 	.word	0x00ffffff

000010a4 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    10a4:	2300      	movs	r3, #0
    10a6:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    10a8:	4a4c      	ldr	r2, [pc, #304]	; (11dc <tcc_get_config_defaults+0x138>)
    10aa:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    10ac:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    10ae:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    10b0:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    10b2:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    10b4:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    10b6:	61c3      	str	r3, [r0, #28]
    10b8:	6203      	str	r3, [r0, #32]
    10ba:	6243      	str	r3, [r0, #36]	; 0x24
    10bc:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    10be:	7503      	strb	r3, [r0, #20]
    10c0:	7543      	strb	r3, [r0, #21]
    10c2:	7583      	strb	r3, [r0, #22]
    10c4:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    10c6:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    10c8:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    10ca:	7403      	strb	r3, [r0, #16]
    10cc:	7443      	strb	r3, [r0, #17]
    10ce:	7483      	strb	r3, [r0, #18]
    10d0:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    10d2:	222c      	movs	r2, #44	; 0x2c
    10d4:	5483      	strb	r3, [r0, r2]
    10d6:	3201      	adds	r2, #1
    10d8:	5483      	strb	r3, [r0, r2]
    10da:	3201      	adds	r2, #1
    10dc:	5483      	strb	r3, [r0, r2]
    10de:	3201      	adds	r2, #1
    10e0:	5483      	strb	r3, [r0, r2]
    10e2:	3201      	adds	r2, #1
    10e4:	5483      	strb	r3, [r0, r2]
    10e6:	3201      	adds	r2, #1
    10e8:	5483      	strb	r3, [r0, r2]
    10ea:	3201      	adds	r2, #1
    10ec:	5483      	strb	r3, [r0, r2]
    10ee:	3201      	adds	r2, #1
    10f0:	5483      	strb	r3, [r0, r2]
    10f2:	3201      	adds	r2, #1
    10f4:	5483      	strb	r3, [r0, r2]
    10f6:	3201      	adds	r2, #1
    10f8:	5483      	strb	r3, [r0, r2]
    10fa:	3201      	adds	r2, #1
    10fc:	5483      	strb	r3, [r0, r2]
    10fe:	3201      	adds	r2, #1
    1100:	5483      	strb	r3, [r0, r2]
    1102:	3201      	adds	r2, #1
    1104:	5483      	strb	r3, [r0, r2]
    1106:	3201      	adds	r2, #1
    1108:	5483      	strb	r3, [r0, r2]
    110a:	3201      	adds	r2, #1
    110c:	5483      	strb	r3, [r0, r2]
    110e:	3201      	adds	r2, #1
    1110:	5483      	strb	r3, [r0, r2]
    1112:	3201      	adds	r2, #1
    1114:	5483      	strb	r3, [r0, r2]
    1116:	3201      	adds	r2, #1
    1118:	5483      	strb	r3, [r0, r2]
    111a:	3201      	adds	r2, #1
    111c:	5483      	strb	r3, [r0, r2]
    111e:	3201      	adds	r2, #1
    1120:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1122:	3201      	adds	r2, #1
    1124:	5483      	strb	r3, [r0, r2]
    1126:	3201      	adds	r2, #1
    1128:	5483      	strb	r3, [r0, r2]
    112a:	3201      	adds	r2, #1
    112c:	5483      	strb	r3, [r0, r2]
    112e:	3201      	adds	r2, #1
    1130:	5483      	strb	r3, [r0, r2]
    1132:	3201      	adds	r2, #1
    1134:	5483      	strb	r3, [r0, r2]
    1136:	3201      	adds	r2, #1
    1138:	5483      	strb	r3, [r0, r2]
    113a:	3201      	adds	r2, #1
    113c:	5483      	strb	r3, [r0, r2]
    113e:	3201      	adds	r2, #1
    1140:	5483      	strb	r3, [r0, r2]
    1142:	3201      	adds	r2, #1
    1144:	5483      	strb	r3, [r0, r2]
    1146:	3201      	adds	r2, #1
    1148:	5483      	strb	r3, [r0, r2]
    114a:	3201      	adds	r2, #1
    114c:	5483      	strb	r3, [r0, r2]
    114e:	3201      	adds	r2, #1
    1150:	5483      	strb	r3, [r0, r2]
    1152:	3201      	adds	r2, #1
    1154:	5483      	strb	r3, [r0, r2]
    1156:	3201      	adds	r2, #1
    1158:	5483      	strb	r3, [r0, r2]
    115a:	3201      	adds	r2, #1
    115c:	5483      	strb	r3, [r0, r2]
    115e:	3201      	adds	r2, #1
    1160:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1162:	3201      	adds	r2, #1
    1164:	5483      	strb	r3, [r0, r2]
    1166:	3201      	adds	r2, #1
    1168:	5483      	strb	r3, [r0, r2]
    116a:	3201      	adds	r2, #1
    116c:	5483      	strb	r3, [r0, r2]
    116e:	3201      	adds	r2, #1
    1170:	5483      	strb	r3, [r0, r2]
    1172:	3201      	adds	r2, #1
    1174:	5483      	strb	r3, [r0, r2]
    1176:	3201      	adds	r2, #1
    1178:	5483      	strb	r3, [r0, r2]
    117a:	3201      	adds	r2, #1
    117c:	5483      	strb	r3, [r0, r2]
    117e:	3201      	adds	r2, #1
    1180:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1182:	3241      	adds	r2, #65	; 0x41
    1184:	5483      	strb	r3, [r0, r2]
    1186:	6583      	str	r3, [r0, #88]	; 0x58
    1188:	6783      	str	r3, [r0, #120]	; 0x78
    118a:	3201      	adds	r2, #1
    118c:	5483      	strb	r3, [r0, r2]
    118e:	65c3      	str	r3, [r0, #92]	; 0x5c
    1190:	67c3      	str	r3, [r0, #124]	; 0x7c
    1192:	3201      	adds	r2, #1
    1194:	5483      	strb	r3, [r0, r2]
    1196:	6603      	str	r3, [r0, #96]	; 0x60
    1198:	3a1a      	subs	r2, #26
    119a:	5083      	str	r3, [r0, r2]
    119c:	321b      	adds	r2, #27
    119e:	5483      	strb	r3, [r0, r2]
    11a0:	6643      	str	r3, [r0, #100]	; 0x64
    11a2:	3a17      	subs	r2, #23
    11a4:	5083      	str	r3, [r0, r2]
    11a6:	3218      	adds	r2, #24
    11a8:	5483      	strb	r3, [r0, r2]
    11aa:	6683      	str	r3, [r0, #104]	; 0x68
    11ac:	3a14      	subs	r2, #20
    11ae:	5083      	str	r3, [r0, r2]
    11b0:	3215      	adds	r2, #21
    11b2:	5483      	strb	r3, [r0, r2]
    11b4:	66c3      	str	r3, [r0, #108]	; 0x6c
    11b6:	3a11      	subs	r2, #17
    11b8:	5083      	str	r3, [r0, r2]
    11ba:	3212      	adds	r2, #18
    11bc:	5483      	strb	r3, [r0, r2]
    11be:	6703      	str	r3, [r0, #112]	; 0x70
    11c0:	3a0e      	subs	r2, #14
    11c2:	5083      	str	r3, [r0, r2]
    11c4:	320f      	adds	r2, #15
    11c6:	5483      	strb	r3, [r0, r2]
    11c8:	6743      	str	r3, [r0, #116]	; 0x74
    11ca:	3a0b      	subs	r2, #11
    11cc:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    11ce:	2101      	movs	r1, #1
    11d0:	320c      	adds	r2, #12
    11d2:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    11d4:	3201      	adds	r2, #1
    11d6:	5483      	strb	r3, [r0, r2]
}
    11d8:	4770      	bx	lr
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00ffffff 	.word	0x00ffffff

000011e0 <tcc_init>:
{
    11e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e2:	46de      	mov	lr, fp
    11e4:	4657      	mov	r7, sl
    11e6:	464e      	mov	r6, r9
    11e8:	4645      	mov	r5, r8
    11ea:	b5e0      	push	{r5, r6, r7, lr}
    11ec:	b08d      	sub	sp, #52	; 0x34
    11ee:	0006      	movs	r6, r0
    11f0:	000c      	movs	r4, r1
    11f2:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    11f4:	0008      	movs	r0, r1
    11f6:	4bcd      	ldr	r3, [pc, #820]	; (152c <tcc_init+0x34c>)
    11f8:	4798      	blx	r3
    11fa:	0003      	movs	r3, r0
    11fc:	49cc      	ldr	r1, [pc, #816]	; (1530 <tcc_init+0x350>)
    11fe:	6a0a      	ldr	r2, [r1, #32]
    1200:	2020      	movs	r0, #32
    1202:	4302      	orrs	r2, r0
    1204:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1206:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1208:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    120a:	0792      	lsls	r2, r2, #30
    120c:	d506      	bpl.n	121c <tcc_init+0x3c>
}
    120e:	b00d      	add	sp, #52	; 0x34
    1210:	bc3c      	pop	{r2, r3, r4, r5}
    1212:	4690      	mov	r8, r2
    1214:	4699      	mov	r9, r3
    1216:	46a2      	mov	sl, r4
    1218:	46ab      	mov	fp, r5
    121a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    121c:	6822      	ldr	r2, [r4, #0]
    121e:	2701      	movs	r7, #1
    1220:	4017      	ands	r7, r2
    1222:	d1f4      	bne.n	120e <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    1224:	4ac3      	ldr	r2, [pc, #780]	; (1534 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    1226:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    1228:	6829      	ldr	r1, [r5, #0]
    122a:	4291      	cmp	r1, r2
    122c:	d8ef      	bhi.n	120e <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    122e:	6869      	ldr	r1, [r5, #4]
    1230:	4291      	cmp	r1, r2
    1232:	d8ec      	bhi.n	120e <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    1234:	69e9      	ldr	r1, [r5, #28]
    1236:	4291      	cmp	r1, r2
    1238:	d900      	bls.n	123c <tcc_init+0x5c>
    123a:	e18b      	b.n	1554 <tcc_init+0x374>
    123c:	6a29      	ldr	r1, [r5, #32]
    123e:	4291      	cmp	r1, r2
    1240:	d900      	bls.n	1244 <tcc_init+0x64>
    1242:	e189      	b.n	1558 <tcc_init+0x378>
    1244:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1246:	4291      	cmp	r1, r2
    1248:	d900      	bls.n	124c <tcc_init+0x6c>
    124a:	e187      	b.n	155c <tcc_init+0x37c>
    124c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    124e:	4291      	cmp	r1, r2
    1250:	d900      	bls.n	1254 <tcc_init+0x74>
    1252:	e185      	b.n	1560 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
    1254:	7c2a      	ldrb	r2, [r5, #16]
    1256:	3a01      	subs	r2, #1
    1258:	4250      	negs	r0, r2
    125a:	4150      	adcs	r0, r2
    125c:	0602      	lsls	r2, r0, #24
    125e:	9201      	str	r2, [sp, #4]
    1260:	7c6a      	ldrb	r2, [r5, #17]
    1262:	2a01      	cmp	r2, #1
    1264:	d031      	beq.n	12ca <tcc_init+0xea>
    1266:	7caa      	ldrb	r2, [r5, #18]
    1268:	2a01      	cmp	r2, #1
    126a:	d034      	beq.n	12d6 <tcc_init+0xf6>
    126c:	7cea      	ldrb	r2, [r5, #19]
    126e:	2a01      	cmp	r2, #1
    1270:	d037      	beq.n	12e2 <tcc_init+0x102>
	if (config->run_in_standby) {
    1272:	22a1      	movs	r2, #161	; 0xa1
    1274:	5caa      	ldrb	r2, [r5, r2]
    1276:	2a00      	cmp	r2, #0
    1278:	d004      	beq.n	1284 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    127a:	2280      	movs	r2, #128	; 0x80
    127c:	0112      	lsls	r2, r2, #4
    127e:	9901      	ldr	r1, [sp, #4]
    1280:	4311      	orrs	r1, r2
    1282:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    1284:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1286:	1e51      	subs	r1, r2, #1
    1288:	418a      	sbcs	r2, r1
    128a:	0092      	lsls	r2, r2, #2
    128c:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    128e:	7a6a      	ldrb	r2, [r5, #9]
    1290:	2a01      	cmp	r2, #1
    1292:	d02c      	beq.n	12ee <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    1294:	2235      	movs	r2, #53	; 0x35
    1296:	5caa      	ldrb	r2, [r5, r2]
    1298:	2a03      	cmp	r2, #3
    129a:	d900      	bls.n	129e <tcc_init+0xbe>
    129c:	e162      	b.n	1564 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    129e:	212c      	movs	r1, #44	; 0x2c
    12a0:	5c69      	ldrb	r1, [r5, r1]
    12a2:	290f      	cmp	r1, #15
    12a4:	d900      	bls.n	12a8 <tcc_init+0xc8>
    12a6:	e15d      	b.n	1564 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    12a8:	7b28      	ldrb	r0, [r5, #12]
    12aa:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    12ac:	7ae8      	ldrb	r0, [r5, #11]
    12ae:	9005      	str	r0, [sp, #20]
    12b0:	202d      	movs	r0, #45	; 0x2d
    12b2:	4682      	mov	sl, r0
    12b4:	44aa      	add	sl, r5
    12b6:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    12b8:	9702      	str	r7, [sp, #8]
    12ba:	4684      	mov	ip, r0
    12bc:	9606      	str	r6, [sp, #24]
    12be:	000e      	movs	r6, r1
    12c0:	46a0      	mov	r8, r4
    12c2:	4654      	mov	r4, sl
    12c4:	46a9      	mov	r9, r5
    12c6:	9307      	str	r3, [sp, #28]
    12c8:	e047      	b.n	135a <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    12ca:	2280      	movs	r2, #128	; 0x80
    12cc:	0492      	lsls	r2, r2, #18
    12ce:	9901      	ldr	r1, [sp, #4]
    12d0:	4311      	orrs	r1, r2
    12d2:	9101      	str	r1, [sp, #4]
    12d4:	e7c7      	b.n	1266 <tcc_init+0x86>
    12d6:	2280      	movs	r2, #128	; 0x80
    12d8:	04d2      	lsls	r2, r2, #19
    12da:	9901      	ldr	r1, [sp, #4]
    12dc:	4311      	orrs	r1, r2
    12de:	9101      	str	r1, [sp, #4]
    12e0:	e7c4      	b.n	126c <tcc_init+0x8c>
    12e2:	2280      	movs	r2, #128	; 0x80
    12e4:	0512      	lsls	r2, r2, #20
    12e6:	9901      	ldr	r1, [sp, #4]
    12e8:	4311      	orrs	r1, r2
    12ea:	9101      	str	r1, [sp, #4]
    12ec:	e7c1      	b.n	1272 <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    12ee:	9903      	ldr	r1, [sp, #12]
    12f0:	4311      	orrs	r1, r2
    12f2:	9103      	str	r1, [sp, #12]
    12f4:	e7ce      	b.n	1294 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    12f6:	0292      	lsls	r2, r2, #10
    12f8:	25c0      	movs	r5, #192	; 0xc0
    12fa:	012d      	lsls	r5, r5, #4
    12fc:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    12fe:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    1300:	790d      	ldrb	r5, [r1, #4]
    1302:	2603      	movs	r6, #3
    1304:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1306:	4332      	orrs	r2, r6
    1308:	4655      	mov	r5, sl
    130a:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    130c:	794e      	ldrb	r6, [r1, #5]
    130e:	0176      	lsls	r6, r6, #5
    1310:	2560      	movs	r5, #96	; 0x60
    1312:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1314:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1316:	798d      	ldrb	r5, [r1, #6]
    1318:	022d      	lsls	r5, r5, #8
    131a:	26c0      	movs	r6, #192	; 0xc0
    131c:	00b6      	lsls	r6, r6, #2
    131e:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1320:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1322:	79cd      	ldrb	r5, [r1, #7]
    1324:	032d      	lsls	r5, r5, #12
    1326:	26e0      	movs	r6, #224	; 0xe0
    1328:	01f6      	lsls	r6, r6, #7
    132a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    132c:	432a      	orrs	r2, r5
    132e:	4310      	orrs	r0, r2
    1330:	4303      	orrs	r3, r0
    1332:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    1334:	ab08      	add	r3, sp, #32
    1336:	4662      	mov	r2, ip
    1338:	2008      	movs	r0, #8
    133a:	181b      	adds	r3, r3, r0
    133c:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    133e:	2a04      	cmp	r2, #4
    1340:	d028      	beq.n	1394 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    1342:	7c8a      	ldrb	r2, [r1, #18]
    1344:	2a03      	cmp	r2, #3
    1346:	d900      	bls.n	134a <tcc_init+0x16a>
    1348:	e10c      	b.n	1564 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
    134a:	7a4e      	ldrb	r6, [r1, #9]
    134c:	340a      	adds	r4, #10
    134e:	2304      	movs	r3, #4
    1350:	469a      	mov	sl, r3
    1352:	44d4      	add	ip, sl
    1354:	2e0f      	cmp	r6, #15
    1356:	d900      	bls.n	135a <tcc_init+0x17a>
    1358:	e104      	b.n	1564 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    135a:	0636      	lsls	r6, r6, #24
    135c:	23f0      	movs	r3, #240	; 0xf0
    135e:	051b      	lsls	r3, r3, #20
    1360:	401e      	ands	r6, r3
    1362:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1364:	7825      	ldrb	r5, [r4, #0]
    1366:	042d      	lsls	r5, r5, #16
    1368:	23ff      	movs	r3, #255	; 0xff
    136a:	041b      	lsls	r3, r3, #16
    136c:	401d      	ands	r5, r3
    136e:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1370:	7863      	ldrb	r3, [r4, #1]
    1372:	2080      	movs	r0, #128	; 0x80
    1374:	2b00      	cmp	r3, #0
    1376:	d100      	bne.n	137a <tcc_init+0x19a>
    1378:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    137a:	788f      	ldrb	r7, [r1, #2]
    137c:	2308      	movs	r3, #8
    137e:	2f00      	cmp	r7, #0
    1380:	d100      	bne.n	1384 <tcc_init+0x1a4>
    1382:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1384:	78cf      	ldrb	r7, [r1, #3]
    1386:	46bb      	mov	fp, r7
    1388:	2710      	movs	r7, #16
    138a:	465d      	mov	r5, fp
    138c:	2d00      	cmp	r5, #0
    138e:	d1b2      	bne.n	12f6 <tcc_init+0x116>
    1390:	9f02      	ldr	r7, [sp, #8]
    1392:	e7b0      	b.n	12f6 <tcc_init+0x116>
    1394:	9e06      	ldr	r6, [sp, #24]
    1396:	4644      	mov	r4, r8
    1398:	464d      	mov	r5, r9
    139a:	9b07      	ldr	r3, [sp, #28]
    139c:	4648      	mov	r0, r9
    139e:	3050      	adds	r0, #80	; 0x50
    13a0:	4649      	mov	r1, r9
    13a2:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    13a4:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13a6:	2780      	movs	r7, #128	; 0x80
    13a8:	027f      	lsls	r7, r7, #9
    13aa:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    13ac:	2701      	movs	r7, #1
    13ae:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    13b0:	2702      	movs	r7, #2
    13b2:	37ff      	adds	r7, #255	; 0xff
    13b4:	46ba      	mov	sl, r7
    13b6:	001f      	movs	r7, r3
    13b8:	0013      	movs	r3, r2
    13ba:	46a0      	mov	r8, r4
    13bc:	003c      	movs	r4, r7
    13be:	e007      	b.n	13d0 <tcc_init+0x1f0>
    13c0:	4657      	mov	r7, sl
    13c2:	4097      	lsls	r7, r2
    13c4:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    13c6:	3201      	adds	r2, #1
    13c8:	3001      	adds	r0, #1
    13ca:	3102      	adds	r1, #2
    13cc:	2a08      	cmp	r2, #8
    13ce:	d00e      	beq.n	13ee <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    13d0:	7807      	ldrb	r7, [r0, #0]
    13d2:	2f00      	cmp	r7, #0
    13d4:	d002      	beq.n	13dc <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    13d6:	4667      	mov	r7, ip
    13d8:	4097      	lsls	r7, r2
    13da:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    13dc:	780f      	ldrb	r7, [r1, #0]
    13de:	2f00      	cmp	r7, #0
    13e0:	d0f1      	beq.n	13c6 <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    13e2:	2f02      	cmp	r7, #2
    13e4:	d0ec      	beq.n	13c0 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    13e6:	464f      	mov	r7, r9
    13e8:	4097      	lsls	r7, r2
    13ea:	433b      	orrs	r3, r7
    13ec:	e7eb      	b.n	13c6 <tcc_init+0x1e6>
    13ee:	0022      	movs	r2, r4
    13f0:	4644      	mov	r4, r8
    13f2:	4698      	mov	r8, r3
    13f4:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    13f6:	7e6a      	ldrb	r2, [r5, #25]
    13f8:	0112      	lsls	r2, r2, #4
    13fa:	2130      	movs	r1, #48	; 0x30
    13fc:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    13fe:	7e28      	ldrb	r0, [r5, #24]
    1400:	2207      	movs	r2, #7
    1402:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1404:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1406:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    1408:	2080      	movs	r0, #128	; 0x80
    140a:	0240      	lsls	r0, r0, #9
    140c:	000f      	movs	r7, r1
    140e:	e002      	b.n	1416 <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1410:	3201      	adds	r2, #1
    1412:	2a04      	cmp	r2, #4
    1414:	d007      	beq.n	1426 <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    1416:	18a9      	adds	r1, r5, r2
    1418:	7d09      	ldrb	r1, [r1, #20]
    141a:	2900      	cmp	r1, #0
    141c:	d0f8      	beq.n	1410 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    141e:	0001      	movs	r1, r0
    1420:	4091      	lsls	r1, r2
    1422:	430f      	orrs	r7, r1
    1424:	e7f4      	b.n	1410 <tcc_init+0x230>
    1426:	46b9      	mov	r9, r7
    1428:	1d32      	adds	r2, r6, #4
    142a:	0030      	movs	r0, r6
    142c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    142e:	2100      	movs	r1, #0
    1430:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1432:	4290      	cmp	r0, r2
    1434:	d1fc      	bne.n	1430 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    1436:	2200      	movs	r2, #0
    1438:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    143a:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    143c:	009b      	lsls	r3, r3, #2
    143e:	4a3e      	ldr	r2, [pc, #248]	; (1538 <tcc_init+0x358>)
    1440:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    1442:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1444:	23a0      	movs	r3, #160	; 0xa0
    1446:	5cea      	ldrb	r2, [r5, r3]
    1448:	3b64      	subs	r3, #100	; 0x64
    144a:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    144c:	a909      	add	r1, sp, #36	; 0x24
    144e:	7aab      	ldrb	r3, [r5, #10]
    1450:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1452:	2011      	movs	r0, #17
    1454:	4b39      	ldr	r3, [pc, #228]	; (153c <tcc_init+0x35c>)
    1456:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1458:	2011      	movs	r0, #17
    145a:	4b39      	ldr	r3, [pc, #228]	; (1540 <tcc_init+0x360>)
    145c:	4798      	blx	r3
    145e:	002f      	movs	r7, r5
    1460:	3798      	adds	r7, #152	; 0x98
    1462:	002e      	movs	r6, r5
    1464:	3658      	adds	r6, #88	; 0x58
    1466:	2378      	movs	r3, #120	; 0x78
    1468:	469a      	mov	sl, r3
    146a:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    146c:	3b77      	subs	r3, #119	; 0x77
    146e:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
    1470:	0023      	movs	r3, r4
    1472:	4654      	mov	r4, sl
    1474:	469a      	mov	sl, r3
    1476:	e003      	b.n	1480 <tcc_init+0x2a0>
    1478:	3701      	adds	r7, #1
    147a:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    147c:	42b4      	cmp	r4, r6
    147e:	d014      	beq.n	14aa <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
    1480:	783b      	ldrb	r3, [r7, #0]
    1482:	2b00      	cmp	r3, #0
    1484:	d0f8      	beq.n	1478 <tcc_init+0x298>
    1486:	ab08      	add	r3, sp, #32
    1488:	465a      	mov	r2, fp
    148a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    148c:	2300      	movs	r3, #0
    148e:	aa08      	add	r2, sp, #32
    1490:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1492:	0013      	movs	r3, r2
    1494:	2220      	movs	r2, #32
    1496:	18b2      	adds	r2, r6, r2
    1498:	7812      	ldrb	r2, [r2, #0]
    149a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    149c:	465a      	mov	r2, fp
    149e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    14a0:	7830      	ldrb	r0, [r6, #0]
    14a2:	0019      	movs	r1, r3
    14a4:	4b27      	ldr	r3, [pc, #156]	; (1544 <tcc_init+0x364>)
    14a6:	4798      	blx	r3
    14a8:	e7e6      	b.n	1478 <tcc_init+0x298>
    14aa:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    14ac:	9b04      	ldr	r3, [sp, #16]
    14ae:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    14b0:	9a05      	ldr	r2, [sp, #20]
    14b2:	0212      	lsls	r2, r2, #8
    14b4:	4313      	orrs	r3, r2
    14b6:	9a01      	ldr	r2, [sp, #4]
    14b8:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    14ba:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    14bc:	2204      	movs	r2, #4
    14be:	68a3      	ldr	r3, [r4, #8]
    14c0:	421a      	tst	r2, r3
    14c2:	d1fc      	bne.n	14be <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
    14c4:	23ff      	movs	r3, #255	; 0xff
    14c6:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    14c8:	2204      	movs	r2, #4
    14ca:	68a3      	ldr	r3, [r4, #8]
    14cc:	421a      	tst	r2, r3
    14ce:	d1fc      	bne.n	14ca <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
    14d0:	466b      	mov	r3, sp
    14d2:	7b1b      	ldrb	r3, [r3, #12]
    14d4:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    14d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    14d8:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    14da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    14dc:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    14de:	4643      	mov	r3, r8
    14e0:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    14e2:	4a19      	ldr	r2, [pc, #100]	; (1548 <tcc_init+0x368>)
    14e4:	68a3      	ldr	r3, [r4, #8]
    14e6:	4213      	tst	r3, r2
    14e8:	d1fc      	bne.n	14e4 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
    14ea:	464b      	mov	r3, r9
    14ec:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    14ee:	2210      	movs	r2, #16
    14f0:	68a3      	ldr	r3, [r4, #8]
    14f2:	421a      	tst	r2, r3
    14f4:	d1fc      	bne.n	14f0 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
    14f6:	682b      	ldr	r3, [r5, #0]
    14f8:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    14fa:	4a14      	ldr	r2, [pc, #80]	; (154c <tcc_init+0x36c>)
    14fc:	68a3      	ldr	r3, [r4, #8]
    14fe:	4213      	tst	r3, r2
    1500:	d1fc      	bne.n	14fc <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
    1502:	686b      	ldr	r3, [r5, #4]
    1504:	6423      	str	r3, [r4, #64]	; 0x40
    1506:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1508:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    150a:	4811      	ldr	r0, [pc, #68]	; (1550 <tcc_init+0x370>)
    150c:	0002      	movs	r2, r0
    150e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    1510:	68a3      	ldr	r3, [r4, #8]
    1512:	421a      	tst	r2, r3
    1514:	d1fc      	bne.n	1510 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
    1516:	cd04      	ldmia	r5!, {r2}
    1518:	000b      	movs	r3, r1
    151a:	3310      	adds	r3, #16
    151c:	009b      	lsls	r3, r3, #2
    151e:	18e3      	adds	r3, r4, r3
    1520:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1522:	3101      	adds	r1, #1
    1524:	2904      	cmp	r1, #4
    1526:	d1f1      	bne.n	150c <tcc_init+0x32c>
	return STATUS_OK;
    1528:	2000      	movs	r0, #0
    152a:	e670      	b.n	120e <tcc_init+0x2e>
    152c:	00001049 	.word	0x00001049
    1530:	40000400 	.word	0x40000400
    1534:	00ffffff 	.word	0x00ffffff
    1538:	200008e8 	.word	0x200008e8
    153c:	00002c81 	.word	0x00002c81
    1540:	00002bf5 	.word	0x00002bf5
    1544:	00002d79 	.word	0x00002d79
    1548:	00020040 	.word	0x00020040
    154c:	00040080 	.word	0x00040080
    1550:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    1554:	2017      	movs	r0, #23
    1556:	e65a      	b.n	120e <tcc_init+0x2e>
    1558:	2017      	movs	r0, #23
    155a:	e658      	b.n	120e <tcc_init+0x2e>
    155c:	2017      	movs	r0, #23
    155e:	e656      	b.n	120e <tcc_init+0x2e>
    1560:	2017      	movs	r0, #23
    1562:	e654      	b.n	120e <tcc_init+0x2e>
    1564:	2017      	movs	r0, #23
    1566:	e652      	b.n	120e <tcc_init+0x2e>

00001568 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    1568:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    156a:	233c      	movs	r3, #60	; 0x3c
    156c:	5cc3      	ldrb	r3, [r0, r3]
    156e:	4c01      	ldr	r4, [pc, #4]	; (1574 <tcc_set_compare_value+0xc>)
    1570:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    1572:	bd10      	pop	{r4, pc}
    1574:	0000104d 	.word	0x0000104d

00001578 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1578:	b5f0      	push	{r4, r5, r6, r7, lr}
    157a:	46c6      	mov	lr, r8
    157c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    157e:	0080      	lsls	r0, r0, #2
    1580:	4b0e      	ldr	r3, [pc, #56]	; (15bc <_tcc_interrupt_handler+0x44>)
    1582:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1584:	683b      	ldr	r3, [r7, #0]
    1586:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    158a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    158c:	4013      	ands	r3, r2
    158e:	401e      	ands	r6, r3
    1590:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1592:	4b0b      	ldr	r3, [pc, #44]	; (15c0 <_tcc_interrupt_handler+0x48>)
    1594:	4698      	mov	r8, r3
    1596:	e002      	b.n	159e <_tcc_interrupt_handler+0x26>
    1598:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    159a:	2c30      	cmp	r4, #48	; 0x30
    159c:	d00a      	beq.n	15b4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    159e:	4643      	mov	r3, r8
    15a0:	58e5      	ldr	r5, [r4, r3]
    15a2:	4235      	tst	r5, r6
    15a4:	d0f8      	beq.n	1598 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    15a6:	193b      	adds	r3, r7, r4
    15a8:	685b      	ldr	r3, [r3, #4]
    15aa:	0038      	movs	r0, r7
    15ac:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    15ae:	683b      	ldr	r3, [r7, #0]
    15b0:	62dd      	str	r5, [r3, #44]	; 0x2c
    15b2:	e7f1      	b.n	1598 <_tcc_interrupt_handler+0x20>
		}
	}
}
    15b4:	bc04      	pop	{r2}
    15b6:	4690      	mov	r8, r2
    15b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	200008e8 	.word	0x200008e8
    15c0:	00003234 	.word	0x00003234

000015c4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    15c4:	b510      	push	{r4, lr}
    15c6:	2000      	movs	r0, #0
    15c8:	4b01      	ldr	r3, [pc, #4]	; (15d0 <TCC0_Handler+0xc>)
    15ca:	4798      	blx	r3
    15cc:	bd10      	pop	{r4, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00001579 	.word	0x00001579

000015d4 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    15d4:	4b06      	ldr	r3, [pc, #24]	; (15f0 <_tc_get_inst_index+0x1c>)
    15d6:	4298      	cmp	r0, r3
    15d8:	d008      	beq.n	15ec <_tc_get_inst_index+0x18>
    15da:	4a06      	ldr	r2, [pc, #24]	; (15f4 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    15dc:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    15de:	4290      	cmp	r0, r2
    15e0:	d001      	beq.n	15e6 <_tc_get_inst_index+0x12>
}
    15e2:	0018      	movs	r0, r3
    15e4:	4770      	bx	lr
    15e6:	3301      	adds	r3, #1
			return i;
    15e8:	b2db      	uxtb	r3, r3
    15ea:	e7fa      	b.n	15e2 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    15ec:	2300      	movs	r3, #0
    15ee:	e7fb      	b.n	15e8 <_tc_get_inst_index+0x14>
    15f0:	42001800 	.word	0x42001800
    15f4:	42001c00 	.word	0x42001c00

000015f8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    15f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fa:	b085      	sub	sp, #20
    15fc:	0004      	movs	r4, r0
    15fe:	000d      	movs	r5, r1
    1600:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1602:	0008      	movs	r0, r1
    1604:	4b82      	ldr	r3, [pc, #520]	; (1810 <tc_init+0x218>)
    1606:	4798      	blx	r3
    1608:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    160a:	ab03      	add	r3, sp, #12
    160c:	2212      	movs	r2, #18
    160e:	701a      	strb	r2, [r3, #0]
    1610:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1612:	ab02      	add	r3, sp, #8
    1614:	322e      	adds	r2, #46	; 0x2e
    1616:	801a      	strh	r2, [r3, #0]
    1618:	3240      	adds	r2, #64	; 0x40
    161a:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    161c:	2300      	movs	r3, #0
    161e:	60a3      	str	r3, [r4, #8]
    1620:	60e3      	str	r3, [r4, #12]
    1622:	6123      	str	r3, [r4, #16]
    1624:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1626:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    1628:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    162a:	0082      	lsls	r2, r0, #2
    162c:	4b79      	ldr	r3, [pc, #484]	; (1814 <tc_init+0x21c>)
    162e:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1630:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1632:	78b3      	ldrb	r3, [r6, #2]
    1634:	2b08      	cmp	r3, #8
    1636:	d006      	beq.n	1646 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1638:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    163a:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    163c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    163e:	07db      	lsls	r3, r3, #31
    1640:	d505      	bpl.n	164e <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1642:	b005      	add	sp, #20
    1644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    1646:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1648:	07fa      	lsls	r2, r7, #31
    164a:	d4fa      	bmi.n	1642 <tc_init+0x4a>
    164c:	e7f4      	b.n	1638 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    164e:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1650:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1652:	06db      	lsls	r3, r3, #27
    1654:	d4f5      	bmi.n	1642 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1656:	882b      	ldrh	r3, [r5, #0]
    1658:	079b      	lsls	r3, r3, #30
    165a:	d4f2      	bmi.n	1642 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    165c:	7c33      	ldrb	r3, [r6, #16]
    165e:	2b00      	cmp	r3, #0
    1660:	d000      	beq.n	1664 <tc_init+0x6c>
    1662:	e07a      	b.n	175a <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    1664:	7f33      	ldrb	r3, [r6, #28]
    1666:	2b00      	cmp	r3, #0
    1668:	d000      	beq.n	166c <tc_init+0x74>
    166a:	e082      	b.n	1772 <tc_init+0x17a>
    166c:	496a      	ldr	r1, [pc, #424]	; (1818 <tc_init+0x220>)
    166e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1670:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1672:	ab02      	add	r3, sp, #8
    1674:	5ad3      	ldrh	r3, [r2, r3]
    1676:	4303      	orrs	r3, r0
    1678:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    167a:	78b3      	ldrb	r3, [r6, #2]
    167c:	2b08      	cmp	r3, #8
    167e:	d100      	bne.n	1682 <tc_init+0x8a>
    1680:	e087      	b.n	1792 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    1682:	7833      	ldrb	r3, [r6, #0]
    1684:	466a      	mov	r2, sp
    1686:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1688:	ab03      	add	r3, sp, #12
    168a:	5ddf      	ldrb	r7, [r3, r7]
    168c:	4669      	mov	r1, sp
    168e:	0038      	movs	r0, r7
    1690:	4b62      	ldr	r3, [pc, #392]	; (181c <tc_init+0x224>)
    1692:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1694:	0038      	movs	r0, r7
    1696:	4b62      	ldr	r3, [pc, #392]	; (1820 <tc_init+0x228>)
    1698:	4798      	blx	r3
	ctrla_tmp =
    169a:	8931      	ldrh	r1, [r6, #8]
    169c:	88b3      	ldrh	r3, [r6, #4]
    169e:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    16a0:	78b1      	ldrb	r1, [r6, #2]
    16a2:	79b2      	ldrb	r2, [r6, #6]
    16a4:	4311      	orrs	r1, r2
	ctrla_tmp =
    16a6:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    16a8:	7873      	ldrb	r3, [r6, #1]
    16aa:	2b00      	cmp	r3, #0
    16ac:	d002      	beq.n	16b4 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    16ae:	2380      	movs	r3, #128	; 0x80
    16b0:	011b      	lsls	r3, r3, #4
    16b2:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16b4:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16b6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    16b8:	b25b      	sxtb	r3, r3
    16ba:	2b00      	cmp	r3, #0
    16bc:	dbfb      	blt.n	16b6 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    16be:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    16c0:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    16c2:	1e4b      	subs	r3, r1, #1
    16c4:	4199      	sbcs	r1, r3
    16c6:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    16c8:	7bb3      	ldrb	r3, [r6, #14]
    16ca:	2b00      	cmp	r3, #0
    16cc:	d001      	beq.n	16d2 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    16ce:	2301      	movs	r3, #1
    16d0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16d4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    16d6:	b25b      	sxtb	r3, r3
    16d8:	2b00      	cmp	r3, #0
    16da:	dbfb      	blt.n	16d4 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    16dc:	23ff      	movs	r3, #255	; 0xff
    16de:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    16e0:	2900      	cmp	r1, #0
    16e2:	d005      	beq.n	16f0 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    16e4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    16e6:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    16e8:	b25b      	sxtb	r3, r3
    16ea:	2b00      	cmp	r3, #0
    16ec:	dbfb      	blt.n	16e6 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    16ee:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    16f0:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    16f2:	7af3      	ldrb	r3, [r6, #11]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d001      	beq.n	16fc <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    16f8:	2310      	movs	r3, #16
    16fa:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    16fc:	7b33      	ldrb	r3, [r6, #12]
    16fe:	2b00      	cmp	r3, #0
    1700:	d001      	beq.n	1706 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1702:	2320      	movs	r3, #32
    1704:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1706:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1708:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    170a:	b25b      	sxtb	r3, r3
    170c:	2b00      	cmp	r3, #0
    170e:	dbfb      	blt.n	1708 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1710:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1712:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1714:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1716:	b25b      	sxtb	r3, r3
    1718:	2b00      	cmp	r3, #0
    171a:	dbfb      	blt.n	1714 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    171c:	7923      	ldrb	r3, [r4, #4]
    171e:	2b04      	cmp	r3, #4
    1720:	d03f      	beq.n	17a2 <tc_init+0x1aa>
    1722:	2b08      	cmp	r3, #8
    1724:	d05e      	beq.n	17e4 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    1726:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1728:	2b00      	cmp	r3, #0
    172a:	d000      	beq.n	172e <tc_init+0x136>
    172c:	e789      	b.n	1642 <tc_init+0x4a>
    172e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1730:	b25b      	sxtb	r3, r3
    1732:	2b00      	cmp	r3, #0
    1734:	dbfb      	blt.n	172e <tc_init+0x136>
				= config->counter_16_bit.value;
    1736:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    1738:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    173a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    173c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    173e:	b25b      	sxtb	r3, r3
    1740:	2b00      	cmp	r3, #0
    1742:	dbfb      	blt.n	173c <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1744:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1746:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1748:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    174a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    174c:	b25b      	sxtb	r3, r3
    174e:	2b00      	cmp	r3, #0
    1750:	dbfb      	blt.n	174a <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    1752:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1754:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    1756:	2000      	movs	r0, #0
    1758:	e773      	b.n	1642 <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    175a:	a901      	add	r1, sp, #4
    175c:	2301      	movs	r3, #1
    175e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1760:	2200      	movs	r2, #0
    1762:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1764:	7e32      	ldrb	r2, [r6, #24]
    1766:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1768:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    176a:	7d30      	ldrb	r0, [r6, #20]
    176c:	4b2d      	ldr	r3, [pc, #180]	; (1824 <tc_init+0x22c>)
    176e:	4798      	blx	r3
    1770:	e778      	b.n	1664 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1772:	a901      	add	r1, sp, #4
    1774:	2301      	movs	r3, #1
    1776:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1778:	2200      	movs	r2, #0
    177a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    177c:	3224      	adds	r2, #36	; 0x24
    177e:	18b2      	adds	r2, r6, r2
    1780:	7812      	ldrb	r2, [r2, #0]
    1782:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1784:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1786:	331f      	adds	r3, #31
    1788:	18f3      	adds	r3, r6, r3
    178a:	7818      	ldrb	r0, [r3, #0]
    178c:	4b25      	ldr	r3, [pc, #148]	; (1824 <tc_init+0x22c>)
    178e:	4798      	blx	r3
    1790:	e76c      	b.n	166c <tc_init+0x74>
    1792:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1794:	1c7a      	adds	r2, r7, #1
    1796:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1798:	ab02      	add	r3, sp, #8
    179a:	5ad3      	ldrh	r3, [r2, r3]
    179c:	4303      	orrs	r3, r0
    179e:	620b      	str	r3, [r1, #32]
    17a0:	e76f      	b.n	1682 <tc_init+0x8a>
    17a2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17a4:	b25b      	sxtb	r3, r3
    17a6:	2b00      	cmp	r3, #0
    17a8:	dbfb      	blt.n	17a2 <tc_init+0x1aa>
					config->counter_8_bit.value;
    17aa:	2328      	movs	r3, #40	; 0x28
    17ac:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    17ae:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17b0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17b2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17b4:	b25b      	sxtb	r3, r3
    17b6:	2b00      	cmp	r3, #0
    17b8:	dbfb      	blt.n	17b2 <tc_init+0x1ba>
					config->counter_8_bit.period;
    17ba:	2329      	movs	r3, #41	; 0x29
    17bc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    17be:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17c2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17c4:	b25b      	sxtb	r3, r3
    17c6:	2b00      	cmp	r3, #0
    17c8:	dbfb      	blt.n	17c2 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    17ca:	232a      	movs	r3, #42	; 0x2a
    17cc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    17ce:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17d0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17d2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17d4:	b25b      	sxtb	r3, r3
    17d6:	2b00      	cmp	r3, #0
    17d8:	dbfb      	blt.n	17d2 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    17da:	232b      	movs	r3, #43	; 0x2b
    17dc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    17de:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    17e0:	2000      	movs	r0, #0
    17e2:	e72e      	b.n	1642 <tc_init+0x4a>
    17e4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17e6:	b25b      	sxtb	r3, r3
    17e8:	2b00      	cmp	r3, #0
    17ea:	dbfb      	blt.n	17e4 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    17ec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    17ee:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17f0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    17f2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    17f4:	b25b      	sxtb	r3, r3
    17f6:	2b00      	cmp	r3, #0
    17f8:	dbfb      	blt.n	17f2 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    17fa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    17fc:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    17fe:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1800:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1802:	b25b      	sxtb	r3, r3
    1804:	2b00      	cmp	r3, #0
    1806:	dbfb      	blt.n	1800 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    1808:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    180a:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    180c:	2000      	movs	r0, #0
    180e:	e718      	b.n	1642 <tc_init+0x4a>
    1810:	000015d5 	.word	0x000015d5
    1814:	200008ec 	.word	0x200008ec
    1818:	40000400 	.word	0x40000400
    181c:	00002c81 	.word	0x00002c81
    1820:	00002bf5 	.word	0x00002bf5
    1824:	00002d79 	.word	0x00002d79

00001828 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1828:	1c93      	adds	r3, r2, #2
    182a:	009b      	lsls	r3, r3, #2
    182c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    182e:	2a02      	cmp	r2, #2
    1830:	d009      	beq.n	1846 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1832:	2a03      	cmp	r2, #3
    1834:	d00c      	beq.n	1850 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1836:	2301      	movs	r3, #1
    1838:	4093      	lsls	r3, r2
    183a:	001a      	movs	r2, r3
    183c:	7e03      	ldrb	r3, [r0, #24]
    183e:	4313      	orrs	r3, r2
    1840:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1842:	2000      	movs	r0, #0
    1844:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1846:	7e03      	ldrb	r3, [r0, #24]
    1848:	2210      	movs	r2, #16
    184a:	4313      	orrs	r3, r2
    184c:	7603      	strb	r3, [r0, #24]
    184e:	e7f8      	b.n	1842 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1850:	7e03      	ldrb	r3, [r0, #24]
    1852:	2220      	movs	r2, #32
    1854:	4313      	orrs	r3, r2
    1856:	7603      	strb	r3, [r0, #24]
    1858:	e7f3      	b.n	1842 <tc_register_callback+0x1a>
	...

0000185c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    185c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    185e:	0080      	lsls	r0, r0, #2
    1860:	4b16      	ldr	r3, [pc, #88]	; (18bc <_tc_interrupt_handler+0x60>)
    1862:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1864:	6823      	ldr	r3, [r4, #0]
    1866:	7b9d      	ldrb	r5, [r3, #14]
    1868:	7e22      	ldrb	r2, [r4, #24]
    186a:	7e63      	ldrb	r3, [r4, #25]
    186c:	4013      	ands	r3, r2
    186e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1870:	07eb      	lsls	r3, r5, #31
    1872:	d406      	bmi.n	1882 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1874:	07ab      	lsls	r3, r5, #30
    1876:	d40b      	bmi.n	1890 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1878:	06eb      	lsls	r3, r5, #27
    187a:	d410      	bmi.n	189e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    187c:	06ab      	lsls	r3, r5, #26
    187e:	d415      	bmi.n	18ac <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1880:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1882:	0020      	movs	r0, r4
    1884:	68a3      	ldr	r3, [r4, #8]
    1886:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1888:	2301      	movs	r3, #1
    188a:	6822      	ldr	r2, [r4, #0]
    188c:	7393      	strb	r3, [r2, #14]
    188e:	e7f1      	b.n	1874 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1890:	0020      	movs	r0, r4
    1892:	68e3      	ldr	r3, [r4, #12]
    1894:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1896:	2302      	movs	r3, #2
    1898:	6822      	ldr	r2, [r4, #0]
    189a:	7393      	strb	r3, [r2, #14]
    189c:	e7ec      	b.n	1878 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    189e:	0020      	movs	r0, r4
    18a0:	6923      	ldr	r3, [r4, #16]
    18a2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    18a4:	2310      	movs	r3, #16
    18a6:	6822      	ldr	r2, [r4, #0]
    18a8:	7393      	strb	r3, [r2, #14]
    18aa:	e7e7      	b.n	187c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    18ac:	0020      	movs	r0, r4
    18ae:	6963      	ldr	r3, [r4, #20]
    18b0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    18b2:	6823      	ldr	r3, [r4, #0]
    18b4:	2220      	movs	r2, #32
    18b6:	739a      	strb	r2, [r3, #14]
}
    18b8:	e7e2      	b.n	1880 <_tc_interrupt_handler+0x24>
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	200008ec 	.word	0x200008ec

000018c0 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    18c0:	b510      	push	{r4, lr}
    18c2:	2000      	movs	r0, #0
    18c4:	4b01      	ldr	r3, [pc, #4]	; (18cc <TC1_Handler+0xc>)
    18c6:	4798      	blx	r3
    18c8:	bd10      	pop	{r4, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	0000185d 	.word	0x0000185d

000018d0 <TC2_Handler>:
    18d0:	b510      	push	{r4, lr}
    18d2:	2001      	movs	r0, #1
    18d4:	4b01      	ldr	r3, [pc, #4]	; (18dc <TC2_Handler+0xc>)
    18d6:	4798      	blx	r3
    18d8:	bd10      	pop	{r4, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	0000185d 	.word	0x0000185d

000018e0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    18e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e2:	46de      	mov	lr, fp
    18e4:	4657      	mov	r7, sl
    18e6:	464e      	mov	r6, r9
    18e8:	4645      	mov	r5, r8
    18ea:	b5e0      	push	{r5, r6, r7, lr}
    18ec:	b087      	sub	sp, #28
    18ee:	4680      	mov	r8, r0
    18f0:	9104      	str	r1, [sp, #16]
    18f2:	0016      	movs	r6, r2
    18f4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    18f6:	2200      	movs	r2, #0
    18f8:	2300      	movs	r3, #0
    18fa:	2100      	movs	r1, #0
    18fc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    18fe:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1900:	2001      	movs	r0, #1
    1902:	0021      	movs	r1, r4
    1904:	9600      	str	r6, [sp, #0]
    1906:	9701      	str	r7, [sp, #4]
    1908:	465c      	mov	r4, fp
    190a:	9403      	str	r4, [sp, #12]
    190c:	4644      	mov	r4, r8
    190e:	9405      	str	r4, [sp, #20]
    1910:	e013      	b.n	193a <long_division+0x5a>
    1912:	2420      	movs	r4, #32
    1914:	1a64      	subs	r4, r4, r1
    1916:	0005      	movs	r5, r0
    1918:	40e5      	lsrs	r5, r4
    191a:	46a8      	mov	r8, r5
    191c:	e014      	b.n	1948 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    191e:	9c00      	ldr	r4, [sp, #0]
    1920:	9d01      	ldr	r5, [sp, #4]
    1922:	1b12      	subs	r2, r2, r4
    1924:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1926:	465c      	mov	r4, fp
    1928:	464d      	mov	r5, r9
    192a:	432c      	orrs	r4, r5
    192c:	46a3      	mov	fp, r4
    192e:	9c03      	ldr	r4, [sp, #12]
    1930:	4645      	mov	r5, r8
    1932:	432c      	orrs	r4, r5
    1934:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1936:	3901      	subs	r1, #1
    1938:	d325      	bcc.n	1986 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    193a:	2420      	movs	r4, #32
    193c:	4264      	negs	r4, r4
    193e:	190c      	adds	r4, r1, r4
    1940:	d4e7      	bmi.n	1912 <long_division+0x32>
    1942:	0005      	movs	r5, r0
    1944:	40a5      	lsls	r5, r4
    1946:	46a8      	mov	r8, r5
    1948:	0004      	movs	r4, r0
    194a:	408c      	lsls	r4, r1
    194c:	46a1      	mov	r9, r4
		r = r << 1;
    194e:	1892      	adds	r2, r2, r2
    1950:	415b      	adcs	r3, r3
    1952:	0014      	movs	r4, r2
    1954:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1956:	9e05      	ldr	r6, [sp, #20]
    1958:	464f      	mov	r7, r9
    195a:	403e      	ands	r6, r7
    195c:	46b4      	mov	ip, r6
    195e:	9e04      	ldr	r6, [sp, #16]
    1960:	4647      	mov	r7, r8
    1962:	403e      	ands	r6, r7
    1964:	46b2      	mov	sl, r6
    1966:	4666      	mov	r6, ip
    1968:	4657      	mov	r7, sl
    196a:	433e      	orrs	r6, r7
    196c:	d003      	beq.n	1976 <long_division+0x96>
			r |= 0x01;
    196e:	0006      	movs	r6, r0
    1970:	4326      	orrs	r6, r4
    1972:	0032      	movs	r2, r6
    1974:	002b      	movs	r3, r5
		if (r >= d) {
    1976:	9c00      	ldr	r4, [sp, #0]
    1978:	9d01      	ldr	r5, [sp, #4]
    197a:	429d      	cmp	r5, r3
    197c:	d8db      	bhi.n	1936 <long_division+0x56>
    197e:	d1ce      	bne.n	191e <long_division+0x3e>
    1980:	4294      	cmp	r4, r2
    1982:	d8d8      	bhi.n	1936 <long_division+0x56>
    1984:	e7cb      	b.n	191e <long_division+0x3e>
    1986:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1988:	4658      	mov	r0, fp
    198a:	0019      	movs	r1, r3
    198c:	b007      	add	sp, #28
    198e:	bc3c      	pop	{r2, r3, r4, r5}
    1990:	4690      	mov	r8, r2
    1992:	4699      	mov	r9, r3
    1994:	46a2      	mov	sl, r4
    1996:	46ab      	mov	fp, r5
    1998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000199a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    199a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    199c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    199e:	2340      	movs	r3, #64	; 0x40
    19a0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    19a2:	4281      	cmp	r1, r0
    19a4:	d202      	bcs.n	19ac <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    19a6:	0018      	movs	r0, r3
    19a8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    19aa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    19ac:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    19ae:	1c63      	adds	r3, r4, #1
    19b0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    19b2:	4288      	cmp	r0, r1
    19b4:	d9f9      	bls.n	19aa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19b6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    19b8:	2cff      	cmp	r4, #255	; 0xff
    19ba:	d8f4      	bhi.n	19a6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    19bc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    19be:	2300      	movs	r3, #0
    19c0:	e7f1      	b.n	19a6 <_sercom_get_sync_baud_val+0xc>
	...

000019c4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    19c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19c6:	b083      	sub	sp, #12
    19c8:	000f      	movs	r7, r1
    19ca:	0016      	movs	r6, r2
    19cc:	aa08      	add	r2, sp, #32
    19ce:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    19d0:	0004      	movs	r4, r0
    19d2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    19d4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    19d6:	42bc      	cmp	r4, r7
    19d8:	d902      	bls.n	19e0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    19da:	0010      	movs	r0, r2
    19dc:	b003      	add	sp, #12
    19de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    19e0:	2b00      	cmp	r3, #0
    19e2:	d114      	bne.n	1a0e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    19e4:	0002      	movs	r2, r0
    19e6:	0008      	movs	r0, r1
    19e8:	2100      	movs	r1, #0
    19ea:	4c19      	ldr	r4, [pc, #100]	; (1a50 <_sercom_get_async_baud_val+0x8c>)
    19ec:	47a0      	blx	r4
    19ee:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    19f0:	003a      	movs	r2, r7
    19f2:	2300      	movs	r3, #0
    19f4:	2000      	movs	r0, #0
    19f6:	4c17      	ldr	r4, [pc, #92]	; (1a54 <_sercom_get_async_baud_val+0x90>)
    19f8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    19fa:	2200      	movs	r2, #0
    19fc:	2301      	movs	r3, #1
    19fe:	1a12      	subs	r2, r2, r0
    1a00:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1a02:	0c12      	lsrs	r2, r2, #16
    1a04:	041b      	lsls	r3, r3, #16
    1a06:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1a08:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1a0a:	2200      	movs	r2, #0
    1a0c:	e7e5      	b.n	19da <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1a0e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1a10:	2b01      	cmp	r3, #1
    1a12:	d1f9      	bne.n	1a08 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1a14:	000a      	movs	r2, r1
    1a16:	2300      	movs	r3, #0
    1a18:	2100      	movs	r1, #0
    1a1a:	4c0d      	ldr	r4, [pc, #52]	; (1a50 <_sercom_get_async_baud_val+0x8c>)
    1a1c:	47a0      	blx	r4
    1a1e:	0002      	movs	r2, r0
    1a20:	000b      	movs	r3, r1
    1a22:	9200      	str	r2, [sp, #0]
    1a24:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1a26:	0038      	movs	r0, r7
    1a28:	2100      	movs	r1, #0
    1a2a:	4c0a      	ldr	r4, [pc, #40]	; (1a54 <_sercom_get_async_baud_val+0x90>)
    1a2c:	47a0      	blx	r4
    1a2e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1a30:	2380      	movs	r3, #128	; 0x80
    1a32:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1a34:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1a36:	4298      	cmp	r0, r3
    1a38:	d8cf      	bhi.n	19da <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1a3a:	0f79      	lsrs	r1, r7, #29
    1a3c:	00f8      	lsls	r0, r7, #3
    1a3e:	9a00      	ldr	r2, [sp, #0]
    1a40:	9b01      	ldr	r3, [sp, #4]
    1a42:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1a44:	00ea      	lsls	r2, r5, #3
    1a46:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1a48:	b2d2      	uxtb	r2, r2
    1a4a:	0352      	lsls	r2, r2, #13
    1a4c:	432a      	orrs	r2, r5
    1a4e:	e7db      	b.n	1a08 <_sercom_get_async_baud_val+0x44>
    1a50:	00003199 	.word	0x00003199
    1a54:	000018e1 	.word	0x000018e1

00001a58 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1a58:	b510      	push	{r4, lr}
    1a5a:	b082      	sub	sp, #8
    1a5c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1a5e:	4b0e      	ldr	r3, [pc, #56]	; (1a98 <sercom_set_gclk_generator+0x40>)
    1a60:	781b      	ldrb	r3, [r3, #0]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d007      	beq.n	1a76 <sercom_set_gclk_generator+0x1e>
    1a66:	2900      	cmp	r1, #0
    1a68:	d105      	bne.n	1a76 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1a6a:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <sercom_set_gclk_generator+0x40>)
    1a6c:	785b      	ldrb	r3, [r3, #1]
    1a6e:	4283      	cmp	r3, r0
    1a70:	d010      	beq.n	1a94 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1a72:	201d      	movs	r0, #29
    1a74:	e00c      	b.n	1a90 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1a76:	a901      	add	r1, sp, #4
    1a78:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1a7a:	200d      	movs	r0, #13
    1a7c:	4b07      	ldr	r3, [pc, #28]	; (1a9c <sercom_set_gclk_generator+0x44>)
    1a7e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1a80:	200d      	movs	r0, #13
    1a82:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <sercom_set_gclk_generator+0x48>)
    1a84:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1a86:	4b04      	ldr	r3, [pc, #16]	; (1a98 <sercom_set_gclk_generator+0x40>)
    1a88:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1a8a:	2201      	movs	r2, #1
    1a8c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1a8e:	2000      	movs	r0, #0
}
    1a90:	b002      	add	sp, #8
    1a92:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1a94:	2000      	movs	r0, #0
    1a96:	e7fb      	b.n	1a90 <sercom_set_gclk_generator+0x38>
    1a98:	2000002c 	.word	0x2000002c
    1a9c:	00002c81 	.word	0x00002c81
    1aa0:	00002bf5 	.word	0x00002bf5

00001aa4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1aa4:	4b15      	ldr	r3, [pc, #84]	; (1afc <_sercom_get_default_pad+0x58>)
    1aa6:	4298      	cmp	r0, r3
    1aa8:	d004      	beq.n	1ab4 <_sercom_get_default_pad+0x10>
    1aaa:	4b15      	ldr	r3, [pc, #84]	; (1b00 <_sercom_get_default_pad+0x5c>)
    1aac:	4298      	cmp	r0, r3
    1aae:	d011      	beq.n	1ad4 <_sercom_get_default_pad+0x30>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1ab0:	2000      	movs	r0, #0
}
    1ab2:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ab4:	2901      	cmp	r1, #1
    1ab6:	d007      	beq.n	1ac8 <_sercom_get_default_pad+0x24>
    1ab8:	2900      	cmp	r1, #0
    1aba:	d01b      	beq.n	1af4 <_sercom_get_default_pad+0x50>
    1abc:	2902      	cmp	r1, #2
    1abe:	d005      	beq.n	1acc <_sercom_get_default_pad+0x28>
    1ac0:	2903      	cmp	r1, #3
    1ac2:	d005      	beq.n	1ad0 <_sercom_get_default_pad+0x2c>
	return 0;
    1ac4:	2000      	movs	r0, #0
    1ac6:	e7f4      	b.n	1ab2 <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ac8:	480e      	ldr	r0, [pc, #56]	; (1b04 <_sercom_get_default_pad+0x60>)
    1aca:	e7f2      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1acc:	480e      	ldr	r0, [pc, #56]	; (1b08 <_sercom_get_default_pad+0x64>)
    1ace:	e7f0      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1ad0:	480e      	ldr	r0, [pc, #56]	; (1b0c <_sercom_get_default_pad+0x68>)
    1ad2:	e7ee      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1ad4:	2901      	cmp	r1, #1
    1ad6:	d007      	beq.n	1ae8 <_sercom_get_default_pad+0x44>
    1ad8:	2900      	cmp	r1, #0
    1ada:	d00d      	beq.n	1af8 <_sercom_get_default_pad+0x54>
    1adc:	2902      	cmp	r1, #2
    1ade:	d005      	beq.n	1aec <_sercom_get_default_pad+0x48>
    1ae0:	2903      	cmp	r1, #3
    1ae2:	d005      	beq.n	1af0 <_sercom_get_default_pad+0x4c>
	return 0;
    1ae4:	2000      	movs	r0, #0
    1ae6:	e7e4      	b.n	1ab2 <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ae8:	4809      	ldr	r0, [pc, #36]	; (1b10 <_sercom_get_default_pad+0x6c>)
    1aea:	e7e2      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1aec:	4809      	ldr	r0, [pc, #36]	; (1b14 <_sercom_get_default_pad+0x70>)
    1aee:	e7e0      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1af0:	4809      	ldr	r0, [pc, #36]	; (1b18 <_sercom_get_default_pad+0x74>)
    1af2:	e7de      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1af4:	4809      	ldr	r0, [pc, #36]	; (1b1c <_sercom_get_default_pad+0x78>)
    1af6:	e7dc      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1af8:	4809      	ldr	r0, [pc, #36]	; (1b20 <_sercom_get_default_pad+0x7c>)
    1afa:	e7da      	b.n	1ab2 <_sercom_get_default_pad+0xe>
    1afc:	42000800 	.word	0x42000800
    1b00:	42000c00 	.word	0x42000c00
    1b04:	000f0002 	.word	0x000f0002
    1b08:	00080003 	.word	0x00080003
    1b0c:	00090003 	.word	0x00090003
    1b10:	001f0002 	.word	0x001f0002
    1b14:	00180002 	.word	0x00180002
    1b18:	00190002 	.word	0x00190002
    1b1c:	000e0002 	.word	0x000e0002
    1b20:	001e0002 	.word	0x001e0002

00001b24 <_sercom_get_sercom_inst_index>:
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1b24:	4b06      	ldr	r3, [pc, #24]	; (1b40 <_sercom_get_sercom_inst_index+0x1c>)
    1b26:	4298      	cmp	r0, r3
    1b28:	d008      	beq.n	1b3c <_sercom_get_sercom_inst_index+0x18>
    1b2a:	4a06      	ldr	r2, [pc, #24]	; (1b44 <_sercom_get_sercom_inst_index+0x20>)
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1b2c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1b2e:	4290      	cmp	r0, r2
    1b30:	d001      	beq.n	1b36 <_sercom_get_sercom_inst_index+0x12>
}
    1b32:	0018      	movs	r0, r3
    1b34:	4770      	bx	lr
    1b36:	3301      	adds	r3, #1
			return i;
    1b38:	b2db      	uxtb	r3, r3
    1b3a:	e7fa      	b.n	1b32 <_sercom_get_sercom_inst_index+0xe>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1b3c:	2300      	movs	r3, #0
    1b3e:	e7fb      	b.n	1b38 <_sercom_get_sercom_inst_index+0x14>
    1b40:	42000800 	.word	0x42000800
    1b44:	42000c00 	.word	0x42000c00

00001b48 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1b48:	4770      	bx	lr
	...

00001b4c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1b4c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1b4e:	4b09      	ldr	r3, [pc, #36]	; (1b74 <_sercom_set_handler+0x28>)
    1b50:	781b      	ldrb	r3, [r3, #0]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d10a      	bne.n	1b6c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1b56:	4c08      	ldr	r4, [pc, #32]	; (1b78 <_sercom_set_handler+0x2c>)
    1b58:	4d08      	ldr	r5, [pc, #32]	; (1b7c <_sercom_set_handler+0x30>)
    1b5a:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1b5c:	4b08      	ldr	r3, [pc, #32]	; (1b80 <_sercom_set_handler+0x34>)
    1b5e:	2200      	movs	r2, #0
    1b60:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1b62:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    1b64:	605a      	str	r2, [r3, #4]
		}

		_handler_table_initialized = true;
    1b66:	3201      	adds	r2, #1
    1b68:	4b02      	ldr	r3, [pc, #8]	; (1b74 <_sercom_set_handler+0x28>)
    1b6a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1b6c:	0080      	lsls	r0, r0, #2
    1b6e:	4b02      	ldr	r3, [pc, #8]	; (1b78 <_sercom_set_handler+0x2c>)
    1b70:	50c1      	str	r1, [r0, r3]
}
    1b72:	bd30      	pop	{r4, r5, pc}
    1b74:	2000002e 	.word	0x2000002e
    1b78:	20000030 	.word	0x20000030
    1b7c:	00001b49 	.word	0x00001b49
    1b80:	200008f4 	.word	0x200008f4

00001b84 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1b84:	b510      	push	{r4, lr}
    1b86:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1b88:	ac01      	add	r4, sp, #4
    1b8a:	2309      	movs	r3, #9
    1b8c:	7023      	strb	r3, [r4, #0]
    1b8e:	3301      	adds	r3, #1
    1b90:	7063      	strb	r3, [r4, #1]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1b92:	4b02      	ldr	r3, [pc, #8]	; (1b9c <_sercom_get_interrupt_vector+0x18>)
    1b94:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1b96:	5620      	ldrsb	r0, [r4, r0]
}
    1b98:	b002      	add	sp, #8
    1b9a:	bd10      	pop	{r4, pc}
    1b9c:	00001b25 	.word	0x00001b25

00001ba0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1ba0:	b510      	push	{r4, lr}
    1ba2:	4b02      	ldr	r3, [pc, #8]	; (1bac <SERCOM0_Handler+0xc>)
    1ba4:	681b      	ldr	r3, [r3, #0]
    1ba6:	2000      	movs	r0, #0
    1ba8:	4798      	blx	r3
    1baa:	bd10      	pop	{r4, pc}
    1bac:	20000030 	.word	0x20000030

00001bb0 <SERCOM1_Handler>:
    1bb0:	b510      	push	{r4, lr}
    1bb2:	4b02      	ldr	r3, [pc, #8]	; (1bbc <SERCOM1_Handler+0xc>)
    1bb4:	685b      	ldr	r3, [r3, #4]
    1bb6:	2001      	movs	r0, #1
    1bb8:	4798      	blx	r3
    1bba:	bd10      	pop	{r4, pc}
    1bbc:	20000030 	.word	0x20000030

00001bc0 <convert2degree2>:
#define MAX_CALIBRATION_COUNT 1500



int  convert2degree2(volatile int x , volatile int y)
{
    1bc0:	b570      	push	{r4, r5, r6, lr}
    1bc2:	b082      	sub	sp, #8
    1bc4:	9001      	str	r0, [sp, #4]
    1bc6:	9100      	str	r1, [sp, #0]
	volatile static int pos;
	static int count = 0;
	static int region = 0;
	int quad_value = intersect_max_value + abs(intersect_min_value);
    1bc8:	4b8c      	ldr	r3, [pc, #560]	; (1dfc <convert2degree2+0x23c>)
    1bca:	681a      	ldr	r2, [r3, #0]
    1bcc:	17d3      	asrs	r3, r2, #31
    1bce:	18d0      	adds	r0, r2, r3
    1bd0:	4058      	eors	r0, r3
    1bd2:	4b8b      	ldr	r3, [pc, #556]	; (1e00 <convert2degree2+0x240>)
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	18c1      	adds	r1, r0, r3
	//count++;
	if(x >= intersect_max_value )
    1bd8:	9c01      	ldr	r4, [sp, #4]
    1bda:	42a3      	cmp	r3, r4
    1bdc:	dc22      	bgt.n	1c24 <convert2degree2+0x64>
	{
		//1st Quad
		region = 1;
		if((y <= intersect_max_value) && (y >= intersect_min_value) )
    1bde:	9800      	ldr	r0, [sp, #0]
    1be0:	4283      	cmp	r3, r0
    1be2:	db12      	blt.n	1c0a <convert2degree2+0x4a>
    1be4:	9800      	ldr	r0, [sp, #0]
    1be6:	4282      	cmp	r2, r0
    1be8:	dc0f      	bgt.n	1c0a <convert2degree2+0x4a>
		{
			
			if(y>=0)
    1bea:	9a00      	ldr	r2, [sp, #0]
    1bec:	2a00      	cmp	r2, #0
    1bee:	db04      	blt.n	1bfa <convert2degree2+0x3a>
			{
				pos = intersect_max_value - y;
    1bf0:	9a00      	ldr	r2, [sp, #0]
    1bf2:	1a9b      	subs	r3, r3, r2
    1bf4:	4a83      	ldr	r2, [pc, #524]	; (1e04 <convert2degree2+0x244>)
    1bf6:	6013      	str	r3, [r2, #0]
    1bf8:	e00d      	b.n	1c16 <convert2degree2+0x56>
			}
			else
			{
				pos = intersect_max_value + abs(y);
    1bfa:	9a00      	ldr	r2, [sp, #0]
    1bfc:	17d1      	asrs	r1, r2, #31
    1bfe:	1852      	adds	r2, r2, r1
    1c00:	404a      	eors	r2, r1
    1c02:	18d3      	adds	r3, r2, r3
    1c04:	4a7f      	ldr	r2, [pc, #508]	; (1e04 <convert2degree2+0x244>)
    1c06:	6013      	str	r3, [r2, #0]
    1c08:	e005      	b.n	1c16 <convert2degree2+0x56>
			}	
		}
		else if(y > intersect_max_value)
    1c0a:	9a00      	ldr	r2, [sp, #0]
    1c0c:	4293      	cmp	r3, r2
    1c0e:	da06      	bge.n	1c1e <convert2degree2+0x5e>
		{
			pos = 0;
    1c10:	2200      	movs	r2, #0
    1c12:	4b7c      	ldr	r3, [pc, #496]	; (1e04 <convert2degree2+0x244>)
    1c14:	601a      	str	r2, [r3, #0]
		}
		
		//pos = 0;
	}
	
	return pos;
    1c16:	4b7b      	ldr	r3, [pc, #492]	; (1e04 <convert2degree2+0x244>)
    1c18:	6818      	ldr	r0, [r3, #0]
	
}
    1c1a:	b002      	add	sp, #8
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
			pos = quad_value;
    1c1e:	4b79      	ldr	r3, [pc, #484]	; (1e04 <convert2degree2+0x244>)
    1c20:	6019      	str	r1, [r3, #0]
    1c22:	e7f8      	b.n	1c16 <convert2degree2+0x56>
	else if( y <= intersect_min_value)
    1c24:	9c00      	ldr	r4, [sp, #0]
    1c26:	42a2      	cmp	r2, r4
    1c28:	db21      	blt.n	1c6e <convert2degree2+0xae>
		if( (x <= intersect_max_value) && (x >= intersect_min_value) )
    1c2a:	9801      	ldr	r0, [sp, #4]
    1c2c:	4283      	cmp	r3, r0
    1c2e:	db14      	blt.n	1c5a <convert2degree2+0x9a>
    1c30:	9801      	ldr	r0, [sp, #4]
    1c32:	4282      	cmp	r2, r0
    1c34:	dc11      	bgt.n	1c5a <convert2degree2+0x9a>
			if(x>=0)
    1c36:	9a01      	ldr	r2, [sp, #4]
    1c38:	2a00      	cmp	r2, #0
    1c3a:	db05      	blt.n	1c48 <convert2degree2+0x88>
				pos = (intersect_max_value - x) + quad_value ;
    1c3c:	9a01      	ldr	r2, [sp, #4]
    1c3e:	1a9b      	subs	r3, r3, r2
    1c40:	1859      	adds	r1, r3, r1
    1c42:	4b70      	ldr	r3, [pc, #448]	; (1e04 <convert2degree2+0x244>)
    1c44:	6019      	str	r1, [r3, #0]
    1c46:	e7e6      	b.n	1c16 <convert2degree2+0x56>
				pos = intersect_max_value + abs(x) + quad_value;
    1c48:	9a01      	ldr	r2, [sp, #4]
    1c4a:	17d0      	asrs	r0, r2, #31
    1c4c:	1812      	adds	r2, r2, r0
    1c4e:	4042      	eors	r2, r0
    1c50:	18d3      	adds	r3, r2, r3
    1c52:	1859      	adds	r1, r3, r1
    1c54:	4b6b      	ldr	r3, [pc, #428]	; (1e04 <convert2degree2+0x244>)
    1c56:	6019      	str	r1, [r3, #0]
    1c58:	e7dd      	b.n	1c16 <convert2degree2+0x56>
		else if(y > intersect_max_value)
    1c5a:	9a00      	ldr	r2, [sp, #0]
    1c5c:	4293      	cmp	r3, r2
    1c5e:	da02      	bge.n	1c66 <convert2degree2+0xa6>
			pos =  quad_value ;
    1c60:	4b68      	ldr	r3, [pc, #416]	; (1e04 <convert2degree2+0x244>)
    1c62:	6019      	str	r1, [r3, #0]
    1c64:	e7d7      	b.n	1c16 <convert2degree2+0x56>
			pos = 2*quad_value;
    1c66:	0049      	lsls	r1, r1, #1
    1c68:	4a66      	ldr	r2, [pc, #408]	; (1e04 <convert2degree2+0x244>)
    1c6a:	6011      	str	r1, [r2, #0]
    1c6c:	e7d3      	b.n	1c16 <convert2degree2+0x56>
	else if( x <= intersect_min_value)
    1c6e:	9c01      	ldr	r4, [sp, #4]
    1c70:	42a2      	cmp	r2, r4
    1c72:	db25      	blt.n	1cc0 <convert2degree2+0x100>
		if( (y <= intersect_max_value) && (y >= intersect_min_value) )
    1c74:	9c00      	ldr	r4, [sp, #0]
    1c76:	42a3      	cmp	r3, r4
    1c78:	db16      	blt.n	1ca8 <convert2degree2+0xe8>
    1c7a:	9c00      	ldr	r4, [sp, #0]
    1c7c:	42a2      	cmp	r2, r4
    1c7e:	dc13      	bgt.n	1ca8 <convert2degree2+0xe8>
			if(y>=0)
    1c80:	9b00      	ldr	r3, [sp, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	db06      	blt.n	1c94 <convert2degree2+0xd4>
				pos = (abs(intersect_min_value) + y) + quad_value*2 ;
    1c86:	9b00      	ldr	r3, [sp, #0]
    1c88:	18c0      	adds	r0, r0, r3
    1c8a:	0049      	lsls	r1, r1, #1
    1c8c:	1841      	adds	r1, r0, r1
    1c8e:	4b5d      	ldr	r3, [pc, #372]	; (1e04 <convert2degree2+0x244>)
    1c90:	6019      	str	r1, [r3, #0]
    1c92:	e7c0      	b.n	1c16 <convert2degree2+0x56>
				pos = abs(intersect_min_value) - abs(y)  + quad_value*2;
    1c94:	9b00      	ldr	r3, [sp, #0]
    1c96:	17da      	asrs	r2, r3, #31
    1c98:	189b      	adds	r3, r3, r2
    1c9a:	4053      	eors	r3, r2
    1c9c:	1ac0      	subs	r0, r0, r3
    1c9e:	0049      	lsls	r1, r1, #1
    1ca0:	1841      	adds	r1, r0, r1
    1ca2:	4b58      	ldr	r3, [pc, #352]	; (1e04 <convert2degree2+0x244>)
    1ca4:	6019      	str	r1, [r3, #0]
    1ca6:	e7b6      	b.n	1c16 <convert2degree2+0x56>
		else if(y > intersect_max_value)
    1ca8:	9a00      	ldr	r2, [sp, #0]
    1caa:	4293      	cmp	r3, r2
    1cac:	da03      	bge.n	1cb6 <convert2degree2+0xf6>
			pos =  2*quad_value ;
    1cae:	0049      	lsls	r1, r1, #1
    1cb0:	4a54      	ldr	r2, [pc, #336]	; (1e04 <convert2degree2+0x244>)
    1cb2:	6011      	str	r1, [r2, #0]
    1cb4:	e7af      	b.n	1c16 <convert2degree2+0x56>
			pos = 3*quad_value;
    1cb6:	004b      	lsls	r3, r1, #1
    1cb8:	1859      	adds	r1, r3, r1
    1cba:	4b52      	ldr	r3, [pc, #328]	; (1e04 <convert2degree2+0x244>)
    1cbc:	6019      	str	r1, [r3, #0]
    1cbe:	e7aa      	b.n	1c16 <convert2degree2+0x56>
	else if( y >= intersect_max_value)
    1cc0:	9c00      	ldr	r4, [sp, #0]
    1cc2:	42a3      	cmp	r3, r4
    1cc4:	dc27      	bgt.n	1d16 <convert2degree2+0x156>
		if( (x <= intersect_max_value) && (x >= intersect_min_value) )
    1cc6:	9c01      	ldr	r4, [sp, #4]
    1cc8:	42a3      	cmp	r3, r4
    1cca:	db18      	blt.n	1cfe <convert2degree2+0x13e>
    1ccc:	9c01      	ldr	r4, [sp, #4]
    1cce:	42a2      	cmp	r2, r4
    1cd0:	dc15      	bgt.n	1cfe <convert2degree2+0x13e>
			if(x>=0)
    1cd2:	9b01      	ldr	r3, [sp, #4]
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	db07      	blt.n	1ce8 <convert2degree2+0x128>
				pos = (abs(intersect_min_value) + x) + quad_value*3 ;
    1cd8:	9b01      	ldr	r3, [sp, #4]
    1cda:	18c0      	adds	r0, r0, r3
    1cdc:	004b      	lsls	r3, r1, #1
    1cde:	1859      	adds	r1, r3, r1
    1ce0:	1841      	adds	r1, r0, r1
    1ce2:	4b48      	ldr	r3, [pc, #288]	; (1e04 <convert2degree2+0x244>)
    1ce4:	6019      	str	r1, [r3, #0]
    1ce6:	e796      	b.n	1c16 <convert2degree2+0x56>
				pos = abs(intersect_min_value) - abs(x)  + quad_value*3;
    1ce8:	9b01      	ldr	r3, [sp, #4]
    1cea:	17da      	asrs	r2, r3, #31
    1cec:	189b      	adds	r3, r3, r2
    1cee:	4053      	eors	r3, r2
    1cf0:	1ac0      	subs	r0, r0, r3
    1cf2:	004b      	lsls	r3, r1, #1
    1cf4:	1859      	adds	r1, r3, r1
    1cf6:	1841      	adds	r1, r0, r1
    1cf8:	4b42      	ldr	r3, [pc, #264]	; (1e04 <convert2degree2+0x244>)
    1cfa:	6019      	str	r1, [r3, #0]
    1cfc:	e78b      	b.n	1c16 <convert2degree2+0x56>
		else if(x > intersect_max_value)
    1cfe:	9a01      	ldr	r2, [sp, #4]
    1d00:	4293      	cmp	r3, r2
    1d02:	da04      	bge.n	1d0e <convert2degree2+0x14e>
			pos =  3*quad_value ;
    1d04:	004b      	lsls	r3, r1, #1
    1d06:	1859      	adds	r1, r3, r1
    1d08:	4b3e      	ldr	r3, [pc, #248]	; (1e04 <convert2degree2+0x244>)
    1d0a:	6019      	str	r1, [r3, #0]
    1d0c:	e783      	b.n	1c16 <convert2degree2+0x56>
			pos = 4*quad_value;
    1d0e:	0089      	lsls	r1, r1, #2
    1d10:	4a3c      	ldr	r2, [pc, #240]	; (1e04 <convert2degree2+0x244>)
    1d12:	6011      	str	r1, [r2, #0]
    1d14:	e77f      	b.n	1c16 <convert2degree2+0x56>
		if((x<intersect_max_value+10) &&(x>intersect_max_value-10)  )
    1d16:	001c      	movs	r4, r3
    1d18:	340a      	adds	r4, #10
    1d1a:	9d01      	ldr	r5, [sp, #4]
    1d1c:	42ac      	cmp	r4, r5
    1d1e:	dd14      	ble.n	1d4a <convert2degree2+0x18a>
    1d20:	9d01      	ldr	r5, [sp, #4]
    1d22:	001e      	movs	r6, r3
    1d24:	3e0a      	subs	r6, #10
    1d26:	42ae      	cmp	r6, r5
    1d28:	da0f      	bge.n	1d4a <convert2degree2+0x18a>
			if(y>0)
    1d2a:	9a00      	ldr	r2, [sp, #0]
    1d2c:	2a00      	cmp	r2, #0
    1d2e:	dd04      	ble.n	1d3a <convert2degree2+0x17a>
				pos = intersect_max_value - y;
    1d30:	9a00      	ldr	r2, [sp, #0]
    1d32:	1a9b      	subs	r3, r3, r2
    1d34:	4a33      	ldr	r2, [pc, #204]	; (1e04 <convert2degree2+0x244>)
    1d36:	6013      	str	r3, [r2, #0]
    1d38:	e76d      	b.n	1c16 <convert2degree2+0x56>
				pos = intersect_max_value + abs(y);
    1d3a:	9a00      	ldr	r2, [sp, #0]
    1d3c:	17d1      	asrs	r1, r2, #31
    1d3e:	1852      	adds	r2, r2, r1
    1d40:	404a      	eors	r2, r1
    1d42:	18d3      	adds	r3, r2, r3
    1d44:	4a2f      	ldr	r2, [pc, #188]	; (1e04 <convert2degree2+0x244>)
    1d46:	6013      	str	r3, [r2, #0]
    1d48:	e765      	b.n	1c16 <convert2degree2+0x56>
		else if((y<intersect_max_value+10) &&(y>intersect_max_value-10)  )
    1d4a:	9d00      	ldr	r5, [sp, #0]
    1d4c:	42ac      	cmp	r4, r5
    1d4e:	dd1a      	ble.n	1d86 <convert2degree2+0x1c6>
    1d50:	9c00      	ldr	r4, [sp, #0]
    1d52:	001d      	movs	r5, r3
    1d54:	3d0a      	subs	r5, #10
    1d56:	42a5      	cmp	r5, r4
    1d58:	da15      	bge.n	1d86 <convert2degree2+0x1c6>
			if(x>0)
    1d5a:	9b01      	ldr	r3, [sp, #4]
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	dd07      	ble.n	1d70 <convert2degree2+0x1b0>
				pos = (abs(intersect_min_value) + x) + quad_value*3 ;
    1d60:	9b01      	ldr	r3, [sp, #4]
    1d62:	18c0      	adds	r0, r0, r3
    1d64:	004b      	lsls	r3, r1, #1
    1d66:	1859      	adds	r1, r3, r1
    1d68:	1841      	adds	r1, r0, r1
    1d6a:	4b26      	ldr	r3, [pc, #152]	; (1e04 <convert2degree2+0x244>)
    1d6c:	6019      	str	r1, [r3, #0]
    1d6e:	e752      	b.n	1c16 <convert2degree2+0x56>
				pos = abs(intersect_min_value) - abs(x)  + quad_value*3;
    1d70:	9b01      	ldr	r3, [sp, #4]
    1d72:	17da      	asrs	r2, r3, #31
    1d74:	189b      	adds	r3, r3, r2
    1d76:	4053      	eors	r3, r2
    1d78:	1ac0      	subs	r0, r0, r3
    1d7a:	004b      	lsls	r3, r1, #1
    1d7c:	1859      	adds	r1, r3, r1
    1d7e:	1841      	adds	r1, r0, r1
    1d80:	4b20      	ldr	r3, [pc, #128]	; (1e04 <convert2degree2+0x244>)
    1d82:	6019      	str	r1, [r3, #0]
    1d84:	e747      	b.n	1c16 <convert2degree2+0x56>
		else if((y<intersect_min_value+10) &&(y>intersect_min_value-10)  )
    1d86:	0014      	movs	r4, r2
    1d88:	340a      	adds	r4, #10
    1d8a:	9d00      	ldr	r5, [sp, #0]
    1d8c:	42ac      	cmp	r4, r5
    1d8e:	dd16      	ble.n	1dbe <convert2degree2+0x1fe>
    1d90:	9d00      	ldr	r5, [sp, #0]
    1d92:	0016      	movs	r6, r2
    1d94:	3e0a      	subs	r6, #10
    1d96:	42ae      	cmp	r6, r5
    1d98:	da11      	bge.n	1dbe <convert2degree2+0x1fe>
			if(x>0)
    1d9a:	9a01      	ldr	r2, [sp, #4]
    1d9c:	2a00      	cmp	r2, #0
    1d9e:	dd05      	ble.n	1dac <convert2degree2+0x1ec>
				pos = (intersect_max_value - x) + quad_value ;
    1da0:	9a01      	ldr	r2, [sp, #4]
    1da2:	1a9b      	subs	r3, r3, r2
    1da4:	1859      	adds	r1, r3, r1
    1da6:	4b17      	ldr	r3, [pc, #92]	; (1e04 <convert2degree2+0x244>)
    1da8:	6019      	str	r1, [r3, #0]
    1daa:	e734      	b.n	1c16 <convert2degree2+0x56>
				pos = intersect_max_value + abs(x) + quad_value;
    1dac:	9a01      	ldr	r2, [sp, #4]
    1dae:	17d0      	asrs	r0, r2, #31
    1db0:	1812      	adds	r2, r2, r0
    1db2:	4042      	eors	r2, r0
    1db4:	18d3      	adds	r3, r2, r3
    1db6:	1859      	adds	r1, r3, r1
    1db8:	4b12      	ldr	r3, [pc, #72]	; (1e04 <convert2degree2+0x244>)
    1dba:	6019      	str	r1, [r3, #0]
    1dbc:	e72b      	b.n	1c16 <convert2degree2+0x56>
		else if((x<intersect_min_value+10) &&(x>intersect_min_value-10)  )
    1dbe:	9b01      	ldr	r3, [sp, #4]
    1dc0:	429c      	cmp	r4, r3
    1dc2:	dd17      	ble.n	1df4 <convert2degree2+0x234>
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	3a0a      	subs	r2, #10
    1dc8:	429a      	cmp	r2, r3
    1dca:	da13      	bge.n	1df4 <convert2degree2+0x234>
			if(y>=0)
    1dcc:	9b00      	ldr	r3, [sp, #0]
    1dce:	2b00      	cmp	r3, #0
    1dd0:	db06      	blt.n	1de0 <convert2degree2+0x220>
				pos = (abs(intersect_min_value) + y) + quad_value*2 ;
    1dd2:	9b00      	ldr	r3, [sp, #0]
    1dd4:	18c0      	adds	r0, r0, r3
    1dd6:	0049      	lsls	r1, r1, #1
    1dd8:	1841      	adds	r1, r0, r1
    1dda:	4b0a      	ldr	r3, [pc, #40]	; (1e04 <convert2degree2+0x244>)
    1ddc:	6019      	str	r1, [r3, #0]
    1dde:	e71a      	b.n	1c16 <convert2degree2+0x56>
				pos = abs(intersect_min_value) - abs(y)  + quad_value*2;
    1de0:	9b00      	ldr	r3, [sp, #0]
    1de2:	17da      	asrs	r2, r3, #31
    1de4:	189b      	adds	r3, r3, r2
    1de6:	4053      	eors	r3, r2
    1de8:	1ac0      	subs	r0, r0, r3
    1dea:	0049      	lsls	r1, r1, #1
    1dec:	1841      	adds	r1, r0, r1
    1dee:	4b05      	ldr	r3, [pc, #20]	; (1e04 <convert2degree2+0x244>)
    1df0:	6019      	str	r1, [r3, #0]
    1df2:	e710      	b.n	1c16 <convert2degree2+0x56>
			pos = 0;
    1df4:	2200      	movs	r2, #0
    1df6:	4b03      	ldr	r3, [pc, #12]	; (1e04 <convert2degree2+0x244>)
    1df8:	601a      	str	r2, [r3, #0]
    1dfa:	e70c      	b.n	1c16 <convert2degree2+0x56>
    1dfc:	2000085c 	.word	0x2000085c
    1e00:	20000858 	.word	0x20000858
    1e04:	20000074 	.word	0x20000074

00001e08 <find_max>:


int find_max(int16_t* coinc_match,int count)
{
    1e08:	b510      	push	{r4, lr}
	int i = 0 ;
	int max_value = 0;
	for(i = 0 ; i <count ; i++ )
    1e0a:	2900      	cmp	r1, #0
    1e0c:	dd0d      	ble.n	1e2a <find_max+0x22>
    1e0e:	0003      	movs	r3, r0
    1e10:	0049      	lsls	r1, r1, #1
    1e12:	1841      	adds	r1, r0, r1
    1e14:	2000      	movs	r0, #0
    1e16:	e002      	b.n	1e1e <find_max+0x16>
    1e18:	3302      	adds	r3, #2
    1e1a:	428b      	cmp	r3, r1
    1e1c:	d006      	beq.n	1e2c <find_max+0x24>
	{
		if(max_value < coinc_match[i])
    1e1e:	2400      	movs	r4, #0
    1e20:	5f1a      	ldrsh	r2, [r3, r4]
    1e22:	4290      	cmp	r0, r2
    1e24:	daf8      	bge.n	1e18 <find_max+0x10>
    1e26:	0010      	movs	r0, r2
    1e28:	e7f6      	b.n	1e18 <find_max+0x10>
	int max_value = 0;
    1e2a:	2000      	movs	r0, #0
		{
			max_value = coinc_match[i];
		}
	}
	return max_value;
}
    1e2c:	bd10      	pop	{r4, pc}

00001e2e <find_min>:


int find_min(int16_t* coinc_match,int count)
{
    1e2e:	b510      	push	{r4, lr}
	int i = 0 ;
	int min_value = 0;
	for(i = 0 ; i <count ; i++ )
    1e30:	2900      	cmp	r1, #0
    1e32:	dd0d      	ble.n	1e50 <find_min+0x22>
    1e34:	0003      	movs	r3, r0
    1e36:	0049      	lsls	r1, r1, #1
    1e38:	1841      	adds	r1, r0, r1
    1e3a:	2000      	movs	r0, #0
    1e3c:	e002      	b.n	1e44 <find_min+0x16>
    1e3e:	3302      	adds	r3, #2
    1e40:	428b      	cmp	r3, r1
    1e42:	d006      	beq.n	1e52 <find_min+0x24>
	{
		if(min_value > coinc_match[i])
    1e44:	2400      	movs	r4, #0
    1e46:	5f1a      	ldrsh	r2, [r3, r4]
    1e48:	4290      	cmp	r0, r2
    1e4a:	ddf8      	ble.n	1e3e <find_min+0x10>
    1e4c:	0010      	movs	r0, r2
    1e4e:	e7f6      	b.n	1e3e <find_min+0x10>
	int min_value = 0;
    1e50:	2000      	movs	r0, #0
		{
			min_value = coinc_match[i];
		}
	}
	return min_value;
}
    1e52:	bd10      	pop	{r4, pc}

00001e54 <infinite_filter>:



void infinite_filter()
{
    1e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e56:	b085      	sub	sp, #20
	//volatile static int16_t verify_position_z[400];

	volatile static int16_t verify_count=0;
	static bool init_temp_sum = false;
	
	temp_x =  x_left_a[0];
    1e58:	4b44      	ldr	r3, [pc, #272]	; (1f6c <infinite_filter+0x118>)
    1e5a:	2200      	movs	r2, #0
    1e5c:	5e9a      	ldrsh	r2, [r3, r2]
	temp_y =  y_left_a[0] +Y_OFFSET;
    1e5e:	4b44      	ldr	r3, [pc, #272]	; (1f70 <infinite_filter+0x11c>)
    1e60:	2400      	movs	r4, #0
    1e62:	5f1c      	ldrsh	r4, [r3, r4]
    1e64:	3404      	adds	r4, #4
	
	if(init_temp_sum == false)
    1e66:	4b43      	ldr	r3, [pc, #268]	; (1f74 <infinite_filter+0x120>)
    1e68:	781b      	ldrb	r3, [r3, #0]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d106      	bne.n	1e7c <infinite_filter+0x28>
	{
		temp_sum_x = temp_x;
    1e6e:	4b42      	ldr	r3, [pc, #264]	; (1f78 <infinite_filter+0x124>)
    1e70:	601a      	str	r2, [r3, #0]
		temp_sum_y = temp_y;
    1e72:	4b42      	ldr	r3, [pc, #264]	; (1f7c <infinite_filter+0x128>)
    1e74:	601c      	str	r4, [r3, #0]
		init_temp_sum = true;
    1e76:	2101      	movs	r1, #1
    1e78:	4b3e      	ldr	r3, [pc, #248]	; (1f74 <infinite_filter+0x120>)
    1e7a:	7019      	strb	r1, [r3, #0]
	}
	
	//
	temp_sum_x = (temp_sum_x*9 + temp_x*1)/10;
    1e7c:	4e3e      	ldr	r6, [pc, #248]	; (1f78 <infinite_filter+0x124>)
    1e7e:	6833      	ldr	r3, [r6, #0]
    1e80:	00d8      	lsls	r0, r3, #3
    1e82:	18c0      	adds	r0, r0, r3
    1e84:	1880      	adds	r0, r0, r2
    1e86:	4f3e      	ldr	r7, [pc, #248]	; (1f80 <infinite_filter+0x12c>)
    1e88:	210a      	movs	r1, #10
    1e8a:	47b8      	blx	r7
    1e8c:	0005      	movs	r5, r0
    1e8e:	6030      	str	r0, [r6, #0]
	temp_sum_y = (temp_sum_y*9 + temp_y*1)/10;
    1e90:	4e3a      	ldr	r6, [pc, #232]	; (1f7c <infinite_filter+0x128>)
    1e92:	6833      	ldr	r3, [r6, #0]
    1e94:	00d8      	lsls	r0, r3, #3
    1e96:	18c0      	adds	r0, r0, r3
    1e98:	1900      	adds	r0, r0, r4
    1e9a:	210a      	movs	r1, #10
    1e9c:	47b8      	blx	r7
    1e9e:	6030      	str	r0, [r6, #0]
	
	if((temp_sum_x == temp_sum_y) && (temp_sum_x !=0))
    1ea0:	4285      	cmp	r5, r0
    1ea2:	d00c      	beq.n	1ebe <infinite_filter+0x6a>
		}
		
		
		
	}
	if(test_count < 1000 )
    1ea4:	4b37      	ldr	r3, [pc, #220]	; (1f84 <infinite_filter+0x130>)
    1ea6:	4a38      	ldr	r2, [pc, #224]	; (1f88 <infinite_filter+0x134>)
    1ea8:	6812      	ldr	r2, [r2, #0]
    1eaa:	429a      	cmp	r2, r3
    1eac:	dd36      	ble.n	1f1c <infinite_filter+0xc8>
		usart_write_buffer_wait(&usart_instance, print_output , count_char);
		test_count++;
		verify_position[test_count] = degree;		
	
	}
	if(test_count == 1000)
    1eae:	23fa      	movs	r3, #250	; 0xfa
    1eb0:	009b      	lsls	r3, r3, #2
    1eb2:	4a35      	ldr	r2, [pc, #212]	; (1f88 <infinite_filter+0x134>)
    1eb4:	6812      	ldr	r2, [r2, #0]
    1eb6:	429a      	cmp	r2, r3
    1eb8:	d050      	beq.n	1f5c <infinite_filter+0x108>
				
			}
		}
	}
	*/
}
    1eba:	b005      	add	sp, #20
    1ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((temp_sum_x == temp_sum_y) && (temp_sum_x !=0))
    1ebe:	2d00      	cmp	r5, #0
    1ec0:	d0f0      	beq.n	1ea4 <infinite_filter+0x50>
		coinc_match[count_i] = temp_sum_x;
    1ec2:	4a32      	ldr	r2, [pc, #200]	; (1f8c <infinite_filter+0x138>)
    1ec4:	8813      	ldrh	r3, [r2, #0]
    1ec6:	b22d      	sxth	r5, r5
    1ec8:	0058      	lsls	r0, r3, #1
    1eca:	4931      	ldr	r1, [pc, #196]	; (1f90 <infinite_filter+0x13c>)
    1ecc:	5245      	strh	r5, [r0, r1]
		count_i++;
    1ece:	3301      	adds	r3, #1
    1ed0:	b29b      	uxth	r3, r3
    1ed2:	8013      	strh	r3, [r2, #0]
		if(count_i == 6 && test_count == 1001)
    1ed4:	2b06      	cmp	r3, #6
    1ed6:	d1e5      	bne.n	1ea4 <infinite_filter+0x50>
    1ed8:	4b2e      	ldr	r3, [pc, #184]	; (1f94 <infinite_filter+0x140>)
    1eda:	4a2b      	ldr	r2, [pc, #172]	; (1f88 <infinite_filter+0x134>)
    1edc:	6812      	ldr	r2, [r2, #0]
    1ede:	429a      	cmp	r2, r3
    1ee0:	d1e0      	bne.n	1ea4 <infinite_filter+0x50>
			 set_motor(0,0);
    1ee2:	2100      	movs	r1, #0
    1ee4:	2000      	movs	r0, #0
    1ee6:	4b2c      	ldr	r3, [pc, #176]	; (1f98 <infinite_filter+0x144>)
    1ee8:	4798      	blx	r3
			 intersect_min_value = find_min(coinc_match,count_i);
    1eea:	4b28      	ldr	r3, [pc, #160]	; (1f8c <infinite_filter+0x138>)
    1eec:	881e      	ldrh	r6, [r3, #0]
    1eee:	4d28      	ldr	r5, [pc, #160]	; (1f90 <infinite_filter+0x13c>)
    1ef0:	0031      	movs	r1, r6
    1ef2:	0028      	movs	r0, r5
    1ef4:	4b29      	ldr	r3, [pc, #164]	; (1f9c <infinite_filter+0x148>)
    1ef6:	4798      	blx	r3
    1ef8:	0004      	movs	r4, r0
    1efa:	4b29      	ldr	r3, [pc, #164]	; (1fa0 <infinite_filter+0x14c>)
    1efc:	6018      	str	r0, [r3, #0]
			 intersect_max_value = find_max(coinc_match,count_i);
    1efe:	0031      	movs	r1, r6
    1f00:	0028      	movs	r0, r5
    1f02:	4b28      	ldr	r3, [pc, #160]	; (1fa4 <infinite_filter+0x150>)
    1f04:	4798      	blx	r3
    1f06:	4b28      	ldr	r3, [pc, #160]	; (1fa8 <infinite_filter+0x154>)
    1f08:	6018      	str	r0, [r3, #0]
			 if((intersect_max_value != intersect_min_value)&&(intersect_min_value!=0)&&(intersect_max_value!=0))
    1f0a:	4284      	cmp	r4, r0
    1f0c:	d022      	beq.n	1f54 <infinite_filter+0x100>
    1f0e:	2c00      	cmp	r4, #0
    1f10:	d020      	beq.n	1f54 <infinite_filter+0x100>
    1f12:	2800      	cmp	r0, #0
    1f14:	d01e      	beq.n	1f54 <infinite_filter+0x100>
				  test_count = 0;
    1f16:	2200      	movs	r2, #0
    1f18:	4b1b      	ldr	r3, [pc, #108]	; (1f88 <infinite_filter+0x134>)
    1f1a:	601a      	str	r2, [r3, #0]
		set_motor(0,50);
    1f1c:	2132      	movs	r1, #50	; 0x32
    1f1e:	2000      	movs	r0, #0
    1f20:	4b1d      	ldr	r3, [pc, #116]	; (1f98 <infinite_filter+0x144>)
    1f22:	4798      	blx	r3
		degree = convert2degree2( temp_sum_x , temp_sum_y);
    1f24:	4b15      	ldr	r3, [pc, #84]	; (1f7c <infinite_filter+0x128>)
    1f26:	6819      	ldr	r1, [r3, #0]
    1f28:	4b13      	ldr	r3, [pc, #76]	; (1f78 <infinite_filter+0x124>)
    1f2a:	6818      	ldr	r0, [r3, #0]
    1f2c:	4b1f      	ldr	r3, [pc, #124]	; (1fac <infinite_filter+0x158>)
    1f2e:	4798      	blx	r3
    1f30:	0004      	movs	r4, r0
		count_char = convert(degree, print_output);
    1f32:	a901      	add	r1, sp, #4
    1f34:	4b1e      	ldr	r3, [pc, #120]	; (1fb0 <infinite_filter+0x15c>)
    1f36:	4798      	blx	r3
		usart_write_buffer_wait(&usart_instance, print_output , count_char);
    1f38:	b282      	uxth	r2, r0
    1f3a:	a901      	add	r1, sp, #4
    1f3c:	481d      	ldr	r0, [pc, #116]	; (1fb4 <infinite_filter+0x160>)
    1f3e:	4b1e      	ldr	r3, [pc, #120]	; (1fb8 <infinite_filter+0x164>)
    1f40:	4798      	blx	r3
		test_count++;
    1f42:	4a11      	ldr	r2, [pc, #68]	; (1f88 <infinite_filter+0x134>)
    1f44:	6813      	ldr	r3, [r2, #0]
    1f46:	3301      	adds	r3, #1
    1f48:	6013      	str	r3, [r2, #0]
		verify_position[test_count] = degree;		
    1f4a:	b224      	sxth	r4, r4
    1f4c:	005b      	lsls	r3, r3, #1
    1f4e:	4a1b      	ldr	r2, [pc, #108]	; (1fbc <infinite_filter+0x168>)
    1f50:	529c      	strh	r4, [r3, r2]
    1f52:	e7ac      	b.n	1eae <infinite_filter+0x5a>
				 count_i = 0;
    1f54:	2200      	movs	r2, #0
    1f56:	4b0d      	ldr	r3, [pc, #52]	; (1f8c <infinite_filter+0x138>)
    1f58:	801a      	strh	r2, [r3, #0]
    1f5a:	e7a3      	b.n	1ea4 <infinite_filter+0x50>
		test_count = 0;
    1f5c:	2200      	movs	r2, #0
    1f5e:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <infinite_filter+0x134>)
    1f60:	601a      	str	r2, [r3, #0]
		calibration_done = true;
    1f62:	3201      	adds	r2, #1
    1f64:	4b16      	ldr	r3, [pc, #88]	; (1fc0 <infinite_filter+0x16c>)
    1f66:	701a      	strb	r2, [r3, #0]
}
    1f68:	e7a7      	b.n	1eba <infinite_filter+0x66>
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	200009e0 	.word	0x200009e0
    1f70:	20000a08 	.word	0x20000a08
    1f74:	20000070 	.word	0x20000070
    1f78:	20000078 	.word	0x20000078
    1f7c:	2000007c 	.word	0x2000007c
    1f80:	00002fc1 	.word	0x00002fc1
    1f84:	000003e7 	.word	0x000003e7
    1f88:	20000008 	.word	0x20000008
    1f8c:	20000064 	.word	0x20000064
    1f90:	2000003c 	.word	0x2000003c
    1f94:	000003e9 	.word	0x000003e9
    1f98:	00002325 	.word	0x00002325
    1f9c:	00001e2f 	.word	0x00001e2f
    1fa0:	2000085c 	.word	0x2000085c
    1fa4:	00001e09 	.word	0x00001e09
    1fa8:	20000858 	.word	0x20000858
    1fac:	00001bc1 	.word	0x00001bc1
    1fb0:	0000263d 	.word	0x0000263d
    1fb4:	200008fc 	.word	0x200008fc
    1fb8:	00000df5 	.word	0x00000df5
    1fbc:	20000080 	.word	0x20000080
    1fc0:	20000038 	.word	0x20000038

00001fc4 <tc_callback_calibration>:




void tc_callback_calibration()
{
    1fc4:	b510      	push	{r4, lr}
	static int count_test = 0;
	static int position_test[10] = {10,100,200,300,400,500,600,700,800,10};
		//,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,
		//220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,420,440,450,460,470,480,490,500,510,520,530,540,550,
		//560,570,580,590,600,610,620,630,640,650,660,670,680,690,700,710,720,730,740,740,760,770,780,790,800,810,820,830,840,10};
	if(test_main == false)
    1fc6:	4b13      	ldr	r3, [pc, #76]	; (2014 <tc_callback_calibration+0x50>)
    1fc8:	781b      	ldrb	r3, [r3, #0]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d009      	beq.n	1fe2 <tc_callback_calibration+0x1e>
		read_encoders();
		infinite_filter();
	}
	else
	{
		count_test++;
    1fce:	4b12      	ldr	r3, [pc, #72]	; (2018 <tc_callback_calibration+0x54>)
    1fd0:	681b      	ldr	r3, [r3, #0]
    1fd2:	3301      	adds	r3, #1
		if(count_test == 1000)
    1fd4:	22fa      	movs	r2, #250	; 0xfa
    1fd6:	0092      	lsls	r2, r2, #2
    1fd8:	4293      	cmp	r3, r2
    1fda:	d007      	beq.n	1fec <tc_callback_calibration+0x28>
		count_test++;
    1fdc:	4a0e      	ldr	r2, [pc, #56]	; (2018 <tc_callback_calibration+0x54>)
    1fde:	6013      	str	r3, [r2, #0]
	//{
		//count_calibration = 0;
		//calibration_done = true;
	//}
	
}
    1fe0:	bd10      	pop	{r4, pc}
		read_encoders();
    1fe2:	4b0e      	ldr	r3, [pc, #56]	; (201c <tc_callback_calibration+0x58>)
    1fe4:	4798      	blx	r3
		infinite_filter();
    1fe6:	4b0e      	ldr	r3, [pc, #56]	; (2020 <tc_callback_calibration+0x5c>)
    1fe8:	4798      	blx	r3
    1fea:	e7f9      	b.n	1fe0 <tc_callback_calibration+0x1c>
			count_test = 0;
    1fec:	2200      	movs	r2, #0
    1fee:	4b0a      	ldr	r3, [pc, #40]	; (2018 <tc_callback_calibration+0x54>)
    1ff0:	601a      	str	r2, [r3, #0]
			position_global = position_test[i];
    1ff2:	4b0c      	ldr	r3, [pc, #48]	; (2024 <tc_callback_calibration+0x60>)
    1ff4:	681b      	ldr	r3, [r3, #0]
    1ff6:	0099      	lsls	r1, r3, #2
    1ff8:	4a0b      	ldr	r2, [pc, #44]	; (2028 <tc_callback_calibration+0x64>)
    1ffa:	5889      	ldr	r1, [r1, r2]
    1ffc:	4a0b      	ldr	r2, [pc, #44]	; (202c <tc_callback_calibration+0x68>)
    1ffe:	6011      	str	r1, [r2, #0]
			i++;
    2000:	3301      	adds	r3, #1
			if(i==10)
    2002:	2b0a      	cmp	r3, #10
    2004:	d002      	beq.n	200c <tc_callback_calibration+0x48>
			i++;
    2006:	4a07      	ldr	r2, [pc, #28]	; (2024 <tc_callback_calibration+0x60>)
    2008:	6013      	str	r3, [r2, #0]
    200a:	e7e9      	b.n	1fe0 <tc_callback_calibration+0x1c>
				i =0;
    200c:	2200      	movs	r2, #0
    200e:	4b05      	ldr	r3, [pc, #20]	; (2024 <tc_callback_calibration+0x60>)
    2010:	601a      	str	r2, [r3, #0]
}
    2012:	e7e5      	b.n	1fe0 <tc_callback_calibration+0x1c>
    2014:	20000878 	.word	0x20000878
    2018:	20000068 	.word	0x20000068
    201c:	00002705 	.word	0x00002705
    2020:	00001e55 	.word	0x00001e55
    2024:	2000006c 	.word	0x2000006c
    2028:	00003264 	.word	0x00003264
    202c:	20000860 	.word	0x20000860

00002030 <config_tc1_calibration>:

void config_tc1_calibration()
{
    2030:	b510      	push	{r4, lr}
    2032:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    2034:	aa01      	add	r2, sp, #4
    2036:	2300      	movs	r3, #0
    2038:	2100      	movs	r1, #0
    203a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    203c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    203e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2040:	2000      	movs	r0, #0
    2042:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2044:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2046:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2048:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    204a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    204c:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    204e:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2050:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2052:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2054:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2056:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2058:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    205a:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    205c:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    205e:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT; //8
    2060:	3304      	adds	r3, #4
    2062:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV256; //64
    2064:	23c0      	movs	r3, #192	; 0xc0
    2066:	00db      	lsls	r3, r3, #3
    2068:	8093      	strh	r3, [r2, #4]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
	config_tc.counter_8_bit.period = 0x55;
    206a:	2155      	movs	r1, #85	; 0x55
    206c:	2329      	movs	r3, #41	; 0x29
    206e:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_instance1, TC1, &config_tc);
    2070:	4c07      	ldr	r4, [pc, #28]	; (2090 <config_tc1_calibration+0x60>)
    2072:	4908      	ldr	r1, [pc, #32]	; (2094 <config_tc1_calibration+0x64>)
    2074:	0020      	movs	r0, r4
    2076:	4b08      	ldr	r3, [pc, #32]	; (2098 <config_tc1_calibration+0x68>)
    2078:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    207a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    207c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    207e:	b25b      	sxtb	r3, r3
    2080:	2b00      	cmp	r3, #0
    2082:	dbfb      	blt.n	207c <config_tc1_calibration+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    2084:	8813      	ldrh	r3, [r2, #0]
    2086:	2102      	movs	r1, #2
    2088:	430b      	orrs	r3, r1
    208a:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance1);
}
    208c:	b00e      	add	sp, #56	; 0x38
    208e:	bd10      	pop	{r4, pc}
    2090:	20000970 	.word	0x20000970
    2094:	42001800 	.word	0x42001800
    2098:	000015f9 	.word	0x000015f9

0000209c <config_callbacks_tc1_calibration>:


void config_callbacks_tc1_calibration()
{
    209c:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance1, tc_callback_calibration ,TC_CALLBACK_OVERFLOW);
    209e:	4c0c      	ldr	r4, [pc, #48]	; (20d0 <config_callbacks_tc1_calibration+0x34>)
    20a0:	2200      	movs	r2, #0
    20a2:	490c      	ldr	r1, [pc, #48]	; (20d4 <config_callbacks_tc1_calibration+0x38>)
    20a4:	0020      	movs	r0, r4
    20a6:	4b0c      	ldr	r3, [pc, #48]	; (20d8 <config_callbacks_tc1_calibration+0x3c>)
    20a8:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    20aa:	6820      	ldr	r0, [r4, #0]
    20ac:	4b0b      	ldr	r3, [pc, #44]	; (20dc <config_callbacks_tc1_calibration+0x40>)
    20ae:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    20b0:	4b0b      	ldr	r3, [pc, #44]	; (20e0 <config_callbacks_tc1_calibration+0x44>)
    20b2:	5c1a      	ldrb	r2, [r3, r0]
    20b4:	231f      	movs	r3, #31
    20b6:	4013      	ands	r3, r2
    20b8:	2201      	movs	r2, #1
    20ba:	0011      	movs	r1, r2
    20bc:	4099      	lsls	r1, r3
    20be:	4b09      	ldr	r3, [pc, #36]	; (20e4 <config_callbacks_tc1_calibration+0x48>)
    20c0:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    20c2:	7e63      	ldrb	r3, [r4, #25]
    20c4:	2101      	movs	r1, #1
    20c6:	430b      	orrs	r3, r1
    20c8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    20ca:	6823      	ldr	r3, [r4, #0]
    20cc:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance1, TC_CALLBACK_OVERFLOW);
}
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000970 	.word	0x20000970
    20d4:	00001fc5 	.word	0x00001fc5
    20d8:	00001829 	.word	0x00001829
    20dc:	000015d5 	.word	0x000015d5
    20e0:	0000328c 	.word	0x0000328c
    20e4:	e000e100 	.word	0xe000e100

000020e8 <timer_calibration_init>:


void timer_calibration_init()
{
    20e8:	b510      	push	{r4, lr}
	config_tc1_calibration();
    20ea:	4b02      	ldr	r3, [pc, #8]	; (20f4 <timer_calibration_init+0xc>)
    20ec:	4798      	blx	r3
	config_callbacks_tc1_calibration();
    20ee:	4b02      	ldr	r3, [pc, #8]	; (20f8 <timer_calibration_init+0x10>)
    20f0:	4798      	blx	r3
}
    20f2:	bd10      	pop	{r4, pc}
    20f4:	00002031 	.word	0x00002031
    20f8:	0000209d 	.word	0x0000209d

000020fc <calibration_init>:

void calibration_init()
{
    20fc:	b510      	push	{r4, lr}
	set_motor(1,50);
    20fe:	2132      	movs	r1, #50	; 0x32
    2100:	2001      	movs	r0, #1
    2102:	4b04      	ldr	r3, [pc, #16]	; (2114 <calibration_init+0x18>)
    2104:	4798      	blx	r3
	timer_calibration_init();
    2106:	4b04      	ldr	r3, [pc, #16]	; (2118 <calibration_init+0x1c>)
    2108:	4798      	blx	r3
	while(calibration_done == false)
    210a:	4a04      	ldr	r2, [pc, #16]	; (211c <calibration_init+0x20>)
    210c:	7813      	ldrb	r3, [r2, #0]
    210e:	2b00      	cmp	r3, #0
    2110:	d0fc      	beq.n	210c <calibration_init+0x10>
	{}
	//tc_disable(&tc_instance1);
	//tc_disable_callback(&tc_instance1, TC_CALLBACK_OVERFLOW);
	//disable the timer and interrupts
    2112:	bd10      	pop	{r4, pc}
    2114:	00002325 	.word	0x00002325
    2118:	000020e9 	.word	0x000020e9
    211c:	20000038 	.word	0x20000038

00002120 <write_data_encoders>:
 */ 


// Helper function to just execute a simple write
void write_data_encoders(uint8_t *bufferSend, uint8_t length, struct i2c_master_module *const module)
{
    2120:	b570      	push	{r4, r5, r6, lr}
    2122:	b084      	sub	sp, #16
    2124:	0016      	movs	r6, r2
	struct i2c_master_packet packet = {
    2126:	ab01      	add	r3, sp, #4
    2128:	225e      	movs	r2, #94	; 0x5e
    212a:	801a      	strh	r2, [r3, #0]
    212c:	8059      	strh	r1, [r3, #2]
    212e:	9002      	str	r0, [sp, #8]
    2130:	2200      	movs	r2, #0
    2132:	721a      	strb	r2, [r3, #8]
    2134:	725a      	strb	r2, [r3, #9]
    2136:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	do {
		error_code = i2c_master_write_packet_wait(module, &packet);
    2138:	4d04      	ldr	r5, [pc, #16]	; (214c <write_data_encoders+0x2c>)
    213a:	4c05      	ldr	r4, [pc, #20]	; (2150 <write_data_encoders+0x30>)
    213c:	a901      	add	r1, sp, #4
    213e:	0030      	movs	r0, r6
    2140:	47a8      	blx	r5
    2142:	7020      	strb	r0, [r4, #0]
		
	}
	while (error_code != STATUS_OK);
    2144:	2800      	cmp	r0, #0
    2146:	d1f9      	bne.n	213c <write_data_encoders+0x1c>
	
}
    2148:	b004      	add	sp, #16
    214a:	bd70      	pop	{r4, r5, r6, pc}
    214c:	000007a5 	.word	0x000007a5
    2150:	200009b4 	.word	0x200009b4

00002154 <config_I2C_SERCOM2>:

void config_I2C_SERCOM2()
{
    2154:	b570      	push	{r4, r5, r6, lr}
    2156:	b08e      	sub	sp, #56	; 0x38
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2158:	ab01      	add	r3, sp, #4
    215a:	4a24      	ldr	r2, [pc, #144]	; (21ec <config_I2C_SERCOM2+0x98>)
    215c:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    215e:	2200      	movs	r2, #0
    2160:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2162:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    2164:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2166:	2101      	movs	r1, #1
    2168:	4249      	negs	r1, r1
    216a:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    216c:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    216e:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    2170:	3125      	adds	r1, #37	; 0x25
    2172:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2174:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2176:	3108      	adds	r1, #8
    2178:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    217a:	3101      	adds	r1, #1
    217c:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    217e:	3101      	adds	r1, #1
    2180:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2182:	32d7      	adds	r2, #215	; 0xd7
    2184:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 40000;
    2186:	4a1a      	ldr	r2, [pc, #104]	; (21f0 <config_I2C_SERCOM2+0x9c>)
    2188:	82da      	strh	r2, [r3, #22]
	// Fast mode Baud rate
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    218a:	22c8      	movs	r2, #200	; 0xc8
    218c:	0052      	lsls	r2, r2, #1
    218e:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    2190:	22c0      	movs	r2, #192	; 0xc0
    2192:	0392      	lsls	r2, r2, #14
    2194:	9205      	str	r2, [sp, #20]
	/* Initialize and enable device with config. */
	do
	{
		error_code = i2c_master_init(&i2c_master_encoder, ENCODER_SERCOMM_2 , &config_i2c_master);
    2196:	4e17      	ldr	r6, [pc, #92]	; (21f4 <config_I2C_SERCOM2+0xa0>)
    2198:	4d17      	ldr	r5, [pc, #92]	; (21f8 <config_I2C_SERCOM2+0xa4>)
    219a:	4c18      	ldr	r4, [pc, #96]	; (21fc <config_I2C_SERCOM2+0xa8>)
    219c:	aa01      	add	r2, sp, #4
    219e:	4918      	ldr	r1, [pc, #96]	; (2200 <config_I2C_SERCOM2+0xac>)
    21a0:	0030      	movs	r0, r6
    21a2:	47a8      	blx	r5
    21a4:	7020      	strb	r0, [r4, #0]
	}
	while(error_code != STATUS_OK);
    21a6:	2800      	cmp	r0, #0
    21a8:	d1f8      	bne.n	219c <config_I2C_SERCOM2+0x48>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    21aa:	4b12      	ldr	r3, [pc, #72]	; (21f4 <config_I2C_SERCOM2+0xa0>)
    21ac:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    21ae:	2207      	movs	r2, #7
    21b0:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    21b2:	421a      	tst	r2, r3
    21b4:	d1fc      	bne.n	21b0 <config_I2C_SERCOM2+0x5c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    21b6:	6823      	ldr	r3, [r4, #0]
    21b8:	2202      	movs	r2, #2
    21ba:	4313      	orrs	r3, r2
    21bc:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    21be:	4d0d      	ldr	r5, [pc, #52]	; (21f4 <config_I2C_SERCOM2+0xa0>)
    21c0:	6828      	ldr	r0, [r5, #0]
    21c2:	4b10      	ldr	r3, [pc, #64]	; (2204 <config_I2C_SERCOM2+0xb0>)
    21c4:	4798      	blx	r3
    21c6:	231f      	movs	r3, #31
    21c8:	4018      	ands	r0, r3
    21ca:	3b1e      	subs	r3, #30
    21cc:	4083      	lsls	r3, r0
    21ce:	4a0e      	ldr	r2, [pc, #56]	; (2208 <config_I2C_SERCOM2+0xb4>)
    21d0:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    21d2:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    21d4:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    21d6:	2110      	movs	r1, #16
    21d8:	8b62      	ldrh	r2, [r4, #26]
    21da:	420a      	tst	r2, r1
    21dc:	d104      	bne.n	21e8 <config_I2C_SERCOM2+0x94>
		timeout_counter++;
    21de:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    21e0:	4283      	cmp	r3, r0
    21e2:	d3f9      	bcc.n	21d8 <config_I2C_SERCOM2+0x84>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    21e4:	2310      	movs	r3, #16
    21e6:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_encoder);
}
    21e8:	b00e      	add	sp, #56	; 0x38
    21ea:	bd70      	pop	{r4, r5, r6, pc}
    21ec:	00000d48 	.word	0x00000d48
    21f0:	ffff9c40 	.word	0xffff9c40
    21f4:	2000098c 	.word	0x2000098c
    21f8:	00000235 	.word	0x00000235
    21fc:	200009b4 	.word	0x200009b4
    2200:	42000800 	.word	0x42000800
    2204:	00001b85 	.word	0x00001b85
    2208:	e000e100 	.word	0xe000e100

0000220c <initialize_encoder>:


void initialize_encoder()
{
    220c:	b500      	push	{lr}
    220e:	b083      	sub	sp, #12
	
	unsigned char bufferSend[4];
	// Disable the temperature sensor, Parity test disabled, enable the interrupt, FAST mode
	bufferSend[0] = 0b00000000;
    2210:	a801      	add	r0, sp, #4
    2212:	2300      	movs	r3, #0
    2214:	7003      	strb	r3, [r0, #0]
	bufferSend[1] = 0b00000010;
    2216:	2202      	movs	r2, #2
    2218:	7042      	strb	r2, [r0, #1]
	bufferSend[2] = 0b00000000;
    221a:	7083      	strb	r3, [r0, #2]
	bufferSend[3] = 0b10000000;
    221c:	3380      	adds	r3, #128	; 0x80
    221e:	70c3      	strb	r3, [r0, #3]
	//
	write_data_encoders(bufferSend, 4 , &i2c_master_encoder);
    2220:	4a02      	ldr	r2, [pc, #8]	; (222c <initialize_encoder+0x20>)
    2222:	2104      	movs	r1, #4
    2224:	4b02      	ldr	r3, [pc, #8]	; (2230 <initialize_encoder+0x24>)
    2226:	4798      	blx	r3
		
}
    2228:	b003      	add	sp, #12
    222a:	bd00      	pop	{pc}
    222c:	2000098c 	.word	0x2000098c
    2230:	00002121 	.word	0x00002121

00002234 <config_encoder>:

void config_encoder()
{
    2234:	b510      	push	{r4, lr}
	config_I2C_SERCOM2(); 
    2236:	4b02      	ldr	r3, [pc, #8]	; (2240 <config_encoder+0xc>)
    2238:	4798      	blx	r3
	initialize_encoder();
    223a:	4b02      	ldr	r3, [pc, #8]	; (2244 <config_encoder+0x10>)
    223c:	4798      	blx	r3
}
    223e:	bd10      	pop	{r4, pc}
    2240:	00002155 	.word	0x00002155
    2244:	0000220d 	.word	0x0000220d

00002248 <configure_encoder>:
void config_encoder_modules()
{
	config_encoder();
}
void configure_encoder()
{
    2248:	b510      	push	{r4, lr}
	config_encoder();
    224a:	4b01      	ldr	r3, [pc, #4]	; (2250 <configure_encoder+0x8>)
    224c:	4798      	blx	r3
	config_encoder_modules();
}
    224e:	bd10      	pop	{r4, pc}
    2250:	00002235 	.word	0x00002235

00002254 <configure_enable_pins>:
	config_tc1();
	config_callbacks_tc1();
}

void configure_enable_pins()
{
    2254:	b530      	push	{r4, r5, lr}
    2256:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2258:	ac01      	add	r4, sp, #4
    225a:	2301      	movs	r3, #1
    225c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    225e:	2200      	movs	r2, #0
    2260:	70a2      	strb	r2, [r4, #2]
	
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    2262:	7023      	strb	r3, [r4, #0]
		
	port_pin_set_config(ENABLE_MOTOR_1, &config_port_pin);
    2264:	0021      	movs	r1, r4
    2266:	2019      	movs	r0, #25
    2268:	4d09      	ldr	r5, [pc, #36]	; (2290 <configure_enable_pins+0x3c>)
    226a:	47a8      	blx	r5
	port_pin_set_config(ENABLE_MOTOR_2, &config_port_pin);
    226c:	0021      	movs	r1, r4
    226e:	2018      	movs	r0, #24
    2270:	47a8      	blx	r5
	port_pin_set_config(SLEEP_PIN, &config_port_pin);
    2272:	0021      	movs	r1, r4
    2274:	2008      	movs	r0, #8
    2276:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2278:	4b06      	ldr	r3, [pc, #24]	; (2294 <configure_enable_pins+0x40>)
    227a:	2280      	movs	r2, #128	; 0x80
    227c:	0492      	lsls	r2, r2, #18
    227e:	619a      	str	r2, [r3, #24]
    2280:	2280      	movs	r2, #128	; 0x80
    2282:	0452      	lsls	r2, r2, #17
    2284:	619a      	str	r2, [r3, #24]
    2286:	2280      	movs	r2, #128	; 0x80
    2288:	0052      	lsls	r2, r2, #1
    228a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(ENABLE_MOTOR_1,true);
	port_pin_set_output_level(ENABLE_MOTOR_2,true);
	port_pin_set_output_level(SLEEP_PIN,DONT_SLEEP);
	
	
}
    228c:	b003      	add	sp, #12
    228e:	bd30      	pop	{r4, r5, pc}
    2290:	00000205 	.word	0x00000205
    2294:	41004400 	.word	0x41004400

00002298 <config_motors>:


void config_motors(void)
{
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	b0aa      	sub	sp, #168	; 0xa8
	
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    229c:	4d16      	ldr	r5, [pc, #88]	; (22f8 <config_motors+0x60>)
    229e:	ac01      	add	r4, sp, #4
    22a0:	0029      	movs	r1, r5
    22a2:	0020      	movs	r0, r4
    22a4:	4b15      	ldr	r3, [pc, #84]	; (22fc <config_motors+0x64>)
    22a6:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV2;
    22a8:	2201      	movs	r2, #1
    22aa:	72e2      	strb	r2, [r4, #11]
	config_tcc.counter.period = 0x00FF;
    22ac:	23ff      	movs	r3, #255	; 0xff
    22ae:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    22b0:	3bfd      	subs	r3, #253	; 0xfd
    22b2:	7623      	strb	r3, [r4, #24]
	
	
	//
	//
	config_tcc.compare.wave_polarity[MOTOR_CH_1]  = TCC_WAVE_POLARITY_0;
    22b4:	2300      	movs	r3, #0
    22b6:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[MOTOR_CH_2]  = TCC_WAVE_POLARITY_0;
    22b8:	7563      	strb	r3, [r4, #21]
	
	//
	//
	config_tcc.compare.match[MOTOR_CH_1]			 = 0;
    22ba:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[MOTOR_WO_1] = true;
    22bc:	2198      	movs	r1, #152	; 0x98
    22be:	5462      	strb	r2, [r4, r1]
	
	///
	config_tcc.pins.wave_out_pin[MOTOR_WO_1]        = PIN_PA04F_TCC0_WO0; 
    22c0:	3994      	subs	r1, #148	; 0x94
    22c2:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[MOTOR_WO_1]    = PINMUX_PA04F_TCC0_WO0;
    22c4:	490e      	ldr	r1, [pc, #56]	; (2300 <config_motors+0x68>)
    22c6:	67a1      	str	r1, [r4, #120]	; 0x78
	
	///
	config_tcc.compare.match[MOTOR_CH_2] = 0;
    22c8:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[MOTOR_WO_2] = true;
    22ca:	3399      	adds	r3, #153	; 0x99
    22cc:	54e2      	strb	r2, [r4, r3]
	config_tcc.pins.wave_out_pin[MOTOR_WO_2]        = PIN_PA05F_TCC0_WO1; 
    22ce:	3b94      	subs	r3, #148	; 0x94
    22d0:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[MOTOR_WO_2]    = PINMUX_PA05F_TCC0_WO1; 
    22d2:	4b0c      	ldr	r3, [pc, #48]	; (2304 <config_motors+0x6c>)
    22d4:	67e3      	str	r3, [r4, #124]	; 0x7c
	

	tcc_init(&tcc_instance0, TCC0, &config_tcc);
    22d6:	4e0c      	ldr	r6, [pc, #48]	; (2308 <config_motors+0x70>)
    22d8:	0022      	movs	r2, r4
    22da:	0029      	movs	r1, r5
    22dc:	0030      	movs	r0, r6
    22de:	4b0b      	ldr	r3, [pc, #44]	; (230c <config_motors+0x74>)
    22e0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    22e2:	6832      	ldr	r2, [r6, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    22e4:	2102      	movs	r1, #2
    22e6:	6893      	ldr	r3, [r2, #8]
    22e8:	4219      	tst	r1, r3
    22ea:	d1fc      	bne.n	22e6 <config_motors+0x4e>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    22ec:	6813      	ldr	r3, [r2, #0]
    22ee:	2102      	movs	r1, #2
    22f0:	430b      	orrs	r3, r1
    22f2:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance0);
}
    22f4:	b02a      	add	sp, #168	; 0xa8
    22f6:	bd70      	pop	{r4, r5, r6, pc}
    22f8:	42001400 	.word	0x42001400
    22fc:	000010a5 	.word	0x000010a5
    2300:	00040005 	.word	0x00040005
    2304:	00050005 	.word	0x00050005
    2308:	20000930 	.word	0x20000930
    230c:	000011e1 	.word	0x000011e1

00002310 <enable_motor>:
{
	configure_enable_pins();
}

void enable_motor()
{
    2310:	b510      	push	{r4, lr}
	configure_enable_pins();
    2312:	4b02      	ldr	r3, [pc, #8]	; (231c <enable_motor+0xc>)
    2314:	4798      	blx	r3
	configure_pins();
	config_motors();
    2316:	4b02      	ldr	r3, [pc, #8]	; (2320 <enable_motor+0x10>)
    2318:	4798      	blx	r3
}
    231a:	bd10      	pop	{r4, pc}
    231c:	00002255 	.word	0x00002255
    2320:	00002299 	.word	0x00002299

00002324 <set_motor>:

// PWM is on AIN1/AIN2 - PA12 and PA20
void set_motor(uint8_t dir, uint8_t speed)
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	000c      	movs	r4, r1
	if(dir == 0)
    2328:	2800      	cmp	r0, #0
    232a:	d00a      	beq.n	2342 <set_motor+0x1e>
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_1, speed);
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_2, 0);
	}
	else
	{
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_1, 0);
    232c:	4e0a      	ldr	r6, [pc, #40]	; (2358 <set_motor+0x34>)
    232e:	2200      	movs	r2, #0
    2330:	2100      	movs	r1, #0
    2332:	0030      	movs	r0, r6
    2334:	4d09      	ldr	r5, [pc, #36]	; (235c <set_motor+0x38>)
    2336:	47a8      	blx	r5
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_2, speed);	 
    2338:	0022      	movs	r2, r4
    233a:	2101      	movs	r1, #1
    233c:	0030      	movs	r0, r6
    233e:	47a8      	blx	r5
	}
	
}
    2340:	bd70      	pop	{r4, r5, r6, pc}
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_1, speed);
    2342:	4d05      	ldr	r5, [pc, #20]	; (2358 <set_motor+0x34>)
    2344:	000a      	movs	r2, r1
    2346:	2100      	movs	r1, #0
    2348:	0028      	movs	r0, r5
    234a:	4c04      	ldr	r4, [pc, #16]	; (235c <set_motor+0x38>)
    234c:	47a0      	blx	r4
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_2, 0);
    234e:	2200      	movs	r2, #0
    2350:	2101      	movs	r1, #1
    2352:	0028      	movs	r0, r5
    2354:	47a0      	blx	r4
    2356:	e7f3      	b.n	2340 <set_motor+0x1c>
    2358:	20000930 	.word	0x20000930
    235c:	00001569 	.word	0x00001569

00002360 <set_motion>:
#define MIN_SPEED  35
#define MAX_PARTION 860
#define HALF_PARTION 420

void set_motion(uint32_t position,uint32_t pwm_value)
{
    2360:	b510      	push	{r4, lr}
	
	//volatile static uint16_t verify_motion[500];
	//volatile static uint16_t verify_count=0;
	
	
	if(position > pwm_value)
    2362:	4288      	cmp	r0, r1
    2364:	d91f      	bls.n	23a6 <set_motion+0x46>
	{
		if(abs(position - pwm_value)> HALF_PARTION)
    2366:	1a40      	subs	r0, r0, r1
    2368:	17c3      	asrs	r3, r0, #31
    236a:	18c0      	adds	r0, r0, r3
    236c:	4058      	eors	r0, r3
    236e:	23d2      	movs	r3, #210	; 0xd2
    2370:	005b      	lsls	r3, r3, #1
			direction_motion = ANTI_CLOCKWISE;
		}
		else
		{
			min_diff =  abs(position - pwm_value);
			direction_motion = CLOCKWISE;
    2372:	2400      	movs	r4, #0
		if(abs(position - pwm_value)> HALF_PARTION)
    2374:	4298      	cmp	r0, r3
    2376:	dd03      	ble.n	2380 <set_motion+0x20>
			min_diff =  MAX_PARTION - abs(position - pwm_value) ;
    2378:	21d7      	movs	r1, #215	; 0xd7
    237a:	0089      	lsls	r1, r1, #2
    237c:	1a08      	subs	r0, r1, r0
			direction_motion = ANTI_CLOCKWISE;
    237e:	2401      	movs	r4, #1
		
	}
	
	
	
	if(min_diff > 50)
    2380:	2832      	cmp	r0, #50	; 0x32
    2382:	d81e      	bhi.n	23c2 <set_motion+0x62>
	{
		set_motor(direction_motion,MAX_SPEED);
	}
	else
	{	
		speed = (min_diff * MAX_SPEED)/ HALF_PARTION ; 
    2384:	2164      	movs	r1, #100	; 0x64
    2386:	4348      	muls	r0, r1
    2388:	3141      	adds	r1, #65	; 0x41
    238a:	31ff      	adds	r1, #255	; 0xff
    238c:	4b0f      	ldr	r3, [pc, #60]	; (23cc <set_motion+0x6c>)
    238e:	4798      	blx	r3
    2390:	2823      	cmp	r0, #35	; 0x23
    2392:	d200      	bcs.n	2396 <set_motion+0x36>
    2394:	2023      	movs	r0, #35	; 0x23
		}
		else if(speed < MIN_SPEED)
		{
			speed = MIN_SPEED;
		}
		set_motor(direction_motion,speed);
    2396:	2864      	cmp	r0, #100	; 0x64
    2398:	d900      	bls.n	239c <set_motion+0x3c>
    239a:	2064      	movs	r0, #100	; 0x64
    239c:	b2c1      	uxtb	r1, r0
    239e:	0020      	movs	r0, r4
    23a0:	4b0b      	ldr	r3, [pc, #44]	; (23d0 <set_motion+0x70>)
    23a2:	4798      	blx	r3
	//if(verify_count == 499 )
	//{
	//	verify_count = 0;
	//}
	
}
    23a4:	bd10      	pop	{r4, pc}
		if(abs(position - pwm_value)> HALF_PARTION)
    23a6:	1a40      	subs	r0, r0, r1
    23a8:	17c3      	asrs	r3, r0, #31
    23aa:	18c0      	adds	r0, r0, r3
    23ac:	4058      	eors	r0, r3
    23ae:	23d2      	movs	r3, #210	; 0xd2
    23b0:	005b      	lsls	r3, r3, #1
			direction_motion = ANTI_CLOCKWISE;
    23b2:	2401      	movs	r4, #1
		if(abs(position - pwm_value)> HALF_PARTION)
    23b4:	4298      	cmp	r0, r3
    23b6:	dde3      	ble.n	2380 <set_motion+0x20>
			min_diff =  MAX_PARTION - abs(position - pwm_value) ;
    23b8:	21d7      	movs	r1, #215	; 0xd7
    23ba:	0089      	lsls	r1, r1, #2
    23bc:	1a08      	subs	r0, r1, r0
			direction_motion = CLOCKWISE;
    23be:	2400      	movs	r4, #0
    23c0:	e7de      	b.n	2380 <set_motion+0x20>
		set_motor(direction_motion,MAX_SPEED);
    23c2:	2164      	movs	r1, #100	; 0x64
    23c4:	0020      	movs	r0, r4
    23c6:	4b02      	ldr	r3, [pc, #8]	; (23d0 <set_motion+0x70>)
    23c8:	4798      	blx	r3
    23ca:	e7eb      	b.n	23a4 <set_motion+0x44>
    23cc:	00002ead 	.word	0x00002ead
    23d0:	00002325 	.word	0x00002325

000023d4 <check_infinte_filter>:
		
	//}
}

void check_infinte_filter(uint32_t pwm_value)
{
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	b087      	sub	sp, #28
    23d8:	9001      	str	r0, [sp, #4]
	//volatile static int16_t verify_position_z[400];

	volatile static int16_t verify_count=0;
	static bool init_temp_sum = false;
	
	temp_x =  x_left_a[0];
    23da:	4b22      	ldr	r3, [pc, #136]	; (2464 <check_infinte_filter+0x90>)
    23dc:	2200      	movs	r2, #0
    23de:	5e9a      	ldrsh	r2, [r3, r2]
	temp_y =  y_left_a[0] + Y_OFFSET;
    23e0:	4b21      	ldr	r3, [pc, #132]	; (2468 <check_infinte_filter+0x94>)
    23e2:	2600      	movs	r6, #0
    23e4:	5f9e      	ldrsh	r6, [r3, r6]
    23e6:	3604      	adds	r6, #4
	
	if(init_temp_sum == false)
    23e8:	4b20      	ldr	r3, [pc, #128]	; (246c <check_infinte_filter+0x98>)
    23ea:	781b      	ldrb	r3, [r3, #0]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d106      	bne.n	23fe <check_infinte_filter+0x2a>
	{
		temp_sum_x = temp_x;
    23f0:	4b1f      	ldr	r3, [pc, #124]	; (2470 <check_infinte_filter+0x9c>)
    23f2:	601a      	str	r2, [r3, #0]
		temp_sum_y = temp_y;
    23f4:	4b1f      	ldr	r3, [pc, #124]	; (2474 <check_infinte_filter+0xa0>)
    23f6:	601e      	str	r6, [r3, #0]
		init_temp_sum = true;
    23f8:	2101      	movs	r1, #1
    23fa:	4b1c      	ldr	r3, [pc, #112]	; (246c <check_infinte_filter+0x98>)
    23fc:	7019      	strb	r1, [r3, #0]
	}
	
	//
	temp_sum_x = (temp_sum_x*9 + temp_x*1)/10;
    23fe:	4d1c      	ldr	r5, [pc, #112]	; (2470 <check_infinte_filter+0x9c>)
    2400:	682b      	ldr	r3, [r5, #0]
    2402:	00d8      	lsls	r0, r3, #3
    2404:	18c0      	adds	r0, r0, r3
    2406:	1880      	adds	r0, r0, r2
    2408:	4f1b      	ldr	r7, [pc, #108]	; (2478 <check_infinte_filter+0xa4>)
    240a:	210a      	movs	r1, #10
    240c:	47b8      	blx	r7
    240e:	0004      	movs	r4, r0
    2410:	6028      	str	r0, [r5, #0]
	temp_sum_y = (temp_sum_y*9 + temp_y*1)/10;
    2412:	4d18      	ldr	r5, [pc, #96]	; (2474 <check_infinte_filter+0xa0>)
    2414:	682b      	ldr	r3, [r5, #0]
    2416:	00d8      	lsls	r0, r3, #3
    2418:	18c0      	adds	r0, r0, r3
    241a:	1980      	adds	r0, r0, r6
    241c:	210a      	movs	r1, #10
    241e:	47b8      	blx	r7
    2420:	0001      	movs	r1, r0
    2422:	6028      	str	r0, [r5, #0]
	
	degree		= convert2degree2( temp_sum_x , temp_sum_y);
    2424:	0020      	movs	r0, r4
    2426:	4b15      	ldr	r3, [pc, #84]	; (247c <check_infinte_filter+0xa8>)
    2428:	4798      	blx	r3
    242a:	0004      	movs	r4, r0
	count_char	= convert(degree, print_output);
    242c:	a903      	add	r1, sp, #12
    242e:	4b14      	ldr	r3, [pc, #80]	; (2480 <check_infinte_filter+0xac>)
    2430:	4798      	blx	r3
	usart_write_buffer_wait(&usart_instance, print_output , count_char);
    2432:	b282      	uxth	r2, r0
    2434:	a903      	add	r1, sp, #12
    2436:	4813      	ldr	r0, [pc, #76]	; (2484 <check_infinte_filter+0xb0>)
    2438:	4b13      	ldr	r3, [pc, #76]	; (2488 <check_infinte_filter+0xb4>)
    243a:	4798      	blx	r3
	
	if(abs(degree-pwm_value) < 2)
    243c:	9b01      	ldr	r3, [sp, #4]
    243e:	1ae3      	subs	r3, r4, r3
    2440:	1c5a      	adds	r2, r3, #1
    2442:	db01      	blt.n	2448 <check_infinte_filter+0x74>
    2444:	2b01      	cmp	r3, #1
    2446:	dd05      	ble.n	2454 <check_infinte_filter+0x80>
		//initialization = false;
		set_motor(0,0);
	}
	else
	{
		set_motion(degree,pwm_value);
    2448:	9901      	ldr	r1, [sp, #4]
    244a:	0020      	movs	r0, r4
    244c:	4b0f      	ldr	r3, [pc, #60]	; (248c <check_infinte_filter+0xb8>)
    244e:	4798      	blx	r3
		//set_motor(0,40);
	}

}
    2450:	b007      	add	sp, #28
    2452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stop_flag = true;
    2454:	2201      	movs	r2, #1
    2456:	4b0e      	ldr	r3, [pc, #56]	; (2490 <check_infinte_filter+0xbc>)
    2458:	601a      	str	r2, [r3, #0]
		set_motor(0,0);
    245a:	2100      	movs	r1, #0
    245c:	2000      	movs	r0, #0
    245e:	4b0d      	ldr	r3, [pc, #52]	; (2494 <check_infinte_filter+0xc0>)
    2460:	4798      	blx	r3
    2462:	e7f5      	b.n	2450 <check_infinte_filter+0x7c>
    2464:	200009e0 	.word	0x200009e0
    2468:	20000a08 	.word	0x20000a08
    246c:	20000854 	.word	0x20000854
    2470:	20000870 	.word	0x20000870
    2474:	20000874 	.word	0x20000874
    2478:	00002fc1 	.word	0x00002fc1
    247c:	00001bc1 	.word	0x00001bc1
    2480:	0000263d 	.word	0x0000263d
    2484:	200008fc 	.word	0x200008fc
    2488:	00000df5 	.word	0x00000df5
    248c:	00002361 	.word	0x00002361
    2490:	20000868 	.word	0x20000868
    2494:	00002325 	.word	0x00002325

00002498 <check_motor>:
	
	return present_mode;
}

void check_motor(uint32_t present_pwm_value)
{
    2498:	b510      	push	{r4, lr}
    249a:	0004      	movs	r4, r0
	static uint32_t prev_pwm_value = 0;
	static uint32_t temp = 0;
	
	//extint_chan_disable_callback(PWM_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	read_encoders();
    249c:	4b0f      	ldr	r3, [pc, #60]	; (24dc <check_motor+0x44>)
    249e:	4798      	blx	r3
	//extint_chan_enable_callback(PWM_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	
	if(present_pwm_value > 0)
    24a0:	2c00      	cmp	r4, #0
    24a2:	d015      	beq.n	24d0 <check_motor+0x38>
	{
		if(abs(present_pwm_value - prev_pwm_value) > 2 )
    24a4:	4b0e      	ldr	r3, [pc, #56]	; (24e0 <check_motor+0x48>)
    24a6:	681b      	ldr	r3, [r3, #0]
    24a8:	1ae3      	subs	r3, r4, r3
    24aa:	17da      	asrs	r2, r3, #31
    24ac:	189b      	adds	r3, r3, r2
    24ae:	4053      	eors	r3, r2
    24b0:	2b02      	cmp	r3, #2
    24b2:	dd03      	ble.n	24bc <check_motor+0x24>
		{
			prev_pwm_value = present_pwm_value ;
    24b4:	4b0a      	ldr	r3, [pc, #40]	; (24e0 <check_motor+0x48>)
    24b6:	601c      	str	r4, [r3, #0]
			temp = present_pwm_value;
    24b8:	4b0a      	ldr	r3, [pc, #40]	; (24e4 <check_motor+0x4c>)
    24ba:	601c      	str	r4, [r3, #0]
		}
		if(position_error == 0)
    24bc:	4b0a      	ldr	r3, [pc, #40]	; (24e8 <check_motor+0x50>)
    24be:	781b      	ldrb	r3, [r3, #0]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d000      	beq.n	24c6 <check_motor+0x2e>
			*/
			//tc_disable(&tc_instance1);
			//extint_chan_enable_callback(PWM_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);

	//}
}
    24c4:	bd10      	pop	{r4, pc}
			check_infinte_filter(temp);
    24c6:	4b07      	ldr	r3, [pc, #28]	; (24e4 <check_motor+0x4c>)
    24c8:	6818      	ldr	r0, [r3, #0]
    24ca:	4b08      	ldr	r3, [pc, #32]	; (24ec <check_motor+0x54>)
    24cc:	4798      	blx	r3
    24ce:	e7f9      	b.n	24c4 <check_motor+0x2c>
		set_motor(0,0);
    24d0:	2100      	movs	r1, #0
    24d2:	2000      	movs	r0, #0
    24d4:	4b06      	ldr	r3, [pc, #24]	; (24f0 <check_motor+0x58>)
    24d6:	4798      	blx	r3
}
    24d8:	e7f4      	b.n	24c4 <check_motor+0x2c>
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	00002705 	.word	0x00002705
    24e0:	20000864 	.word	0x20000864
    24e4:	2000086c 	.word	0x2000086c
    24e8:	2000000c 	.word	0x2000000c
    24ec:	000023d5 	.word	0x000023d5
    24f0:	00002325 	.word	0x00002325

000024f4 <main>:


int main (void)
{	
    24f4:	b570      	push	{r4, r5, r6, lr}
	//
	uint32_t present_pwm_value = 0;
	
	//
	system_init();
    24f6:	4b0e      	ldr	r3, [pc, #56]	; (2530 <main+0x3c>)
    24f8:	4798      	blx	r3
	init_serial();
    24fa:	4b0e      	ldr	r3, [pc, #56]	; (2534 <main+0x40>)
    24fc:	4798      	blx	r3
	
	//
	enable_motor();
    24fe:	4b0e      	ldr	r3, [pc, #56]	; (2538 <main+0x44>)
    2500:	4798      	blx	r3
	configure_encoder();
    2502:	4b0e      	ldr	r3, [pc, #56]	; (253c <main+0x48>)
    2504:	4798      	blx	r3
	
	
	//--Calibration 
	calibration_init();
    2506:	4b0e      	ldr	r3, [pc, #56]	; (2540 <main+0x4c>)
    2508:	4798      	blx	r3
	//
	//
	//initialize_find_pwm();
	
	irq_initialize_vectors();
	cpu_irq_enable();
    250a:	2401      	movs	r4, #1
    250c:	4b0d      	ldr	r3, [pc, #52]	; (2544 <main+0x50>)
    250e:	701c      	strb	r4, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2510:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2514:	b662      	cpsie	i
	
	delay_init();
    2516:	4b0c      	ldr	r3, [pc, #48]	; (2548 <main+0x54>)
    2518:	4798      	blx	r3
	test_main = true;
    251a:	4b0c      	ldr	r3, [pc, #48]	; (254c <main+0x58>)
    251c:	701c      	strb	r4, [r3, #0]
	position_global = 10 ;
    251e:	220a      	movs	r2, #10
    2520:	4b0b      	ldr	r3, [pc, #44]	; (2550 <main+0x5c>)
    2522:	601a      	str	r2, [r3, #0]
		//present_pwm_value = check_pwm();
		//for(i=0; i<840 ; i++)
		//{
			//delay_ms(1000);
			
			check_motor(position_global);
    2524:	001d      	movs	r5, r3
    2526:	4c0b      	ldr	r4, [pc, #44]	; (2554 <main+0x60>)
    2528:	6828      	ldr	r0, [r5, #0]
    252a:	47a0      	blx	r4
    252c:	e7fc      	b.n	2528 <main+0x34>
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	00002dad 	.word	0x00002dad
    2534:	000026c5 	.word	0x000026c5
    2538:	00002311 	.word	0x00002311
    253c:	00002249 	.word	0x00002249
    2540:	000020fd 	.word	0x000020fd
    2544:	2000000d 	.word	0x2000000d
    2548:	000000ed 	.word	0x000000ed
    254c:	20000878 	.word	0x20000878
    2550:	20000860 	.word	0x20000860
    2554:	00002499 	.word	0x00002499

00002558 <configure_usart>:




void configure_usart(void)
{
    2558:	b530      	push	{r4, r5, lr}
    255a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    255c:	2380      	movs	r3, #128	; 0x80
    255e:	05db      	lsls	r3, r3, #23
    2560:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2562:	2300      	movs	r3, #0
    2564:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2566:	22ff      	movs	r2, #255	; 0xff
    2568:	4669      	mov	r1, sp
    256a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    256c:	2200      	movs	r2, #0
    256e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2570:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    2572:	2101      	movs	r1, #1
    2574:	2024      	movs	r0, #36	; 0x24
    2576:	466c      	mov	r4, sp
    2578:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    257a:	3001      	adds	r0, #1
    257c:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    257e:	3125      	adds	r1, #37	; 0x25
    2580:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2582:	3101      	adds	r1, #1
    2584:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2586:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    2588:	3105      	adds	r1, #5
    258a:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    258c:	3101      	adds	r1, #1
    258e:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2590:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2592:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2594:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2596:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2598:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    259a:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    259c:	2313      	movs	r3, #19
    259e:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    25a0:	7762      	strb	r2, [r4, #29]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_usart.baudrate    = BAUDRATE_SERIAL_DEBUG;
    25a2:	23e1      	movs	r3, #225	; 0xe1
    25a4:	025b      	lsls	r3, r3, #9
    25a6:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = DBG_SERCOM_MUX_SETTING;
    25a8:	23c4      	movs	r3, #196	; 0xc4
    25aa:	039b      	lsls	r3, r3, #14
    25ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = DBG_SERCOM_PINMUX_PAD0;
    25ae:	2301      	movs	r3, #1
    25b0:	425b      	negs	r3, r3
    25b2:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = DBG_SERCOM_PINMUX_PAD1;
    25b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = DBG_SERCOM_PINMUX_PAD2;
    25b6:	4b10      	ldr	r3, [pc, #64]	; (25f8 <configure_usart+0xa0>)
    25b8:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = DBG_SERCOM_PINMUX_PAD3;
    25ba:	4b10      	ldr	r3, [pc, #64]	; (25fc <configure_usart+0xa4>)
    25bc:	930f      	str	r3, [sp, #60]	; 0x3c
	//! [setup_change_config]

	//! [setup_set_config]
	while (usart_init(&usart_instance,DBG_MODULE, &config_usart) != STATUS_OK) 
    25be:	4d10      	ldr	r5, [pc, #64]	; (2600 <configure_usart+0xa8>)
    25c0:	4c10      	ldr	r4, [pc, #64]	; (2604 <configure_usart+0xac>)
    25c2:	466a      	mov	r2, sp
    25c4:	4910      	ldr	r1, [pc, #64]	; (2608 <configure_usart+0xb0>)
    25c6:	0028      	movs	r0, r5
    25c8:	47a0      	blx	r4
    25ca:	2800      	cmp	r0, #0
    25cc:	d1f9      	bne.n	25c2 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    25ce:	4d0c      	ldr	r5, [pc, #48]	; (2600 <configure_usart+0xa8>)
    25d0:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    25d2:	0020      	movs	r0, r4
    25d4:	4b0d      	ldr	r3, [pc, #52]	; (260c <configure_usart+0xb4>)
    25d6:	4798      	blx	r3
    25d8:	231f      	movs	r3, #31
    25da:	4018      	ands	r0, r3
    25dc:	3b1e      	subs	r3, #30
    25de:	4083      	lsls	r3, r0
    25e0:	4a0b      	ldr	r2, [pc, #44]	; (2610 <configure_usart+0xb8>)
    25e2:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    25e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    25e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    25e8:	2b00      	cmp	r3, #0
    25ea:	d1fc      	bne.n	25e6 <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    25ec:	6823      	ldr	r3, [r4, #0]
    25ee:	2202      	movs	r2, #2
    25f0:	4313      	orrs	r3, r2
    25f2:	6023      	str	r3, [r4, #0]
	//! [setup_set_config]

	//! [setup_enable]
	usart_enable(&usart_instance);
	//! [setup_enable]
}
    25f4:	b011      	add	sp, #68	; 0x44
    25f6:	bd30      	pop	{r4, r5, pc}
    25f8:	001e0003 	.word	0x001e0003
    25fc:	001f0003 	.word	0x001f0003
    2600:	200008fc 	.word	0x200008fc
    2604:	00000a85 	.word	0x00000a85
    2608:	42000c00 	.word	0x42000c00
    260c:	00001b85 	.word	0x00001b85
    2610:	e000e100 	.word	0xe000e100

00002614 <reverse>:

void reverse(uint8_t* input, int count)
{
    2614:	b510      	push	{r4, lr}
	int i =0;
	int temp =0;
	
	for(i=0;i<count/2;i++)
    2616:	0fca      	lsrs	r2, r1, #31
    2618:	1852      	adds	r2, r2, r1
    261a:	1052      	asrs	r2, r2, #1
    261c:	2a00      	cmp	r2, #0
    261e:	dd0b      	ble.n	2638 <reverse+0x24>
    2620:	0003      	movs	r3, r0
    2622:	3901      	subs	r1, #1
    2624:	1841      	adds	r1, r0, r1
    2626:	1880      	adds	r0, r0, r2
	{
		temp = input[i]; 
    2628:	781a      	ldrb	r2, [r3, #0]
		input[i]= input[count-1-i];
    262a:	780c      	ldrb	r4, [r1, #0]
    262c:	701c      	strb	r4, [r3, #0]
		input[count-1-i] = temp;
    262e:	700a      	strb	r2, [r1, #0]
    2630:	3301      	adds	r3, #1
    2632:	3901      	subs	r1, #1
	for(i=0;i<count/2;i++)
    2634:	4283      	cmp	r3, r0
    2636:	d1f7      	bne.n	2628 <reverse+0x14>
	}
	
	
}
    2638:	bd10      	pop	{r4, pc}
	...

0000263c <convert>:


 
 int convert(int k , uint8_t* output)
 {
    263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    263e:	46ce      	mov	lr, r9
    2640:	4647      	mov	r7, r8
    2642:	b580      	push	{r7, lr}
    2644:	4681      	mov	r9, r0
    2646:	000e      	movs	r6, r1

	 int temp = 0;
	 int count = 0;
	 temp = abs(k);
    2648:	17c2      	asrs	r2, r0, #31
    264a:	1884      	adds	r4, r0, r2
    264c:	4054      	eors	r4, r2
	 while(temp > 0 )
    264e:	2c00      	cmp	r4, #0
    2650:	dd23      	ble.n	269a <convert+0x5e>
    2652:	2500      	movs	r5, #0
	 {
		 output[count]= (temp % 10) + 0x30 ;
    2654:	4b18      	ldr	r3, [pc, #96]	; (26b8 <convert+0x7c>)
    2656:	4698      	mov	r8, r3
		 temp = temp / 10 ;
    2658:	4f18      	ldr	r7, [pc, #96]	; (26bc <convert+0x80>)
		 output[count]= (temp % 10) + 0x30 ;
    265a:	210a      	movs	r1, #10
    265c:	0020      	movs	r0, r4
    265e:	47c0      	blx	r8
    2660:	3130      	adds	r1, #48	; 0x30
    2662:	5571      	strb	r1, [r6, r5]
		 temp = temp / 10 ;
    2664:	210a      	movs	r1, #10
    2666:	0020      	movs	r0, r4
    2668:	47b8      	blx	r7
    266a:	0004      	movs	r4, r0
		 count++;
    266c:	3501      	adds	r5, #1
	 while(temp > 0 )
    266e:	2800      	cmp	r0, #0
    2670:	dcf3      	bgt.n	265a <convert+0x1e>
	 }
	 if(k < 0)
    2672:	464b      	mov	r3, r9
    2674:	2b00      	cmp	r3, #0
    2676:	db12      	blt.n	269e <convert+0x62>
		 output[count] = '-';
		 count ++;
	 }
	 else
	 {
		 if(k == 0)
    2678:	464b      	mov	r3, r9
    267a:	2b00      	cmp	r3, #0
    267c:	d013      	beq.n	26a6 <convert+0x6a>
			  output[count] = '\r';
			  count++;
			  return count;
		 }
	 }
	 reverse(output,count);
    267e:	0029      	movs	r1, r5
    2680:	0030      	movs	r0, r6
    2682:	4b0f      	ldr	r3, [pc, #60]	; (26c0 <convert+0x84>)
    2684:	4798      	blx	r3
	 output[count] = '\n';
    2686:	230a      	movs	r3, #10
    2688:	5573      	strb	r3, [r6, r5]
	 count++;
	 output[count] = '\r';
    268a:	1976      	adds	r6, r6, r5
    268c:	3303      	adds	r3, #3
    268e:	7073      	strb	r3, [r6, #1]
	 count++;
    2690:	1ca8      	adds	r0, r5, #2
	 return count ;

 }
    2692:	bc0c      	pop	{r2, r3}
    2694:	4690      	mov	r8, r2
    2696:	4699      	mov	r9, r3
    2698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	 int count = 0;
    269a:	2500      	movs	r5, #0
    269c:	e7e9      	b.n	2672 <convert+0x36>
		 output[count] = '-';
    269e:	232d      	movs	r3, #45	; 0x2d
    26a0:	5573      	strb	r3, [r6, r5]
		 count ++;
    26a2:	3501      	adds	r5, #1
    26a4:	e7eb      	b.n	267e <convert+0x42>
			  output[count] = 0x30;
    26a6:	3330      	adds	r3, #48	; 0x30
    26a8:	5573      	strb	r3, [r6, r5]
			  output[count] = '\n';
    26aa:	1976      	adds	r6, r6, r5
    26ac:	3b26      	subs	r3, #38	; 0x26
    26ae:	7073      	strb	r3, [r6, #1]
			  output[count] = '\r';
    26b0:	3303      	adds	r3, #3
    26b2:	70b3      	strb	r3, [r6, #2]
			  count++;
    26b4:	1ce8      	adds	r0, r5, #3
			  return count;
    26b6:	e7ec      	b.n	2692 <convert+0x56>
    26b8:	0000318d 	.word	0x0000318d
    26bc:	00002fc1 	.word	0x00002fc1
    26c0:	00002615 	.word	0x00002615

000026c4 <init_serial>:


void init_serial()
{
    26c4:	b510      	push	{r4, lr}
	
	//uint8_t exit_string[] = {"X"};
	configure_usart();
    26c6:	4b01      	ldr	r3, [pc, #4]	; (26cc <init_serial+0x8>)
    26c8:	4798      	blx	r3
	//{
		//count = convert(i, print_output);
		//usart_write_buffer_wait(&usart_instance, print_output , count);
	//}
	//usart_write_buffer_wait(&usart_instance, exit_string , sizeof(exit_string));
    26ca:	bd10      	pop	{r4, pc}
    26cc:	00002559 	.word	0x00002559

000026d0 <get_data_encoders>:


	

void get_data_encoders(struct i2c_master_module instance)
{
    26d0:	b084      	sub	sp, #16
    26d2:	b510      	push	{r4, lr}
    26d4:	b084      	sub	sp, #16
    26d6:	9006      	str	r0, [sp, #24]
    26d8:	9107      	str	r1, [sp, #28]
    26da:	9208      	str	r2, [sp, #32]
    26dc:	9309      	str	r3, [sp, #36]	; 0x24
	struct i2c_master_packet packet = {
    26de:	aa01      	add	r2, sp, #4
    26e0:	4b06      	ldr	r3, [pc, #24]	; (26fc <get_data_encoders+0x2c>)
    26e2:	cb13      	ldmia	r3!, {r0, r1, r4}
    26e4:	c213      	stmia	r2!, {r0, r1, r4}
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	
	// Read all the registers of the encoder
	while(i2c_master_read_packet_wait(&instance, &packet) != STATUS_OK)
    26e6:	4c06      	ldr	r4, [pc, #24]	; (2700 <get_data_encoders+0x30>)
    26e8:	a901      	add	r1, sp, #4
    26ea:	a806      	add	r0, sp, #24
    26ec:	47a0      	blx	r4
    26ee:	2800      	cmp	r0, #0
    26f0:	d1fa      	bne.n	26e8 <get_data_encoders+0x18>
	{
		
	};
	
}
    26f2:	b004      	add	sp, #16
    26f4:	bc10      	pop	{r4}
    26f6:	bc08      	pop	{r3}
    26f8:	b004      	add	sp, #16
    26fa:	4718      	bx	r3
    26fc:	00003290 	.word	0x00003290
    2700:	00000781 	.word	0x00000781

00002704 <read_encoders>:




uint16_t read_encoders()
{
    2704:	b530      	push	{r4, r5, lr}
    2706:	b087      	sub	sp, #28
    uint16_t y_pos;
	
	x_left = 0;
	y_left = 0;
	z_left = 0;
	get_data_encoders(i2c_master_encoder);
    2708:	4c26      	ldr	r4, [pc, #152]	; (27a4 <read_encoders+0xa0>)
    270a:	0023      	movs	r3, r4
    270c:	3310      	adds	r3, #16
    270e:	466a      	mov	r2, sp
    2710:	cb23      	ldmia	r3!, {r0, r1, r5}
    2712:	c223      	stmia	r2!, {r0, r1, r5}
    2714:	cb23      	ldmia	r3!, {r0, r1, r5}
    2716:	c223      	stmia	r2!, {r0, r1, r5}
    2718:	6820      	ldr	r0, [r4, #0]
    271a:	6861      	ldr	r1, [r4, #4]
    271c:	68a2      	ldr	r2, [r4, #8]
    271e:	68e3      	ldr	r3, [r4, #12]
    2720:	4c21      	ldr	r4, [pc, #132]	; (27a8 <read_encoders+0xa4>)
    2722:	47a0      	blx	r4
	
	temp = bufferReceive_encoder[5] & 0x0010;
    2724:	4b21      	ldr	r3, [pc, #132]	; (27ac <read_encoders+0xa8>)
    2726:	795c      	ldrb	r4, [r3, #5]
	conversion_complete = temp<<5;
	filter_enable = 0;
    2728:	2200      	movs	r2, #0
    272a:	4b21      	ldr	r3, [pc, #132]	; (27b0 <read_encoders+0xac>)
    272c:	601a      	str	r2, [r3, #0]
	position_error = 1;
    272e:	3201      	adds	r2, #1
    2730:	4b20      	ldr	r3, [pc, #128]	; (27b4 <read_encoders+0xb0>)
    2732:	701a      	strb	r2, [r3, #0]
	if(conversion_complete == 0 )
    2734:	06e3      	lsls	r3, r4, #27
    2736:	d432      	bmi.n	279e <read_encoders+0x9a>
	{
		x_left = bufferReceive_encoder[0];
		x_left = x_left << 4 ;
		temp = bufferReceive_encoder[4] & 0x00F0;
    2738:	4b1c      	ldr	r3, [pc, #112]	; (27ac <read_encoders+0xa8>)
    273a:	791d      	ldrb	r5, [r3, #4]
		x_left = x_left << 4 ;
    273c:	7819      	ldrb	r1, [r3, #0]
    273e:	0109      	lsls	r1, r1, #4
		temp = temp >> 4;
    2740:	092b      	lsrs	r3, r5, #4
		x_left = x_left + temp ;
    2742:	18c9      	adds	r1, r1, r3
		temp  = x_left & 0x0800;
		x_left = x_left & 0x07FF;
    2744:	0548      	lsls	r0, r1, #21
    2746:	0d40      	lsrs	r0, r0, #21
		if(temp > 0 )
    2748:	050b      	lsls	r3, r1, #20
    274a:	d502      	bpl.n	2752 <read_encoders+0x4e>
		{
			x_left = x_left- 2048;
    274c:	4b1a      	ldr	r3, [pc, #104]	; (27b8 <read_encoders+0xb4>)
    274e:	469c      	mov	ip, r3
    2750:	4460      	add	r0, ip
		}
		x_left_a[i_count] = x_left;
    2752:	4b1a      	ldr	r3, [pc, #104]	; (27bc <read_encoders+0xb8>)
    2754:	8018      	strh	r0, [r3, #0]
		y_left = bufferReceive_encoder[1];
    2756:	4b15      	ldr	r3, [pc, #84]	; (27ac <read_encoders+0xa8>)
		y_left = y_left << 4 ;
    2758:	785b      	ldrb	r3, [r3, #1]
    275a:	011b      	lsls	r3, r3, #4
		temp   = bufferReceive_encoder[4] & 0x000F;
		y_left = y_left + temp ;
    275c:	220f      	movs	r2, #15
    275e:	402a      	ands	r2, r5
    2760:	18d2      	adds	r2, r2, r3
		temp   = y_left & 0x0800;
		y_left = y_left & 0x07FF;
    2762:	0551      	lsls	r1, r2, #21
    2764:	0d49      	lsrs	r1, r1, #21
		if(temp > 0 )
    2766:	0513      	lsls	r3, r2, #20
    2768:	d502      	bpl.n	2770 <read_encoders+0x6c>
		{
			y_left = y_left- 2048;
    276a:	4b13      	ldr	r3, [pc, #76]	; (27b8 <read_encoders+0xb4>)
    276c:	469c      	mov	ip, r3
    276e:	4461      	add	r1, ip
		}
		y_left_a[i_count] = y_left;
    2770:	4b13      	ldr	r3, [pc, #76]	; (27c0 <read_encoders+0xbc>)
    2772:	8019      	strh	r1, [r3, #0]
		
		z_left = bufferReceive_encoder[2];
    2774:	4b0d      	ldr	r3, [pc, #52]	; (27ac <read_encoders+0xa8>)
		z_left = z_left << 4 ;
    2776:	789a      	ldrb	r2, [r3, #2]
    2778:	0112      	lsls	r2, r2, #4
		temp = bufferReceive_encoder[5] & 0x000F;
		z_left = z_left + temp ;
    277a:	230f      	movs	r3, #15
    277c:	4023      	ands	r3, r4
    277e:	189b      	adds	r3, r3, r2
		
		temp  = z_left & 0x0800;
		z_left = z_left & 0x07FF;
    2780:	055a      	lsls	r2, r3, #21
    2782:	0d52      	lsrs	r2, r2, #21
		if(temp > 0 )
    2784:	051b      	lsls	r3, r3, #20
    2786:	d502      	bpl.n	278e <read_encoders+0x8a>
		{
			z_left = z_left- 2048;
    2788:	4b0b      	ldr	r3, [pc, #44]	; (27b8 <read_encoders+0xb4>)
    278a:	469c      	mov	ip, r3
    278c:	4462      	add	r2, ip
		}
		z_left_a[i_count] = z_left;
    278e:	4b0d      	ldr	r3, [pc, #52]	; (27c4 <read_encoders+0xc0>)
    2790:	801a      	strh	r2, [r3, #0]
		
		//i_count = i_count + 1;
		
		filter_enable = 1;
    2792:	2201      	movs	r2, #1
    2794:	4b06      	ldr	r3, [pc, #24]	; (27b0 <read_encoders+0xac>)
    2796:	601a      	str	r2, [r3, #0]
		position_error =0;
    2798:	2200      	movs	r2, #0
    279a:	4b06      	ldr	r3, [pc, #24]	; (27b4 <read_encoders+0xb0>)
    279c:	701a      	strb	r2, [r3, #0]
		//}
		
	}
	//y_pos = 360 - y_pos;
	return y_pos;
}
    279e:	2000      	movs	r0, #0
    27a0:	b007      	add	sp, #28
    27a2:	bd30      	pop	{r4, r5, pc}
    27a4:	2000098c 	.word	0x2000098c
    27a8:	000026d1 	.word	0x000026d1
    27ac:	2000087c 	.word	0x2000087c
    27b0:	20000850 	.word	0x20000850
    27b4:	2000000c 	.word	0x2000000c
    27b8:	fffff800 	.word	0xfffff800
    27bc:	200009e0 	.word	0x200009e0
    27c0:	20000a08 	.word	0x20000a08
    27c4:	200009b8 	.word	0x200009b8

000027c8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    27c8:	4770      	bx	lr
	...

000027cc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    27cc:	4b0c      	ldr	r3, [pc, #48]	; (2800 <cpu_irq_enter_critical+0x34>)
    27ce:	681b      	ldr	r3, [r3, #0]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d106      	bne.n	27e2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    27d4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    27d8:	2b00      	cmp	r3, #0
    27da:	d007      	beq.n	27ec <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    27dc:	2200      	movs	r2, #0
    27de:	4b09      	ldr	r3, [pc, #36]	; (2804 <cpu_irq_enter_critical+0x38>)
    27e0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    27e2:	4a07      	ldr	r2, [pc, #28]	; (2800 <cpu_irq_enter_critical+0x34>)
    27e4:	6813      	ldr	r3, [r2, #0]
    27e6:	3301      	adds	r3, #1
    27e8:	6013      	str	r3, [r2, #0]
}
    27ea:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    27ec:	b672      	cpsid	i
    27ee:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    27f2:	2200      	movs	r2, #0
    27f4:	4b04      	ldr	r3, [pc, #16]	; (2808 <cpu_irq_enter_critical+0x3c>)
    27f6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    27f8:	3201      	adds	r2, #1
    27fa:	4b02      	ldr	r3, [pc, #8]	; (2804 <cpu_irq_enter_critical+0x38>)
    27fc:	701a      	strb	r2, [r3, #0]
    27fe:	e7f0      	b.n	27e2 <cpu_irq_enter_critical+0x16>
    2800:	20000884 	.word	0x20000884
    2804:	20000888 	.word	0x20000888
    2808:	2000000d 	.word	0x2000000d

0000280c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    280c:	4b08      	ldr	r3, [pc, #32]	; (2830 <cpu_irq_leave_critical+0x24>)
    280e:	681a      	ldr	r2, [r3, #0]
    2810:	3a01      	subs	r2, #1
    2812:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2814:	681b      	ldr	r3, [r3, #0]
    2816:	2b00      	cmp	r3, #0
    2818:	d109      	bne.n	282e <cpu_irq_leave_critical+0x22>
    281a:	4b06      	ldr	r3, [pc, #24]	; (2834 <cpu_irq_leave_critical+0x28>)
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	2b00      	cmp	r3, #0
    2820:	d005      	beq.n	282e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2822:	2201      	movs	r2, #1
    2824:	4b04      	ldr	r3, [pc, #16]	; (2838 <cpu_irq_leave_critical+0x2c>)
    2826:	701a      	strb	r2, [r3, #0]
    2828:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    282c:	b662      	cpsie	i
	}
}
    282e:	4770      	bx	lr
    2830:	20000884 	.word	0x20000884
    2834:	20000888 	.word	0x20000888
    2838:	2000000d 	.word	0x2000000d

0000283c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    283c:	b510      	push	{r4, lr}
	switch (clock_source) {
    283e:	2808      	cmp	r0, #8
    2840:	d803      	bhi.n	284a <system_clock_source_get_hz+0xe>
    2842:	0080      	lsls	r0, r0, #2
    2844:	4b1b      	ldr	r3, [pc, #108]	; (28b4 <system_clock_source_get_hz+0x78>)
    2846:	581b      	ldr	r3, [r3, r0]
    2848:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    284a:	2000      	movs	r0, #0
    284c:	e030      	b.n	28b0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    284e:	4b1a      	ldr	r3, [pc, #104]	; (28b8 <system_clock_source_get_hz+0x7c>)
    2850:	6918      	ldr	r0, [r3, #16]
    2852:	e02d      	b.n	28b0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2854:	4b19      	ldr	r3, [pc, #100]	; (28bc <system_clock_source_get_hz+0x80>)
    2856:	6a1b      	ldr	r3, [r3, #32]
    2858:	059b      	lsls	r3, r3, #22
    285a:	0f9b      	lsrs	r3, r3, #30
    285c:	4818      	ldr	r0, [pc, #96]	; (28c0 <system_clock_source_get_hz+0x84>)
    285e:	40d8      	lsrs	r0, r3
    2860:	e026      	b.n	28b0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    2862:	4b15      	ldr	r3, [pc, #84]	; (28b8 <system_clock_source_get_hz+0x7c>)
    2864:	6958      	ldr	r0, [r3, #20]
    2866:	e023      	b.n	28b0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2868:	4b13      	ldr	r3, [pc, #76]	; (28b8 <system_clock_source_get_hz+0x7c>)
    286a:	681b      	ldr	r3, [r3, #0]
			return 0;
    286c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    286e:	079b      	lsls	r3, r3, #30
    2870:	d51e      	bpl.n	28b0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2872:	4912      	ldr	r1, [pc, #72]	; (28bc <system_clock_source_get_hz+0x80>)
    2874:	2210      	movs	r2, #16
    2876:	68cb      	ldr	r3, [r1, #12]
    2878:	421a      	tst	r2, r3
    287a:	d0fc      	beq.n	2876 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    287c:	4b0e      	ldr	r3, [pc, #56]	; (28b8 <system_clock_source_get_hz+0x7c>)
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	075b      	lsls	r3, r3, #29
    2882:	d401      	bmi.n	2888 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2884:	480f      	ldr	r0, [pc, #60]	; (28c4 <system_clock_source_get_hz+0x88>)
    2886:	e013      	b.n	28b0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2888:	2000      	movs	r0, #0
    288a:	4b0f      	ldr	r3, [pc, #60]	; (28c8 <system_clock_source_get_hz+0x8c>)
    288c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    288e:	4b0a      	ldr	r3, [pc, #40]	; (28b8 <system_clock_source_get_hz+0x7c>)
    2890:	689b      	ldr	r3, [r3, #8]
    2892:	041b      	lsls	r3, r3, #16
    2894:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2896:	4358      	muls	r0, r3
    2898:	e00a      	b.n	28b0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    289a:	2350      	movs	r3, #80	; 0x50
    289c:	4a07      	ldr	r2, [pc, #28]	; (28bc <system_clock_source_get_hz+0x80>)
    289e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    28a0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    28a2:	075b      	lsls	r3, r3, #29
    28a4:	d504      	bpl.n	28b0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    28a6:	4b04      	ldr	r3, [pc, #16]	; (28b8 <system_clock_source_get_hz+0x7c>)
    28a8:	68d8      	ldr	r0, [r3, #12]
    28aa:	e001      	b.n	28b0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    28ac:	2080      	movs	r0, #128	; 0x80
    28ae:	0200      	lsls	r0, r0, #8
	}
}
    28b0:	bd10      	pop	{r4, pc}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	0000329c 	.word	0x0000329c
    28b8:	2000088c 	.word	0x2000088c
    28bc:	40000800 	.word	0x40000800
    28c0:	007a1200 	.word	0x007a1200
    28c4:	02dc6c00 	.word	0x02dc6c00
    28c8:	00002c9d 	.word	0x00002c9d

000028cc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    28cc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    28ce:	490c      	ldr	r1, [pc, #48]	; (2900 <system_clock_source_osc8m_set_config+0x34>)
    28d0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    28d2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    28d4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    28d6:	7840      	ldrb	r0, [r0, #1]
    28d8:	2201      	movs	r2, #1
    28da:	4010      	ands	r0, r2
    28dc:	0180      	lsls	r0, r0, #6
    28de:	2640      	movs	r6, #64	; 0x40
    28e0:	43b3      	bics	r3, r6
    28e2:	4303      	orrs	r3, r0
    28e4:	402a      	ands	r2, r5
    28e6:	01d2      	lsls	r2, r2, #7
    28e8:	2080      	movs	r0, #128	; 0x80
    28ea:	4383      	bics	r3, r0
    28ec:	4313      	orrs	r3, r2
    28ee:	2203      	movs	r2, #3
    28f0:	4022      	ands	r2, r4
    28f2:	0212      	lsls	r2, r2, #8
    28f4:	4803      	ldr	r0, [pc, #12]	; (2904 <system_clock_source_osc8m_set_config+0x38>)
    28f6:	4003      	ands	r3, r0
    28f8:	4313      	orrs	r3, r2
    28fa:	620b      	str	r3, [r1, #32]
}
    28fc:	bd70      	pop	{r4, r5, r6, pc}
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	40000800 	.word	0x40000800
    2904:	fffffcff 	.word	0xfffffcff

00002908 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2908:	2808      	cmp	r0, #8
    290a:	d803      	bhi.n	2914 <system_clock_source_enable+0xc>
    290c:	0080      	lsls	r0, r0, #2
    290e:	4b25      	ldr	r3, [pc, #148]	; (29a4 <system_clock_source_enable+0x9c>)
    2910:	581b      	ldr	r3, [r3, r0]
    2912:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2914:	2017      	movs	r0, #23
    2916:	e044      	b.n	29a2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2918:	4a23      	ldr	r2, [pc, #140]	; (29a8 <system_clock_source_enable+0xa0>)
    291a:	6a13      	ldr	r3, [r2, #32]
    291c:	2102      	movs	r1, #2
    291e:	430b      	orrs	r3, r1
    2920:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2922:	2000      	movs	r0, #0
    2924:	e03d      	b.n	29a2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2926:	4a20      	ldr	r2, [pc, #128]	; (29a8 <system_clock_source_enable+0xa0>)
    2928:	6993      	ldr	r3, [r2, #24]
    292a:	2102      	movs	r1, #2
    292c:	430b      	orrs	r3, r1
    292e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2930:	2000      	movs	r0, #0
		break;
    2932:	e036      	b.n	29a2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2934:	4a1c      	ldr	r2, [pc, #112]	; (29a8 <system_clock_source_enable+0xa0>)
    2936:	8a13      	ldrh	r3, [r2, #16]
    2938:	2102      	movs	r1, #2
    293a:	430b      	orrs	r3, r1
    293c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    293e:	2000      	movs	r0, #0
		break;
    2940:	e02f      	b.n	29a2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2942:	4a19      	ldr	r2, [pc, #100]	; (29a8 <system_clock_source_enable+0xa0>)
    2944:	8a93      	ldrh	r3, [r2, #20]
    2946:	2102      	movs	r1, #2
    2948:	430b      	orrs	r3, r1
    294a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    294c:	2000      	movs	r0, #0
		break;
    294e:	e028      	b.n	29a2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2950:	4916      	ldr	r1, [pc, #88]	; (29ac <system_clock_source_enable+0xa4>)
    2952:	680b      	ldr	r3, [r1, #0]
    2954:	2202      	movs	r2, #2
    2956:	4313      	orrs	r3, r2
    2958:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    295a:	4b13      	ldr	r3, [pc, #76]	; (29a8 <system_clock_source_enable+0xa0>)
    295c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    295e:	0019      	movs	r1, r3
    2960:	320e      	adds	r2, #14
    2962:	68cb      	ldr	r3, [r1, #12]
    2964:	421a      	tst	r2, r3
    2966:	d0fc      	beq.n	2962 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2968:	4a10      	ldr	r2, [pc, #64]	; (29ac <system_clock_source_enable+0xa4>)
    296a:	6891      	ldr	r1, [r2, #8]
    296c:	4b0e      	ldr	r3, [pc, #56]	; (29a8 <system_clock_source_enable+0xa0>)
    296e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2970:	6852      	ldr	r2, [r2, #4]
    2972:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2974:	2200      	movs	r2, #0
    2976:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2978:	0019      	movs	r1, r3
    297a:	3210      	adds	r2, #16
    297c:	68cb      	ldr	r3, [r1, #12]
    297e:	421a      	tst	r2, r3
    2980:	d0fc      	beq.n	297c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2982:	4b0a      	ldr	r3, [pc, #40]	; (29ac <system_clock_source_enable+0xa4>)
    2984:	681b      	ldr	r3, [r3, #0]
    2986:	b29b      	uxth	r3, r3
    2988:	4a07      	ldr	r2, [pc, #28]	; (29a8 <system_clock_source_enable+0xa0>)
    298a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    298c:	2000      	movs	r0, #0
    298e:	e008      	b.n	29a2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2990:	4905      	ldr	r1, [pc, #20]	; (29a8 <system_clock_source_enable+0xa0>)
    2992:	2244      	movs	r2, #68	; 0x44
    2994:	5c8b      	ldrb	r3, [r1, r2]
    2996:	2002      	movs	r0, #2
    2998:	4303      	orrs	r3, r0
    299a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    299c:	2000      	movs	r0, #0
		break;
    299e:	e000      	b.n	29a2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    29a0:	2000      	movs	r0, #0
}
    29a2:	4770      	bx	lr
    29a4:	000032c0 	.word	0x000032c0
    29a8:	40000800 	.word	0x40000800
    29ac:	2000088c 	.word	0x2000088c

000029b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    29b0:	b530      	push	{r4, r5, lr}
    29b2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    29b4:	22c2      	movs	r2, #194	; 0xc2
    29b6:	00d2      	lsls	r2, r2, #3
    29b8:	4b1a      	ldr	r3, [pc, #104]	; (2a24 <system_clock_init+0x74>)
    29ba:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    29bc:	4a1a      	ldr	r2, [pc, #104]	; (2a28 <system_clock_init+0x78>)
    29be:	6853      	ldr	r3, [r2, #4]
    29c0:	211e      	movs	r1, #30
    29c2:	438b      	bics	r3, r1
    29c4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    29c6:	2301      	movs	r3, #1
    29c8:	466a      	mov	r2, sp
    29ca:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    29cc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    29ce:	4d17      	ldr	r5, [pc, #92]	; (2a2c <system_clock_init+0x7c>)
    29d0:	b2e0      	uxtb	r0, r4
    29d2:	4669      	mov	r1, sp
    29d4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    29d6:	3401      	adds	r4, #1
    29d8:	2c18      	cmp	r4, #24
    29da:	d1f9      	bne.n	29d0 <system_clock_init+0x20>
	config->run_in_standby  = false;
    29dc:	a803      	add	r0, sp, #12
    29de:	2400      	movs	r4, #0
    29e0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    29e2:	2501      	movs	r5, #1
    29e4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    29e6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    29e8:	4b11      	ldr	r3, [pc, #68]	; (2a30 <system_clock_init+0x80>)
    29ea:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    29ec:	2006      	movs	r0, #6
    29ee:	4b11      	ldr	r3, [pc, #68]	; (2a34 <system_clock_init+0x84>)
    29f0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    29f2:	4b11      	ldr	r3, [pc, #68]	; (2a38 <system_clock_init+0x88>)
    29f4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    29f6:	4b11      	ldr	r3, [pc, #68]	; (2a3c <system_clock_init+0x8c>)
    29f8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    29fa:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    29fc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    29fe:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    2a00:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2a02:	466b      	mov	r3, sp
    2a04:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2a06:	2306      	movs	r3, #6
    2a08:	466a      	mov	r2, sp
    2a0a:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    2a0c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2a0e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2a10:	4669      	mov	r1, sp
    2a12:	2000      	movs	r0, #0
    2a14:	4b0a      	ldr	r3, [pc, #40]	; (2a40 <system_clock_init+0x90>)
    2a16:	4798      	blx	r3
    2a18:	2000      	movs	r0, #0
    2a1a:	4b0a      	ldr	r3, [pc, #40]	; (2a44 <system_clock_init+0x94>)
    2a1c:	4798      	blx	r3
#endif
}
    2a1e:	b005      	add	sp, #20
    2a20:	bd30      	pop	{r4, r5, pc}
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	40000800 	.word	0x40000800
    2a28:	41004000 	.word	0x41004000
    2a2c:	00002c81 	.word	0x00002c81
    2a30:	000028cd 	.word	0x000028cd
    2a34:	00002909 	.word	0x00002909
    2a38:	00002a49 	.word	0x00002a49
    2a3c:	40000400 	.word	0x40000400
    2a40:	00002a6d 	.word	0x00002a6d
    2a44:	00002b25 	.word	0x00002b25

00002a48 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2a48:	4a06      	ldr	r2, [pc, #24]	; (2a64 <system_gclk_init+0x1c>)
    2a4a:	6993      	ldr	r3, [r2, #24]
    2a4c:	2108      	movs	r1, #8
    2a4e:	430b      	orrs	r3, r1
    2a50:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2a52:	2201      	movs	r2, #1
    2a54:	4b04      	ldr	r3, [pc, #16]	; (2a68 <system_gclk_init+0x20>)
    2a56:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2a58:	0019      	movs	r1, r3
    2a5a:	780b      	ldrb	r3, [r1, #0]
    2a5c:	4213      	tst	r3, r2
    2a5e:	d1fc      	bne.n	2a5a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2a60:	4770      	bx	lr
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	40000400 	.word	0x40000400
    2a68:	40000c00 	.word	0x40000c00

00002a6c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2a6c:	b570      	push	{r4, r5, r6, lr}
    2a6e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2a70:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2a72:	780d      	ldrb	r5, [r1, #0]
    2a74:	022d      	lsls	r5, r5, #8
    2a76:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2a78:	784b      	ldrb	r3, [r1, #1]
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d002      	beq.n	2a84 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2a7e:	2380      	movs	r3, #128	; 0x80
    2a80:	02db      	lsls	r3, r3, #11
    2a82:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2a84:	7a4b      	ldrb	r3, [r1, #9]
    2a86:	2b00      	cmp	r3, #0
    2a88:	d002      	beq.n	2a90 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2a8a:	2380      	movs	r3, #128	; 0x80
    2a8c:	031b      	lsls	r3, r3, #12
    2a8e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2a90:	6848      	ldr	r0, [r1, #4]
    2a92:	2801      	cmp	r0, #1
    2a94:	d910      	bls.n	2ab8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2a96:	1e43      	subs	r3, r0, #1
    2a98:	4218      	tst	r0, r3
    2a9a:	d134      	bne.n	2b06 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2a9c:	2802      	cmp	r0, #2
    2a9e:	d930      	bls.n	2b02 <system_gclk_gen_set_config+0x96>
    2aa0:	2302      	movs	r3, #2
    2aa2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2aa4:	3201      	adds	r2, #1
						mask <<= 1) {
    2aa6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2aa8:	4298      	cmp	r0, r3
    2aaa:	d8fb      	bhi.n	2aa4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2aac:	0212      	lsls	r2, r2, #8
    2aae:	4332      	orrs	r2, r6
    2ab0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2ab2:	2380      	movs	r3, #128	; 0x80
    2ab4:	035b      	lsls	r3, r3, #13
    2ab6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2ab8:	7a0b      	ldrb	r3, [r1, #8]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d002      	beq.n	2ac4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2abe:	2380      	movs	r3, #128	; 0x80
    2ac0:	039b      	lsls	r3, r3, #14
    2ac2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ac4:	4a13      	ldr	r2, [pc, #76]	; (2b14 <system_gclk_gen_set_config+0xa8>)
    2ac6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2ac8:	b25b      	sxtb	r3, r3
    2aca:	2b00      	cmp	r3, #0
    2acc:	dbfb      	blt.n	2ac6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2ace:	4b12      	ldr	r3, [pc, #72]	; (2b18 <system_gclk_gen_set_config+0xac>)
    2ad0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ad2:	4b12      	ldr	r3, [pc, #72]	; (2b1c <system_gclk_gen_set_config+0xb0>)
    2ad4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ad6:	4a0f      	ldr	r2, [pc, #60]	; (2b14 <system_gclk_gen_set_config+0xa8>)
    2ad8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2ada:	b25b      	sxtb	r3, r3
    2adc:	2b00      	cmp	r3, #0
    2ade:	dbfb      	blt.n	2ad8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2ae0:	4b0c      	ldr	r3, [pc, #48]	; (2b14 <system_gclk_gen_set_config+0xa8>)
    2ae2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ae4:	001a      	movs	r2, r3
    2ae6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2ae8:	b25b      	sxtb	r3, r3
    2aea:	2b00      	cmp	r3, #0
    2aec:	dbfb      	blt.n	2ae6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2aee:	4a09      	ldr	r2, [pc, #36]	; (2b14 <system_gclk_gen_set_config+0xa8>)
    2af0:	6853      	ldr	r3, [r2, #4]
    2af2:	2180      	movs	r1, #128	; 0x80
    2af4:	0249      	lsls	r1, r1, #9
    2af6:	400b      	ands	r3, r1
    2af8:	431d      	orrs	r5, r3
    2afa:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2afc:	4b08      	ldr	r3, [pc, #32]	; (2b20 <system_gclk_gen_set_config+0xb4>)
    2afe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b00:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2b02:	2200      	movs	r2, #0
    2b04:	e7d2      	b.n	2aac <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2b06:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2b08:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2b0a:	2380      	movs	r3, #128	; 0x80
    2b0c:	029b      	lsls	r3, r3, #10
    2b0e:	431d      	orrs	r5, r3
    2b10:	e7d2      	b.n	2ab8 <system_gclk_gen_set_config+0x4c>
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	40000c00 	.word	0x40000c00
    2b18:	000027cd 	.word	0x000027cd
    2b1c:	40000c08 	.word	0x40000c08
    2b20:	0000280d 	.word	0x0000280d

00002b24 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2b24:	b510      	push	{r4, lr}
    2b26:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b28:	4a0b      	ldr	r2, [pc, #44]	; (2b58 <system_gclk_gen_enable+0x34>)
    2b2a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b2c:	b25b      	sxtb	r3, r3
    2b2e:	2b00      	cmp	r3, #0
    2b30:	dbfb      	blt.n	2b2a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2b32:	4b0a      	ldr	r3, [pc, #40]	; (2b5c <system_gclk_gen_enable+0x38>)
    2b34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b36:	4b0a      	ldr	r3, [pc, #40]	; (2b60 <system_gclk_gen_enable+0x3c>)
    2b38:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b3a:	4a07      	ldr	r2, [pc, #28]	; (2b58 <system_gclk_gen_enable+0x34>)
    2b3c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b3e:	b25b      	sxtb	r3, r3
    2b40:	2b00      	cmp	r3, #0
    2b42:	dbfb      	blt.n	2b3c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2b44:	4a04      	ldr	r2, [pc, #16]	; (2b58 <system_gclk_gen_enable+0x34>)
    2b46:	6851      	ldr	r1, [r2, #4]
    2b48:	2380      	movs	r3, #128	; 0x80
    2b4a:	025b      	lsls	r3, r3, #9
    2b4c:	430b      	orrs	r3, r1
    2b4e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2b50:	4b04      	ldr	r3, [pc, #16]	; (2b64 <system_gclk_gen_enable+0x40>)
    2b52:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b54:	bd10      	pop	{r4, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	40000c00 	.word	0x40000c00
    2b5c:	000027cd 	.word	0x000027cd
    2b60:	40000c04 	.word	0x40000c04
    2b64:	0000280d 	.word	0x0000280d

00002b68 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2b68:	b570      	push	{r4, r5, r6, lr}
    2b6a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b6c:	4a1a      	ldr	r2, [pc, #104]	; (2bd8 <system_gclk_gen_get_hz+0x70>)
    2b6e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b70:	b25b      	sxtb	r3, r3
    2b72:	2b00      	cmp	r3, #0
    2b74:	dbfb      	blt.n	2b6e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2b76:	4b19      	ldr	r3, [pc, #100]	; (2bdc <system_gclk_gen_get_hz+0x74>)
    2b78:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b7a:	4b19      	ldr	r3, [pc, #100]	; (2be0 <system_gclk_gen_get_hz+0x78>)
    2b7c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b7e:	4a16      	ldr	r2, [pc, #88]	; (2bd8 <system_gclk_gen_get_hz+0x70>)
    2b80:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2b82:	b25b      	sxtb	r3, r3
    2b84:	2b00      	cmp	r3, #0
    2b86:	dbfb      	blt.n	2b80 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2b88:	4e13      	ldr	r6, [pc, #76]	; (2bd8 <system_gclk_gen_get_hz+0x70>)
    2b8a:	6870      	ldr	r0, [r6, #4]
    2b8c:	04c0      	lsls	r0, r0, #19
    2b8e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2b90:	4b14      	ldr	r3, [pc, #80]	; (2be4 <system_gclk_gen_get_hz+0x7c>)
    2b92:	4798      	blx	r3
    2b94:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2b96:	4b12      	ldr	r3, [pc, #72]	; (2be0 <system_gclk_gen_get_hz+0x78>)
    2b98:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2b9a:	6876      	ldr	r6, [r6, #4]
    2b9c:	02f6      	lsls	r6, r6, #11
    2b9e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ba0:	4b11      	ldr	r3, [pc, #68]	; (2be8 <system_gclk_gen_get_hz+0x80>)
    2ba2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ba4:	4a0c      	ldr	r2, [pc, #48]	; (2bd8 <system_gclk_gen_get_hz+0x70>)
    2ba6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2ba8:	b25b      	sxtb	r3, r3
    2baa:	2b00      	cmp	r3, #0
    2bac:	dbfb      	blt.n	2ba6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2bae:	4b0a      	ldr	r3, [pc, #40]	; (2bd8 <system_gclk_gen_get_hz+0x70>)
    2bb0:	689c      	ldr	r4, [r3, #8]
    2bb2:	0224      	lsls	r4, r4, #8
    2bb4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2bb6:	4b0d      	ldr	r3, [pc, #52]	; (2bec <system_gclk_gen_get_hz+0x84>)
    2bb8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2bba:	2e00      	cmp	r6, #0
    2bbc:	d107      	bne.n	2bce <system_gclk_gen_get_hz+0x66>
    2bbe:	2c01      	cmp	r4, #1
    2bc0:	d907      	bls.n	2bd2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2bc2:	0021      	movs	r1, r4
    2bc4:	0028      	movs	r0, r5
    2bc6:	4b0a      	ldr	r3, [pc, #40]	; (2bf0 <system_gclk_gen_get_hz+0x88>)
    2bc8:	4798      	blx	r3
    2bca:	0005      	movs	r5, r0
    2bcc:	e001      	b.n	2bd2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2bce:	3401      	adds	r4, #1
    2bd0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2bd2:	0028      	movs	r0, r5
    2bd4:	bd70      	pop	{r4, r5, r6, pc}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	40000c00 	.word	0x40000c00
    2bdc:	000027cd 	.word	0x000027cd
    2be0:	40000c04 	.word	0x40000c04
    2be4:	0000283d 	.word	0x0000283d
    2be8:	40000c08 	.word	0x40000c08
    2bec:	0000280d 	.word	0x0000280d
    2bf0:	00002ead 	.word	0x00002ead

00002bf4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2bf4:	b510      	push	{r4, lr}
    2bf6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2bf8:	4b06      	ldr	r3, [pc, #24]	; (2c14 <system_gclk_chan_enable+0x20>)
    2bfa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2bfc:	4b06      	ldr	r3, [pc, #24]	; (2c18 <system_gclk_chan_enable+0x24>)
    2bfe:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2c00:	4a06      	ldr	r2, [pc, #24]	; (2c1c <system_gclk_chan_enable+0x28>)
    2c02:	8853      	ldrh	r3, [r2, #2]
    2c04:	2180      	movs	r1, #128	; 0x80
    2c06:	01c9      	lsls	r1, r1, #7
    2c08:	430b      	orrs	r3, r1
    2c0a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2c0c:	4b04      	ldr	r3, [pc, #16]	; (2c20 <system_gclk_chan_enable+0x2c>)
    2c0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c10:	bd10      	pop	{r4, pc}
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	000027cd 	.word	0x000027cd
    2c18:	40000c02 	.word	0x40000c02
    2c1c:	40000c00 	.word	0x40000c00
    2c20:	0000280d 	.word	0x0000280d

00002c24 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2c24:	b510      	push	{r4, lr}
    2c26:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2c28:	4b0f      	ldr	r3, [pc, #60]	; (2c68 <system_gclk_chan_disable+0x44>)
    2c2a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2c2c:	4b0f      	ldr	r3, [pc, #60]	; (2c6c <system_gclk_chan_disable+0x48>)
    2c2e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2c30:	4a0f      	ldr	r2, [pc, #60]	; (2c70 <system_gclk_chan_disable+0x4c>)
    2c32:	8853      	ldrh	r3, [r2, #2]
    2c34:	051b      	lsls	r3, r3, #20
    2c36:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2c38:	8853      	ldrh	r3, [r2, #2]
    2c3a:	490e      	ldr	r1, [pc, #56]	; (2c74 <system_gclk_chan_disable+0x50>)
    2c3c:	400b      	ands	r3, r1
    2c3e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2c40:	8853      	ldrh	r3, [r2, #2]
    2c42:	490d      	ldr	r1, [pc, #52]	; (2c78 <system_gclk_chan_disable+0x54>)
    2c44:	400b      	ands	r3, r1
    2c46:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2c48:	0011      	movs	r1, r2
    2c4a:	2280      	movs	r2, #128	; 0x80
    2c4c:	01d2      	lsls	r2, r2, #7
    2c4e:	884b      	ldrh	r3, [r1, #2]
    2c50:	4213      	tst	r3, r2
    2c52:	d1fc      	bne.n	2c4e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2c54:	4906      	ldr	r1, [pc, #24]	; (2c70 <system_gclk_chan_disable+0x4c>)
    2c56:	884a      	ldrh	r2, [r1, #2]
    2c58:	0203      	lsls	r3, r0, #8
    2c5a:	4806      	ldr	r0, [pc, #24]	; (2c74 <system_gclk_chan_disable+0x50>)
    2c5c:	4002      	ands	r2, r0
    2c5e:	4313      	orrs	r3, r2
    2c60:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2c62:	4b06      	ldr	r3, [pc, #24]	; (2c7c <system_gclk_chan_disable+0x58>)
    2c64:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c66:	bd10      	pop	{r4, pc}
    2c68:	000027cd 	.word	0x000027cd
    2c6c:	40000c02 	.word	0x40000c02
    2c70:	40000c00 	.word	0x40000c00
    2c74:	fffff0ff 	.word	0xfffff0ff
    2c78:	ffffbfff 	.word	0xffffbfff
    2c7c:	0000280d 	.word	0x0000280d

00002c80 <system_gclk_chan_set_config>:
{
    2c80:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2c82:	780c      	ldrb	r4, [r1, #0]
    2c84:	0224      	lsls	r4, r4, #8
    2c86:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2c88:	4b02      	ldr	r3, [pc, #8]	; (2c94 <system_gclk_chan_set_config+0x14>)
    2c8a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2c8c:	b2a4      	uxth	r4, r4
    2c8e:	4b02      	ldr	r3, [pc, #8]	; (2c98 <system_gclk_chan_set_config+0x18>)
    2c90:	805c      	strh	r4, [r3, #2]
}
    2c92:	bd10      	pop	{r4, pc}
    2c94:	00002c25 	.word	0x00002c25
    2c98:	40000c00 	.word	0x40000c00

00002c9c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2c9c:	b510      	push	{r4, lr}
    2c9e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ca0:	4b06      	ldr	r3, [pc, #24]	; (2cbc <system_gclk_chan_get_hz+0x20>)
    2ca2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ca4:	4b06      	ldr	r3, [pc, #24]	; (2cc0 <system_gclk_chan_get_hz+0x24>)
    2ca6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2ca8:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <system_gclk_chan_get_hz+0x28>)
    2caa:	885c      	ldrh	r4, [r3, #2]
    2cac:	0524      	lsls	r4, r4, #20
    2cae:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2cb0:	4b05      	ldr	r3, [pc, #20]	; (2cc8 <system_gclk_chan_get_hz+0x2c>)
    2cb2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2cb4:	0020      	movs	r0, r4
    2cb6:	4b05      	ldr	r3, [pc, #20]	; (2ccc <system_gclk_chan_get_hz+0x30>)
    2cb8:	4798      	blx	r3
}
    2cba:	bd10      	pop	{r4, pc}
    2cbc:	000027cd 	.word	0x000027cd
    2cc0:	40000c02 	.word	0x40000c02
    2cc4:	40000c00 	.word	0x40000c00
    2cc8:	0000280d 	.word	0x0000280d
    2ccc:	00002b69 	.word	0x00002b69

00002cd0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2cd0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2cd2:	78d3      	ldrb	r3, [r2, #3]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d135      	bne.n	2d44 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2cd8:	7813      	ldrb	r3, [r2, #0]
    2cda:	2b80      	cmp	r3, #128	; 0x80
    2cdc:	d029      	beq.n	2d32 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2cde:	061b      	lsls	r3, r3, #24
    2ce0:	2480      	movs	r4, #128	; 0x80
    2ce2:	0264      	lsls	r4, r4, #9
    2ce4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2ce6:	7854      	ldrb	r4, [r2, #1]
    2ce8:	2502      	movs	r5, #2
    2cea:	43ac      	bics	r4, r5
    2cec:	d106      	bne.n	2cfc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2cee:	7894      	ldrb	r4, [r2, #2]
    2cf0:	2c00      	cmp	r4, #0
    2cf2:	d120      	bne.n	2d36 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2cf4:	2480      	movs	r4, #128	; 0x80
    2cf6:	02a4      	lsls	r4, r4, #10
    2cf8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2cfa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2cfc:	7854      	ldrb	r4, [r2, #1]
    2cfe:	3c01      	subs	r4, #1
    2d00:	2c01      	cmp	r4, #1
    2d02:	d91c      	bls.n	2d3e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d04:	040d      	lsls	r5, r1, #16
    2d06:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d08:	24a0      	movs	r4, #160	; 0xa0
    2d0a:	05e4      	lsls	r4, r4, #23
    2d0c:	432c      	orrs	r4, r5
    2d0e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d10:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d12:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d14:	24d0      	movs	r4, #208	; 0xd0
    2d16:	0624      	lsls	r4, r4, #24
    2d18:	432c      	orrs	r4, r5
    2d1a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d1c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2d1e:	78d4      	ldrb	r4, [r2, #3]
    2d20:	2c00      	cmp	r4, #0
    2d22:	d122      	bne.n	2d6a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2d24:	035b      	lsls	r3, r3, #13
    2d26:	d51c      	bpl.n	2d62 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2d28:	7893      	ldrb	r3, [r2, #2]
    2d2a:	2b01      	cmp	r3, #1
    2d2c:	d01e      	beq.n	2d6c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2d2e:	6141      	str	r1, [r0, #20]
    2d30:	e017      	b.n	2d62 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2d32:	2300      	movs	r3, #0
    2d34:	e7d7      	b.n	2ce6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2d36:	24c0      	movs	r4, #192	; 0xc0
    2d38:	02e4      	lsls	r4, r4, #11
    2d3a:	4323      	orrs	r3, r4
    2d3c:	e7dd      	b.n	2cfa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2d3e:	4c0d      	ldr	r4, [pc, #52]	; (2d74 <_system_pinmux_config+0xa4>)
    2d40:	4023      	ands	r3, r4
    2d42:	e7df      	b.n	2d04 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2d44:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2d46:	040c      	lsls	r4, r1, #16
    2d48:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2d4a:	23a0      	movs	r3, #160	; 0xa0
    2d4c:	05db      	lsls	r3, r3, #23
    2d4e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d50:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2d52:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2d54:	23d0      	movs	r3, #208	; 0xd0
    2d56:	061b      	lsls	r3, r3, #24
    2d58:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2d5a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2d5c:	78d3      	ldrb	r3, [r2, #3]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d103      	bne.n	2d6a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2d62:	7853      	ldrb	r3, [r2, #1]
    2d64:	3b01      	subs	r3, #1
    2d66:	2b01      	cmp	r3, #1
    2d68:	d902      	bls.n	2d70 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2d6a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2d6c:	6181      	str	r1, [r0, #24]
    2d6e:	e7f8      	b.n	2d62 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2d70:	6081      	str	r1, [r0, #8]
}
    2d72:	e7fa      	b.n	2d6a <_system_pinmux_config+0x9a>
    2d74:	fffbffff 	.word	0xfffbffff

00002d78 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2d78:	b510      	push	{r4, lr}
    2d7a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2d7c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2d7e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2d80:	2900      	cmp	r1, #0
    2d82:	d104      	bne.n	2d8e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2d84:	0943      	lsrs	r3, r0, #5
    2d86:	01db      	lsls	r3, r3, #7
    2d88:	4905      	ldr	r1, [pc, #20]	; (2da0 <system_pinmux_pin_set_config+0x28>)
    2d8a:	468c      	mov	ip, r1
    2d8c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2d8e:	241f      	movs	r4, #31
    2d90:	4020      	ands	r0, r4
    2d92:	2101      	movs	r1, #1
    2d94:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2d96:	0018      	movs	r0, r3
    2d98:	4b02      	ldr	r3, [pc, #8]	; (2da4 <system_pinmux_pin_set_config+0x2c>)
    2d9a:	4798      	blx	r3
}
    2d9c:	bd10      	pop	{r4, pc}
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	41004400 	.word	0x41004400
    2da4:	00002cd1 	.word	0x00002cd1

00002da8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2da8:	4770      	bx	lr
	...

00002dac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2dac:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2dae:	4b05      	ldr	r3, [pc, #20]	; (2dc4 <system_init+0x18>)
    2db0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2db2:	4b05      	ldr	r3, [pc, #20]	; (2dc8 <system_init+0x1c>)
    2db4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2db6:	4b05      	ldr	r3, [pc, #20]	; (2dcc <system_init+0x20>)
    2db8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2dba:	4b05      	ldr	r3, [pc, #20]	; (2dd0 <system_init+0x24>)
    2dbc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2dbe:	4b05      	ldr	r3, [pc, #20]	; (2dd4 <system_init+0x28>)
    2dc0:	4798      	blx	r3
}
    2dc2:	bd10      	pop	{r4, pc}
    2dc4:	000029b1 	.word	0x000029b1
    2dc8:	000027c9 	.word	0x000027c9
    2dcc:	00002da9 	.word	0x00002da9
    2dd0:	00000199 	.word	0x00000199
    2dd4:	00002da9 	.word	0x00002da9

00002dd8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2dd8:	e7fe      	b.n	2dd8 <Dummy_Handler>
	...

00002ddc <Reset_Handler>:
{
    2ddc:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    2dde:	4a26      	ldr	r2, [pc, #152]	; (2e78 <Reset_Handler+0x9c>)
    2de0:	4b26      	ldr	r3, [pc, #152]	; (2e7c <Reset_Handler+0xa0>)
    2de2:	429a      	cmp	r2, r3
    2de4:	d011      	beq.n	2e0a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2de6:	001a      	movs	r2, r3
    2de8:	4b25      	ldr	r3, [pc, #148]	; (2e80 <Reset_Handler+0xa4>)
    2dea:	429a      	cmp	r2, r3
    2dec:	d20d      	bcs.n	2e0a <Reset_Handler+0x2e>
    2dee:	4a25      	ldr	r2, [pc, #148]	; (2e84 <Reset_Handler+0xa8>)
    2df0:	3303      	adds	r3, #3
    2df2:	1a9b      	subs	r3, r3, r2
    2df4:	089b      	lsrs	r3, r3, #2
    2df6:	3301      	adds	r3, #1
    2df8:	009b      	lsls	r3, r3, #2
    2dfa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2dfc:	481f      	ldr	r0, [pc, #124]	; (2e7c <Reset_Handler+0xa0>)
    2dfe:	491e      	ldr	r1, [pc, #120]	; (2e78 <Reset_Handler+0x9c>)
    2e00:	588c      	ldr	r4, [r1, r2]
    2e02:	5084      	str	r4, [r0, r2]
    2e04:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2e06:	429a      	cmp	r2, r3
    2e08:	d1fa      	bne.n	2e00 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2e0a:	4a1f      	ldr	r2, [pc, #124]	; (2e88 <Reset_Handler+0xac>)
    2e0c:	4b1f      	ldr	r3, [pc, #124]	; (2e8c <Reset_Handler+0xb0>)
    2e0e:	429a      	cmp	r2, r3
    2e10:	d20a      	bcs.n	2e28 <Reset_Handler+0x4c>
    2e12:	43d3      	mvns	r3, r2
    2e14:	491d      	ldr	r1, [pc, #116]	; (2e8c <Reset_Handler+0xb0>)
    2e16:	185b      	adds	r3, r3, r1
    2e18:	2103      	movs	r1, #3
    2e1a:	438b      	bics	r3, r1
    2e1c:	3304      	adds	r3, #4
    2e1e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2e20:	2100      	movs	r1, #0
    2e22:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2e24:	4293      	cmp	r3, r2
    2e26:	d1fc      	bne.n	2e22 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2e28:	4a19      	ldr	r2, [pc, #100]	; (2e90 <Reset_Handler+0xb4>)
    2e2a:	21ff      	movs	r1, #255	; 0xff
    2e2c:	4b19      	ldr	r3, [pc, #100]	; (2e94 <Reset_Handler+0xb8>)
    2e2e:	438b      	bics	r3, r1
    2e30:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2e32:	39fd      	subs	r1, #253	; 0xfd
    2e34:	2390      	movs	r3, #144	; 0x90
    2e36:	005b      	lsls	r3, r3, #1
    2e38:	4a17      	ldr	r2, [pc, #92]	; (2e98 <Reset_Handler+0xbc>)
    2e3a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2e3c:	4b17      	ldr	r3, [pc, #92]	; (2e9c <Reset_Handler+0xc0>)
    2e3e:	7b9a      	ldrb	r2, [r3, #14]
    2e40:	312e      	adds	r1, #46	; 0x2e
    2e42:	438a      	bics	r2, r1
    2e44:	2120      	movs	r1, #32
    2e46:	430a      	orrs	r2, r1
    2e48:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2e4a:	7b9a      	ldrb	r2, [r3, #14]
    2e4c:	210c      	movs	r1, #12
    2e4e:	438a      	bics	r2, r1
    2e50:	2108      	movs	r1, #8
    2e52:	430a      	orrs	r2, r1
    2e54:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2e56:	7b9a      	ldrb	r2, [r3, #14]
    2e58:	2103      	movs	r1, #3
    2e5a:	438a      	bics	r2, r1
    2e5c:	2102      	movs	r1, #2
    2e5e:	430a      	orrs	r2, r1
    2e60:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2e62:	4a0f      	ldr	r2, [pc, #60]	; (2ea0 <Reset_Handler+0xc4>)
    2e64:	6853      	ldr	r3, [r2, #4]
    2e66:	2180      	movs	r1, #128	; 0x80
    2e68:	430b      	orrs	r3, r1
    2e6a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2e6c:	4b0d      	ldr	r3, [pc, #52]	; (2ea4 <Reset_Handler+0xc8>)
    2e6e:	4798      	blx	r3
        main();
    2e70:	4b0d      	ldr	r3, [pc, #52]	; (2ea8 <Reset_Handler+0xcc>)
    2e72:	4798      	blx	r3
    2e74:	e7fe      	b.n	2e74 <Reset_Handler+0x98>
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	00003304 	.word	0x00003304
    2e7c:	20000000 	.word	0x20000000
    2e80:	20000010 	.word	0x20000010
    2e84:	20000004 	.word	0x20000004
    2e88:	20000010 	.word	0x20000010
    2e8c:	20000a30 	.word	0x20000a30
    2e90:	e000ed00 	.word	0xe000ed00
    2e94:	00000000 	.word	0x00000000
    2e98:	41007000 	.word	0x41007000
    2e9c:	41004800 	.word	0x41004800
    2ea0:	41004000 	.word	0x41004000
    2ea4:	000031ed 	.word	0x000031ed
    2ea8:	000024f5 	.word	0x000024f5

00002eac <__udivsi3>:
    2eac:	2200      	movs	r2, #0
    2eae:	0843      	lsrs	r3, r0, #1
    2eb0:	428b      	cmp	r3, r1
    2eb2:	d374      	bcc.n	2f9e <__udivsi3+0xf2>
    2eb4:	0903      	lsrs	r3, r0, #4
    2eb6:	428b      	cmp	r3, r1
    2eb8:	d35f      	bcc.n	2f7a <__udivsi3+0xce>
    2eba:	0a03      	lsrs	r3, r0, #8
    2ebc:	428b      	cmp	r3, r1
    2ebe:	d344      	bcc.n	2f4a <__udivsi3+0x9e>
    2ec0:	0b03      	lsrs	r3, r0, #12
    2ec2:	428b      	cmp	r3, r1
    2ec4:	d328      	bcc.n	2f18 <__udivsi3+0x6c>
    2ec6:	0c03      	lsrs	r3, r0, #16
    2ec8:	428b      	cmp	r3, r1
    2eca:	d30d      	bcc.n	2ee8 <__udivsi3+0x3c>
    2ecc:	22ff      	movs	r2, #255	; 0xff
    2ece:	0209      	lsls	r1, r1, #8
    2ed0:	ba12      	rev	r2, r2
    2ed2:	0c03      	lsrs	r3, r0, #16
    2ed4:	428b      	cmp	r3, r1
    2ed6:	d302      	bcc.n	2ede <__udivsi3+0x32>
    2ed8:	1212      	asrs	r2, r2, #8
    2eda:	0209      	lsls	r1, r1, #8
    2edc:	d065      	beq.n	2faa <__udivsi3+0xfe>
    2ede:	0b03      	lsrs	r3, r0, #12
    2ee0:	428b      	cmp	r3, r1
    2ee2:	d319      	bcc.n	2f18 <__udivsi3+0x6c>
    2ee4:	e000      	b.n	2ee8 <__udivsi3+0x3c>
    2ee6:	0a09      	lsrs	r1, r1, #8
    2ee8:	0bc3      	lsrs	r3, r0, #15
    2eea:	428b      	cmp	r3, r1
    2eec:	d301      	bcc.n	2ef2 <__udivsi3+0x46>
    2eee:	03cb      	lsls	r3, r1, #15
    2ef0:	1ac0      	subs	r0, r0, r3
    2ef2:	4152      	adcs	r2, r2
    2ef4:	0b83      	lsrs	r3, r0, #14
    2ef6:	428b      	cmp	r3, r1
    2ef8:	d301      	bcc.n	2efe <__udivsi3+0x52>
    2efa:	038b      	lsls	r3, r1, #14
    2efc:	1ac0      	subs	r0, r0, r3
    2efe:	4152      	adcs	r2, r2
    2f00:	0b43      	lsrs	r3, r0, #13
    2f02:	428b      	cmp	r3, r1
    2f04:	d301      	bcc.n	2f0a <__udivsi3+0x5e>
    2f06:	034b      	lsls	r3, r1, #13
    2f08:	1ac0      	subs	r0, r0, r3
    2f0a:	4152      	adcs	r2, r2
    2f0c:	0b03      	lsrs	r3, r0, #12
    2f0e:	428b      	cmp	r3, r1
    2f10:	d301      	bcc.n	2f16 <__udivsi3+0x6a>
    2f12:	030b      	lsls	r3, r1, #12
    2f14:	1ac0      	subs	r0, r0, r3
    2f16:	4152      	adcs	r2, r2
    2f18:	0ac3      	lsrs	r3, r0, #11
    2f1a:	428b      	cmp	r3, r1
    2f1c:	d301      	bcc.n	2f22 <__udivsi3+0x76>
    2f1e:	02cb      	lsls	r3, r1, #11
    2f20:	1ac0      	subs	r0, r0, r3
    2f22:	4152      	adcs	r2, r2
    2f24:	0a83      	lsrs	r3, r0, #10
    2f26:	428b      	cmp	r3, r1
    2f28:	d301      	bcc.n	2f2e <__udivsi3+0x82>
    2f2a:	028b      	lsls	r3, r1, #10
    2f2c:	1ac0      	subs	r0, r0, r3
    2f2e:	4152      	adcs	r2, r2
    2f30:	0a43      	lsrs	r3, r0, #9
    2f32:	428b      	cmp	r3, r1
    2f34:	d301      	bcc.n	2f3a <__udivsi3+0x8e>
    2f36:	024b      	lsls	r3, r1, #9
    2f38:	1ac0      	subs	r0, r0, r3
    2f3a:	4152      	adcs	r2, r2
    2f3c:	0a03      	lsrs	r3, r0, #8
    2f3e:	428b      	cmp	r3, r1
    2f40:	d301      	bcc.n	2f46 <__udivsi3+0x9a>
    2f42:	020b      	lsls	r3, r1, #8
    2f44:	1ac0      	subs	r0, r0, r3
    2f46:	4152      	adcs	r2, r2
    2f48:	d2cd      	bcs.n	2ee6 <__udivsi3+0x3a>
    2f4a:	09c3      	lsrs	r3, r0, #7
    2f4c:	428b      	cmp	r3, r1
    2f4e:	d301      	bcc.n	2f54 <__udivsi3+0xa8>
    2f50:	01cb      	lsls	r3, r1, #7
    2f52:	1ac0      	subs	r0, r0, r3
    2f54:	4152      	adcs	r2, r2
    2f56:	0983      	lsrs	r3, r0, #6
    2f58:	428b      	cmp	r3, r1
    2f5a:	d301      	bcc.n	2f60 <__udivsi3+0xb4>
    2f5c:	018b      	lsls	r3, r1, #6
    2f5e:	1ac0      	subs	r0, r0, r3
    2f60:	4152      	adcs	r2, r2
    2f62:	0943      	lsrs	r3, r0, #5
    2f64:	428b      	cmp	r3, r1
    2f66:	d301      	bcc.n	2f6c <__udivsi3+0xc0>
    2f68:	014b      	lsls	r3, r1, #5
    2f6a:	1ac0      	subs	r0, r0, r3
    2f6c:	4152      	adcs	r2, r2
    2f6e:	0903      	lsrs	r3, r0, #4
    2f70:	428b      	cmp	r3, r1
    2f72:	d301      	bcc.n	2f78 <__udivsi3+0xcc>
    2f74:	010b      	lsls	r3, r1, #4
    2f76:	1ac0      	subs	r0, r0, r3
    2f78:	4152      	adcs	r2, r2
    2f7a:	08c3      	lsrs	r3, r0, #3
    2f7c:	428b      	cmp	r3, r1
    2f7e:	d301      	bcc.n	2f84 <__udivsi3+0xd8>
    2f80:	00cb      	lsls	r3, r1, #3
    2f82:	1ac0      	subs	r0, r0, r3
    2f84:	4152      	adcs	r2, r2
    2f86:	0883      	lsrs	r3, r0, #2
    2f88:	428b      	cmp	r3, r1
    2f8a:	d301      	bcc.n	2f90 <__udivsi3+0xe4>
    2f8c:	008b      	lsls	r3, r1, #2
    2f8e:	1ac0      	subs	r0, r0, r3
    2f90:	4152      	adcs	r2, r2
    2f92:	0843      	lsrs	r3, r0, #1
    2f94:	428b      	cmp	r3, r1
    2f96:	d301      	bcc.n	2f9c <__udivsi3+0xf0>
    2f98:	004b      	lsls	r3, r1, #1
    2f9a:	1ac0      	subs	r0, r0, r3
    2f9c:	4152      	adcs	r2, r2
    2f9e:	1a41      	subs	r1, r0, r1
    2fa0:	d200      	bcs.n	2fa4 <__udivsi3+0xf8>
    2fa2:	4601      	mov	r1, r0
    2fa4:	4152      	adcs	r2, r2
    2fa6:	4610      	mov	r0, r2
    2fa8:	4770      	bx	lr
    2faa:	e7ff      	b.n	2fac <__udivsi3+0x100>
    2fac:	b501      	push	{r0, lr}
    2fae:	2000      	movs	r0, #0
    2fb0:	f000 f8f0 	bl	3194 <__aeabi_idiv0>
    2fb4:	bd02      	pop	{r1, pc}
    2fb6:	46c0      	nop			; (mov r8, r8)

00002fb8 <__aeabi_uidivmod>:
    2fb8:	2900      	cmp	r1, #0
    2fba:	d0f7      	beq.n	2fac <__udivsi3+0x100>
    2fbc:	e776      	b.n	2eac <__udivsi3>
    2fbe:	4770      	bx	lr

00002fc0 <__divsi3>:
    2fc0:	4603      	mov	r3, r0
    2fc2:	430b      	orrs	r3, r1
    2fc4:	d47f      	bmi.n	30c6 <__divsi3+0x106>
    2fc6:	2200      	movs	r2, #0
    2fc8:	0843      	lsrs	r3, r0, #1
    2fca:	428b      	cmp	r3, r1
    2fcc:	d374      	bcc.n	30b8 <__divsi3+0xf8>
    2fce:	0903      	lsrs	r3, r0, #4
    2fd0:	428b      	cmp	r3, r1
    2fd2:	d35f      	bcc.n	3094 <__divsi3+0xd4>
    2fd4:	0a03      	lsrs	r3, r0, #8
    2fd6:	428b      	cmp	r3, r1
    2fd8:	d344      	bcc.n	3064 <__divsi3+0xa4>
    2fda:	0b03      	lsrs	r3, r0, #12
    2fdc:	428b      	cmp	r3, r1
    2fde:	d328      	bcc.n	3032 <__divsi3+0x72>
    2fe0:	0c03      	lsrs	r3, r0, #16
    2fe2:	428b      	cmp	r3, r1
    2fe4:	d30d      	bcc.n	3002 <__divsi3+0x42>
    2fe6:	22ff      	movs	r2, #255	; 0xff
    2fe8:	0209      	lsls	r1, r1, #8
    2fea:	ba12      	rev	r2, r2
    2fec:	0c03      	lsrs	r3, r0, #16
    2fee:	428b      	cmp	r3, r1
    2ff0:	d302      	bcc.n	2ff8 <__divsi3+0x38>
    2ff2:	1212      	asrs	r2, r2, #8
    2ff4:	0209      	lsls	r1, r1, #8
    2ff6:	d065      	beq.n	30c4 <__divsi3+0x104>
    2ff8:	0b03      	lsrs	r3, r0, #12
    2ffa:	428b      	cmp	r3, r1
    2ffc:	d319      	bcc.n	3032 <__divsi3+0x72>
    2ffe:	e000      	b.n	3002 <__divsi3+0x42>
    3000:	0a09      	lsrs	r1, r1, #8
    3002:	0bc3      	lsrs	r3, r0, #15
    3004:	428b      	cmp	r3, r1
    3006:	d301      	bcc.n	300c <__divsi3+0x4c>
    3008:	03cb      	lsls	r3, r1, #15
    300a:	1ac0      	subs	r0, r0, r3
    300c:	4152      	adcs	r2, r2
    300e:	0b83      	lsrs	r3, r0, #14
    3010:	428b      	cmp	r3, r1
    3012:	d301      	bcc.n	3018 <__divsi3+0x58>
    3014:	038b      	lsls	r3, r1, #14
    3016:	1ac0      	subs	r0, r0, r3
    3018:	4152      	adcs	r2, r2
    301a:	0b43      	lsrs	r3, r0, #13
    301c:	428b      	cmp	r3, r1
    301e:	d301      	bcc.n	3024 <__divsi3+0x64>
    3020:	034b      	lsls	r3, r1, #13
    3022:	1ac0      	subs	r0, r0, r3
    3024:	4152      	adcs	r2, r2
    3026:	0b03      	lsrs	r3, r0, #12
    3028:	428b      	cmp	r3, r1
    302a:	d301      	bcc.n	3030 <__divsi3+0x70>
    302c:	030b      	lsls	r3, r1, #12
    302e:	1ac0      	subs	r0, r0, r3
    3030:	4152      	adcs	r2, r2
    3032:	0ac3      	lsrs	r3, r0, #11
    3034:	428b      	cmp	r3, r1
    3036:	d301      	bcc.n	303c <__divsi3+0x7c>
    3038:	02cb      	lsls	r3, r1, #11
    303a:	1ac0      	subs	r0, r0, r3
    303c:	4152      	adcs	r2, r2
    303e:	0a83      	lsrs	r3, r0, #10
    3040:	428b      	cmp	r3, r1
    3042:	d301      	bcc.n	3048 <__divsi3+0x88>
    3044:	028b      	lsls	r3, r1, #10
    3046:	1ac0      	subs	r0, r0, r3
    3048:	4152      	adcs	r2, r2
    304a:	0a43      	lsrs	r3, r0, #9
    304c:	428b      	cmp	r3, r1
    304e:	d301      	bcc.n	3054 <__divsi3+0x94>
    3050:	024b      	lsls	r3, r1, #9
    3052:	1ac0      	subs	r0, r0, r3
    3054:	4152      	adcs	r2, r2
    3056:	0a03      	lsrs	r3, r0, #8
    3058:	428b      	cmp	r3, r1
    305a:	d301      	bcc.n	3060 <__divsi3+0xa0>
    305c:	020b      	lsls	r3, r1, #8
    305e:	1ac0      	subs	r0, r0, r3
    3060:	4152      	adcs	r2, r2
    3062:	d2cd      	bcs.n	3000 <__divsi3+0x40>
    3064:	09c3      	lsrs	r3, r0, #7
    3066:	428b      	cmp	r3, r1
    3068:	d301      	bcc.n	306e <__divsi3+0xae>
    306a:	01cb      	lsls	r3, r1, #7
    306c:	1ac0      	subs	r0, r0, r3
    306e:	4152      	adcs	r2, r2
    3070:	0983      	lsrs	r3, r0, #6
    3072:	428b      	cmp	r3, r1
    3074:	d301      	bcc.n	307a <__divsi3+0xba>
    3076:	018b      	lsls	r3, r1, #6
    3078:	1ac0      	subs	r0, r0, r3
    307a:	4152      	adcs	r2, r2
    307c:	0943      	lsrs	r3, r0, #5
    307e:	428b      	cmp	r3, r1
    3080:	d301      	bcc.n	3086 <__divsi3+0xc6>
    3082:	014b      	lsls	r3, r1, #5
    3084:	1ac0      	subs	r0, r0, r3
    3086:	4152      	adcs	r2, r2
    3088:	0903      	lsrs	r3, r0, #4
    308a:	428b      	cmp	r3, r1
    308c:	d301      	bcc.n	3092 <__divsi3+0xd2>
    308e:	010b      	lsls	r3, r1, #4
    3090:	1ac0      	subs	r0, r0, r3
    3092:	4152      	adcs	r2, r2
    3094:	08c3      	lsrs	r3, r0, #3
    3096:	428b      	cmp	r3, r1
    3098:	d301      	bcc.n	309e <__divsi3+0xde>
    309a:	00cb      	lsls	r3, r1, #3
    309c:	1ac0      	subs	r0, r0, r3
    309e:	4152      	adcs	r2, r2
    30a0:	0883      	lsrs	r3, r0, #2
    30a2:	428b      	cmp	r3, r1
    30a4:	d301      	bcc.n	30aa <__divsi3+0xea>
    30a6:	008b      	lsls	r3, r1, #2
    30a8:	1ac0      	subs	r0, r0, r3
    30aa:	4152      	adcs	r2, r2
    30ac:	0843      	lsrs	r3, r0, #1
    30ae:	428b      	cmp	r3, r1
    30b0:	d301      	bcc.n	30b6 <__divsi3+0xf6>
    30b2:	004b      	lsls	r3, r1, #1
    30b4:	1ac0      	subs	r0, r0, r3
    30b6:	4152      	adcs	r2, r2
    30b8:	1a41      	subs	r1, r0, r1
    30ba:	d200      	bcs.n	30be <__divsi3+0xfe>
    30bc:	4601      	mov	r1, r0
    30be:	4152      	adcs	r2, r2
    30c0:	4610      	mov	r0, r2
    30c2:	4770      	bx	lr
    30c4:	e05d      	b.n	3182 <__divsi3+0x1c2>
    30c6:	0fca      	lsrs	r2, r1, #31
    30c8:	d000      	beq.n	30cc <__divsi3+0x10c>
    30ca:	4249      	negs	r1, r1
    30cc:	1003      	asrs	r3, r0, #32
    30ce:	d300      	bcc.n	30d2 <__divsi3+0x112>
    30d0:	4240      	negs	r0, r0
    30d2:	4053      	eors	r3, r2
    30d4:	2200      	movs	r2, #0
    30d6:	469c      	mov	ip, r3
    30d8:	0903      	lsrs	r3, r0, #4
    30da:	428b      	cmp	r3, r1
    30dc:	d32d      	bcc.n	313a <__divsi3+0x17a>
    30de:	0a03      	lsrs	r3, r0, #8
    30e0:	428b      	cmp	r3, r1
    30e2:	d312      	bcc.n	310a <__divsi3+0x14a>
    30e4:	22fc      	movs	r2, #252	; 0xfc
    30e6:	0189      	lsls	r1, r1, #6
    30e8:	ba12      	rev	r2, r2
    30ea:	0a03      	lsrs	r3, r0, #8
    30ec:	428b      	cmp	r3, r1
    30ee:	d30c      	bcc.n	310a <__divsi3+0x14a>
    30f0:	0189      	lsls	r1, r1, #6
    30f2:	1192      	asrs	r2, r2, #6
    30f4:	428b      	cmp	r3, r1
    30f6:	d308      	bcc.n	310a <__divsi3+0x14a>
    30f8:	0189      	lsls	r1, r1, #6
    30fa:	1192      	asrs	r2, r2, #6
    30fc:	428b      	cmp	r3, r1
    30fe:	d304      	bcc.n	310a <__divsi3+0x14a>
    3100:	0189      	lsls	r1, r1, #6
    3102:	d03a      	beq.n	317a <__divsi3+0x1ba>
    3104:	1192      	asrs	r2, r2, #6
    3106:	e000      	b.n	310a <__divsi3+0x14a>
    3108:	0989      	lsrs	r1, r1, #6
    310a:	09c3      	lsrs	r3, r0, #7
    310c:	428b      	cmp	r3, r1
    310e:	d301      	bcc.n	3114 <__divsi3+0x154>
    3110:	01cb      	lsls	r3, r1, #7
    3112:	1ac0      	subs	r0, r0, r3
    3114:	4152      	adcs	r2, r2
    3116:	0983      	lsrs	r3, r0, #6
    3118:	428b      	cmp	r3, r1
    311a:	d301      	bcc.n	3120 <__divsi3+0x160>
    311c:	018b      	lsls	r3, r1, #6
    311e:	1ac0      	subs	r0, r0, r3
    3120:	4152      	adcs	r2, r2
    3122:	0943      	lsrs	r3, r0, #5
    3124:	428b      	cmp	r3, r1
    3126:	d301      	bcc.n	312c <__divsi3+0x16c>
    3128:	014b      	lsls	r3, r1, #5
    312a:	1ac0      	subs	r0, r0, r3
    312c:	4152      	adcs	r2, r2
    312e:	0903      	lsrs	r3, r0, #4
    3130:	428b      	cmp	r3, r1
    3132:	d301      	bcc.n	3138 <__divsi3+0x178>
    3134:	010b      	lsls	r3, r1, #4
    3136:	1ac0      	subs	r0, r0, r3
    3138:	4152      	adcs	r2, r2
    313a:	08c3      	lsrs	r3, r0, #3
    313c:	428b      	cmp	r3, r1
    313e:	d301      	bcc.n	3144 <__divsi3+0x184>
    3140:	00cb      	lsls	r3, r1, #3
    3142:	1ac0      	subs	r0, r0, r3
    3144:	4152      	adcs	r2, r2
    3146:	0883      	lsrs	r3, r0, #2
    3148:	428b      	cmp	r3, r1
    314a:	d301      	bcc.n	3150 <__divsi3+0x190>
    314c:	008b      	lsls	r3, r1, #2
    314e:	1ac0      	subs	r0, r0, r3
    3150:	4152      	adcs	r2, r2
    3152:	d2d9      	bcs.n	3108 <__divsi3+0x148>
    3154:	0843      	lsrs	r3, r0, #1
    3156:	428b      	cmp	r3, r1
    3158:	d301      	bcc.n	315e <__divsi3+0x19e>
    315a:	004b      	lsls	r3, r1, #1
    315c:	1ac0      	subs	r0, r0, r3
    315e:	4152      	adcs	r2, r2
    3160:	1a41      	subs	r1, r0, r1
    3162:	d200      	bcs.n	3166 <__divsi3+0x1a6>
    3164:	4601      	mov	r1, r0
    3166:	4663      	mov	r3, ip
    3168:	4152      	adcs	r2, r2
    316a:	105b      	asrs	r3, r3, #1
    316c:	4610      	mov	r0, r2
    316e:	d301      	bcc.n	3174 <__divsi3+0x1b4>
    3170:	4240      	negs	r0, r0
    3172:	2b00      	cmp	r3, #0
    3174:	d500      	bpl.n	3178 <__divsi3+0x1b8>
    3176:	4249      	negs	r1, r1
    3178:	4770      	bx	lr
    317a:	4663      	mov	r3, ip
    317c:	105b      	asrs	r3, r3, #1
    317e:	d300      	bcc.n	3182 <__divsi3+0x1c2>
    3180:	4240      	negs	r0, r0
    3182:	b501      	push	{r0, lr}
    3184:	2000      	movs	r0, #0
    3186:	f000 f805 	bl	3194 <__aeabi_idiv0>
    318a:	bd02      	pop	{r1, pc}

0000318c <__aeabi_idivmod>:
    318c:	2900      	cmp	r1, #0
    318e:	d0f8      	beq.n	3182 <__divsi3+0x1c2>
    3190:	e716      	b.n	2fc0 <__divsi3>
    3192:	4770      	bx	lr

00003194 <__aeabi_idiv0>:
    3194:	4770      	bx	lr
    3196:	46c0      	nop			; (mov r8, r8)

00003198 <__aeabi_lmul>:
    3198:	b5f0      	push	{r4, r5, r6, r7, lr}
    319a:	46ce      	mov	lr, r9
    319c:	4647      	mov	r7, r8
    319e:	0415      	lsls	r5, r2, #16
    31a0:	0c2d      	lsrs	r5, r5, #16
    31a2:	002e      	movs	r6, r5
    31a4:	b580      	push	{r7, lr}
    31a6:	0407      	lsls	r7, r0, #16
    31a8:	0c14      	lsrs	r4, r2, #16
    31aa:	0c3f      	lsrs	r7, r7, #16
    31ac:	4699      	mov	r9, r3
    31ae:	0c03      	lsrs	r3, r0, #16
    31b0:	437e      	muls	r6, r7
    31b2:	435d      	muls	r5, r3
    31b4:	4367      	muls	r7, r4
    31b6:	4363      	muls	r3, r4
    31b8:	197f      	adds	r7, r7, r5
    31ba:	0c34      	lsrs	r4, r6, #16
    31bc:	19e4      	adds	r4, r4, r7
    31be:	469c      	mov	ip, r3
    31c0:	42a5      	cmp	r5, r4
    31c2:	d903      	bls.n	31cc <__aeabi_lmul+0x34>
    31c4:	2380      	movs	r3, #128	; 0x80
    31c6:	025b      	lsls	r3, r3, #9
    31c8:	4698      	mov	r8, r3
    31ca:	44c4      	add	ip, r8
    31cc:	464b      	mov	r3, r9
    31ce:	4351      	muls	r1, r2
    31d0:	4343      	muls	r3, r0
    31d2:	0436      	lsls	r6, r6, #16
    31d4:	0c36      	lsrs	r6, r6, #16
    31d6:	0c25      	lsrs	r5, r4, #16
    31d8:	0424      	lsls	r4, r4, #16
    31da:	4465      	add	r5, ip
    31dc:	19a4      	adds	r4, r4, r6
    31de:	1859      	adds	r1, r3, r1
    31e0:	1949      	adds	r1, r1, r5
    31e2:	0020      	movs	r0, r4
    31e4:	bc0c      	pop	{r2, r3}
    31e6:	4690      	mov	r8, r2
    31e8:	4699      	mov	r9, r3
    31ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000031ec <__libc_init_array>:
    31ec:	b570      	push	{r4, r5, r6, lr}
    31ee:	2600      	movs	r6, #0
    31f0:	4d0c      	ldr	r5, [pc, #48]	; (3224 <__libc_init_array+0x38>)
    31f2:	4c0d      	ldr	r4, [pc, #52]	; (3228 <__libc_init_array+0x3c>)
    31f4:	1b64      	subs	r4, r4, r5
    31f6:	10a4      	asrs	r4, r4, #2
    31f8:	42a6      	cmp	r6, r4
    31fa:	d109      	bne.n	3210 <__libc_init_array+0x24>
    31fc:	2600      	movs	r6, #0
    31fe:	f000 f871 	bl	32e4 <_init>
    3202:	4d0a      	ldr	r5, [pc, #40]	; (322c <__libc_init_array+0x40>)
    3204:	4c0a      	ldr	r4, [pc, #40]	; (3230 <__libc_init_array+0x44>)
    3206:	1b64      	subs	r4, r4, r5
    3208:	10a4      	asrs	r4, r4, #2
    320a:	42a6      	cmp	r6, r4
    320c:	d105      	bne.n	321a <__libc_init_array+0x2e>
    320e:	bd70      	pop	{r4, r5, r6, pc}
    3210:	00b3      	lsls	r3, r6, #2
    3212:	58eb      	ldr	r3, [r5, r3]
    3214:	4798      	blx	r3
    3216:	3601      	adds	r6, #1
    3218:	e7ee      	b.n	31f8 <__libc_init_array+0xc>
    321a:	00b3      	lsls	r3, r6, #2
    321c:	58eb      	ldr	r3, [r5, r3]
    321e:	4798      	blx	r3
    3220:	3601      	adds	r6, #1
    3222:	e7f2      	b.n	320a <__libc_init_array+0x1e>
    3224:	000032f0 	.word	0x000032f0
    3228:	000032f0 	.word	0x000032f0
    322c:	000032f0 	.word	0x000032f0
    3230:	000032f4 	.word	0x000032f4

00003234 <_tcc_intflag>:
    3234:	00000001 00000002 00000004 00000008     ................
    3244:	00001000 00002000 00004000 00008000     ..... ...@......
    3254:	00010000 00020000 00040000 00080000     ................

00003264 <position_test.12272>:
    3264:	0000000a 00000064 000000c8 0000012c     ....d.......,...
    3274:	00000190 000001f4 00000258 000002bc     ........X.......
    3284:	00000320 0000000a                        .......

0000328c <tc_interrupt_vectors.11772>:
    328c:	00000e0d 0006005e 2000087c 00000000     ....^...|.. ....
    329c:	0000284e 0000284a 0000284a 000028ac     N(..J(..J(...(..
    32ac:	000028ac 00002862 00002854 00002868     .(..b(..T(..h(..
    32bc:	0000289a 00002934 00002914 00002914     .(..4)...)...)..
    32cc:	000029a0 00002926 00002942 00002918     .)..&)..B)...)..
    32dc:	00002950 00002990                       P)...)..

000032e4 <_init>:
    32e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    32ea:	bc08      	pop	{r3}
    32ec:	469e      	mov	lr, r3
    32ee:	4770      	bx	lr

000032f0 <__init_array_start>:
    32f0:	000000b5 	.word	0x000000b5

000032f4 <_fini>:
    32f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    32fa:	bc08      	pop	{r3}
    32fc:	469e      	mov	lr, r3
    32fe:	4770      	bx	lr

00003300 <__fini_array_start>:
    3300:	0000008d 	.word	0x0000008d
