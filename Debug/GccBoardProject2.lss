
GccBoardProject2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aa4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00002aa4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000398  20000004  00002aa8  00020004  2**2
                  ALLOC
  3 .stack        00000404  2000039c  00002e40  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003f021  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004c59  00000000  00000000  0005f0a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000072c1  00000000  00000000  00063cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000738  00000000  00000000  0006afc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000760  00000000  00000000  0006b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000169c4  00000000  00000000  0006be58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f6c4  00000000  00000000  0008281c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006d95e  00000000  00000000  00091ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011b4  00000000  00000000  000ff840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 07 00 20 f5 25 00 00 f1 25 00 00 f1 25 00 00     ... .%...%...%..
	...
      2c:	f1 25 00 00 00 00 00 00 00 00 00 00 f1 25 00 00     .%...........%..
      3c:	f1 25 00 00 f1 25 00 00 f1 25 00 00 f1 25 00 00     .%...%...%...%..
      4c:	f1 25 00 00 39 01 00 00 f1 25 00 00 f1 25 00 00     .%..9....%...%..
      5c:	00 00 00 00 f1 25 00 00 59 15 00 00 69 15 00 00     .....%..Y...i...
      6c:	00 00 00 00 99 10 00 00 f1 13 00 00 01 14 00 00     ................
      7c:	f1 25 00 00 f1 25 00 00 f1 25 00 00 f1 25 00 00     .%...%...%...%..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000004 	.word	0x20000004
      ac:	00000000 	.word	0x00000000
      b0:	00002aa4 	.word	0x00002aa4

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000008 	.word	0x20000008
      e0:	00002aa4 	.word	0x00002aa4
      e4:	00002aa4 	.word	0x00002aa4
      e8:	00000000 	.word	0x00000000

000000ec <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
      ec:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
      ee:	2a00      	cmp	r2, #0
      f0:	d001      	beq.n	f6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
      f2:	0018      	movs	r0, r3
      f4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
      f6:	008b      	lsls	r3, r1, #2
      f8:	4a06      	ldr	r2, [pc, #24]	; (114 <extint_register_callback+0x28>)
      fa:	589b      	ldr	r3, [r3, r2]
      fc:	2b00      	cmp	r3, #0
      fe:	d003      	beq.n	108 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     100:	4283      	cmp	r3, r0
     102:	d005      	beq.n	110 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     104:	231d      	movs	r3, #29
     106:	e7f4      	b.n	f2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     108:	0089      	lsls	r1, r1, #2
     10a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     10c:	2300      	movs	r3, #0
     10e:	e7f0      	b.n	f2 <extint_register_callback+0x6>
		return STATUS_OK;
     110:	2300      	movs	r3, #0
     112:	e7ee      	b.n	f2 <extint_register_callback+0x6>
     114:	2000022c 	.word	0x2000022c

00000118 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     118:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     11a:	2900      	cmp	r1, #0
     11c:	d001      	beq.n	122 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     11e:	0018      	movs	r0, r3
     120:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     122:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     124:	281f      	cmp	r0, #31
     126:	d800      	bhi.n	12a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     128:	4a02      	ldr	r2, [pc, #8]	; (134 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     12a:	2301      	movs	r3, #1
     12c:	4083      	lsls	r3, r0
     12e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     130:	2300      	movs	r3, #0
     132:	e7f4      	b.n	11e <extint_chan_enable_callback+0x6>
     134:	40001800 	.word	0x40001800

00000138 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     138:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     13a:	2200      	movs	r2, #0
     13c:	4b10      	ldr	r3, [pc, #64]	; (180 <EIC_Handler+0x48>)
     13e:	701a      	strb	r2, [r3, #0]
     140:	2300      	movs	r3, #0
     142:	4910      	ldr	r1, [pc, #64]	; (184 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     144:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     146:	4e10      	ldr	r6, [pc, #64]	; (188 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     148:	4c0d      	ldr	r4, [pc, #52]	; (180 <EIC_Handler+0x48>)
     14a:	e00a      	b.n	162 <EIC_Handler+0x2a>
		return eics[eic_index];
     14c:	490d      	ldr	r1, [pc, #52]	; (184 <EIC_Handler+0x4c>)
     14e:	e008      	b.n	162 <EIC_Handler+0x2a>
     150:	7823      	ldrb	r3, [r4, #0]
     152:	3301      	adds	r3, #1
     154:	b2db      	uxtb	r3, r3
     156:	7023      	strb	r3, [r4, #0]
     158:	2b0f      	cmp	r3, #15
     15a:	d810      	bhi.n	17e <EIC_Handler+0x46>
		return NULL;
     15c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     15e:	2b1f      	cmp	r3, #31
     160:	d9f4      	bls.n	14c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     162:	0028      	movs	r0, r5
     164:	4018      	ands	r0, r3
     166:	2201      	movs	r2, #1
     168:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     16a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     16c:	4210      	tst	r0, r2
     16e:	d0ef      	beq.n	150 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     170:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     172:	009b      	lsls	r3, r3, #2
     174:	599b      	ldr	r3, [r3, r6]
     176:	2b00      	cmp	r3, #0
     178:	d0ea      	beq.n	150 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     17a:	4798      	blx	r3
     17c:	e7e8      	b.n	150 <EIC_Handler+0x18>
			}
		}
	}
}
     17e:	bd70      	pop	{r4, r5, r6, pc}
     180:	20000228 	.word	0x20000228
     184:	40001800 	.word	0x40001800
     188:	2000022c 	.word	0x2000022c

0000018c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     18c:	4a04      	ldr	r2, [pc, #16]	; (1a0 <_extint_enable+0x14>)
     18e:	7813      	ldrb	r3, [r2, #0]
     190:	2102      	movs	r1, #2
     192:	430b      	orrs	r3, r1
     194:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     196:	7853      	ldrb	r3, [r2, #1]
     198:	b25b      	sxtb	r3, r3
     19a:	2b00      	cmp	r3, #0
     19c:	dbfb      	blt.n	196 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     19e:	4770      	bx	lr
     1a0:	40001800 	.word	0x40001800

000001a4 <_system_extint_init>:
{
     1a4:	b500      	push	{lr}
     1a6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1a8:	4a12      	ldr	r2, [pc, #72]	; (1f4 <_system_extint_init+0x50>)
     1aa:	6993      	ldr	r3, [r2, #24]
     1ac:	2140      	movs	r1, #64	; 0x40
     1ae:	430b      	orrs	r3, r1
     1b0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1b2:	a901      	add	r1, sp, #4
     1b4:	2300      	movs	r3, #0
     1b6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     1b8:	2005      	movs	r0, #5
     1ba:	4b0f      	ldr	r3, [pc, #60]	; (1f8 <_system_extint_init+0x54>)
     1bc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     1be:	2005      	movs	r0, #5
     1c0:	4b0e      	ldr	r3, [pc, #56]	; (1fc <_system_extint_init+0x58>)
     1c2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1c4:	4a0e      	ldr	r2, [pc, #56]	; (200 <_system_extint_init+0x5c>)
     1c6:	7813      	ldrb	r3, [r2, #0]
     1c8:	2101      	movs	r1, #1
     1ca:	430b      	orrs	r3, r1
     1cc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1ce:	7853      	ldrb	r3, [r2, #1]
     1d0:	b25b      	sxtb	r3, r3
     1d2:	2b00      	cmp	r3, #0
     1d4:	dbfb      	blt.n	1ce <_system_extint_init+0x2a>
     1d6:	4b0b      	ldr	r3, [pc, #44]	; (204 <_system_extint_init+0x60>)
     1d8:	0019      	movs	r1, r3
     1da:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1dc:	2200      	movs	r2, #0
     1de:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     1e0:	4299      	cmp	r1, r3
     1e2:	d1fc      	bne.n	1de <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1e4:	2210      	movs	r2, #16
     1e6:	4b08      	ldr	r3, [pc, #32]	; (208 <_system_extint_init+0x64>)
     1e8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     1ea:	4b08      	ldr	r3, [pc, #32]	; (20c <_system_extint_init+0x68>)
     1ec:	4798      	blx	r3
}
     1ee:	b003      	add	sp, #12
     1f0:	bd00      	pop	{pc}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	40000400 	.word	0x40000400
     1f8:	00002499 	.word	0x00002499
     1fc:	0000240d 	.word	0x0000240d
     200:	40001800 	.word	0x40001800
     204:	2000022c 	.word	0x2000022c
     208:	e000e100 	.word	0xe000e100
     20c:	0000018d 	.word	0x0000018d

00000210 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     210:	2300      	movs	r3, #0
     212:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     214:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     216:	2201      	movs	r2, #1
     218:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     21a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     21c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     21e:	3302      	adds	r3, #2
     220:	72c3      	strb	r3, [r0, #11]
}
     222:	4770      	bx	lr

00000224 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	b083      	sub	sp, #12
     228:	0005      	movs	r5, r0
     22a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     22c:	a901      	add	r1, sp, #4
     22e:	2300      	movs	r3, #0
     230:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     232:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     234:	7923      	ldrb	r3, [r4, #4]
     236:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     238:	7a23      	ldrb	r3, [r4, #8]
     23a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     23c:	7820      	ldrb	r0, [r4, #0]
     23e:	4b15      	ldr	r3, [pc, #84]	; (294 <extint_chan_set_config+0x70>)
     240:	4798      	blx	r3
		return NULL;
     242:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     244:	2d1f      	cmp	r5, #31
     246:	d800      	bhi.n	24a <extint_chan_set_config+0x26>
		return eics[eic_index];
     248:	4813      	ldr	r0, [pc, #76]	; (298 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     24a:	2207      	movs	r2, #7
     24c:	402a      	ands	r2, r5
     24e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     250:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     252:	7aa3      	ldrb	r3, [r4, #10]
     254:	2b00      	cmp	r3, #0
     256:	d001      	beq.n	25c <extint_chan_set_config+0x38>
     258:	2308      	movs	r3, #8
     25a:	431f      	orrs	r7, r3
     25c:	08eb      	lsrs	r3, r5, #3
     25e:	009b      	lsls	r3, r3, #2
     260:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     262:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     264:	260f      	movs	r6, #15
     266:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     268:	43b1      	bics	r1, r6
			(new_config << config_pos);
     26a:	4097      	lsls	r7, r2
     26c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     26e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     270:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     272:	7a63      	ldrb	r3, [r4, #9]
     274:	2b00      	cmp	r3, #0
     276:	d106      	bne.n	286 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     278:	6943      	ldr	r3, [r0, #20]
     27a:	2201      	movs	r2, #1
     27c:	40aa      	lsls	r2, r5
     27e:	4393      	bics	r3, r2
     280:	6143      	str	r3, [r0, #20]
	}
}
     282:	b003      	add	sp, #12
     284:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     286:	6942      	ldr	r2, [r0, #20]
     288:	2301      	movs	r3, #1
     28a:	40ab      	lsls	r3, r5
     28c:	4313      	orrs	r3, r2
     28e:	6143      	str	r3, [r0, #20]
     290:	e7f7      	b.n	282 <extint_chan_set_config+0x5e>
     292:	46c0      	nop			; (mov r8, r8)
     294:	00002591 	.word	0x00002591
     298:	40001800 	.word	0x40001800

0000029c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     29c:	b500      	push	{lr}
     29e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     2a0:	ab01      	add	r3, sp, #4
     2a2:	2280      	movs	r2, #128	; 0x80
     2a4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     2a6:	780a      	ldrb	r2, [r1, #0]
     2a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     2aa:	784a      	ldrb	r2, [r1, #1]
     2ac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     2ae:	788a      	ldrb	r2, [r1, #2]
     2b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     2b2:	0019      	movs	r1, r3
     2b4:	4b01      	ldr	r3, [pc, #4]	; (2bc <port_pin_set_config+0x20>)
     2b6:	4798      	blx	r3
}
     2b8:	b003      	add	sp, #12
     2ba:	bd00      	pop	{pc}
     2bc:	00002591 	.word	0x00002591

000002c0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     2c0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     2c2:	2207      	movs	r2, #7
     2c4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     2c6:	421a      	tst	r2, r3
     2c8:	d1fc      	bne.n	2c4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     2ca:	4770      	bx	lr

000002cc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ce:	46ce      	mov	lr, r9
     2d0:	4647      	mov	r7, r8
     2d2:	b580      	push	{r7, lr}
     2d4:	b083      	sub	sp, #12
     2d6:	0007      	movs	r7, r0
     2d8:	000d      	movs	r5, r1
     2da:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     2dc:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     2de:	0008      	movs	r0, r1
     2e0:	4b7b      	ldr	r3, [pc, #492]	; (4d0 <STACK_SIZE+0xd0>)
     2e2:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     2e4:	4a7b      	ldr	r2, [pc, #492]	; (4d4 <STACK_SIZE+0xd4>)
     2e6:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     2e8:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     2ea:	2301      	movs	r3, #1
     2ec:	40a3      	lsls	r3, r4
     2ee:	430b      	orrs	r3, r1
     2f0:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     2f2:	a901      	add	r1, sp, #4
     2f4:	7b33      	ldrb	r3, [r6, #12]
     2f6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     2f8:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     2fa:	b2c4      	uxtb	r4, r0
     2fc:	0020      	movs	r0, r4
     2fe:	4b76      	ldr	r3, [pc, #472]	; (4d8 <STACK_SIZE+0xd8>)
     300:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     302:	0020      	movs	r0, r4
     304:	4b75      	ldr	r3, [pc, #468]	; (4dc <STACK_SIZE+0xdc>)
     306:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     308:	7b30      	ldrb	r0, [r6, #12]
     30a:	2100      	movs	r1, #0
     30c:	4b74      	ldr	r3, [pc, #464]	; (4e0 <STACK_SIZE+0xe0>)
     30e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     310:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
     312:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     314:	079b      	lsls	r3, r3, #30
     316:	d504      	bpl.n	322 <i2c_master_init+0x56>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     318:	b003      	add	sp, #12
     31a:	bc0c      	pop	{r2, r3}
     31c:	4690      	mov	r8, r2
     31e:	4699      	mov	r9, r3
     320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     322:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
     324:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     326:	07db      	lsls	r3, r3, #31
     328:	d4f6      	bmi.n	318 <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     32a:	6838      	ldr	r0, [r7, #0]
     32c:	4b68      	ldr	r3, [pc, #416]	; (4d0 <STACK_SIZE+0xd0>)
     32e:	4698      	mov	r8, r3
     330:	4798      	blx	r3
     332:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     334:	496b      	ldr	r1, [pc, #428]	; (4e4 <STACK_SIZE+0xe4>)
     336:	4b6c      	ldr	r3, [pc, #432]	; (4e8 <STACK_SIZE+0xe8>)
     338:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     33a:	00a4      	lsls	r4, r4, #2
     33c:	4b6b      	ldr	r3, [pc, #428]	; (4ec <STACK_SIZE+0xec>)
     33e:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
     340:	2300      	movs	r3, #0
     342:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
     344:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
     346:	2200      	movs	r2, #0
     348:	4691      	mov	r9, r2
     34a:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
     34c:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
     34e:	2225      	movs	r2, #37	; 0x25
     350:	4649      	mov	r1, r9
     352:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
     354:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     356:	3314      	adds	r3, #20
     358:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     35a:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     35c:	0020      	movs	r0, r4
     35e:	47c0      	blx	r8
     360:	4680      	mov	r8, r0
     362:	2380      	movs	r3, #128	; 0x80
     364:	466a      	mov	r2, sp
     366:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     368:	466b      	mov	r3, sp
     36a:	464a      	mov	r2, r9
     36c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     36e:	2301      	movs	r3, #1
     370:	466a      	mov	r2, sp
     372:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     374:	466b      	mov	r3, sp
     376:	464a      	mov	r2, r9
     378:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
     37a:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
     37c:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
     37e:	2800      	cmp	r0, #0
     380:	d077      	beq.n	472 <STACK_SIZE+0x72>
	pin_conf.mux_position = pad0 & 0xFFFF;
     382:	466b      	mov	r3, sp
     384:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     386:	2302      	movs	r3, #2
     388:	466a      	mov	r2, sp
     38a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     38c:	0c00      	lsrs	r0, r0, #16
     38e:	b2c0      	uxtb	r0, r0
     390:	4669      	mov	r1, sp
     392:	4b57      	ldr	r3, [pc, #348]	; (4f0 <STACK_SIZE+0xf0>)
     394:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     396:	2d00      	cmp	r5, #0
     398:	d070      	beq.n	47c <STACK_SIZE+0x7c>
	pin_conf.mux_position = pad1 & 0xFFFF;
     39a:	466b      	mov	r3, sp
     39c:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     39e:	2302      	movs	r3, #2
     3a0:	466a      	mov	r2, sp
     3a2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     3a4:	0c28      	lsrs	r0, r5, #16
     3a6:	b2c0      	uxtb	r0, r0
     3a8:	4669      	mov	r1, sp
     3aa:	4b51      	ldr	r3, [pc, #324]	; (4f0 <STACK_SIZE+0xf0>)
     3ac:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     3ae:	8ab3      	ldrh	r3, [r6, #20]
     3b0:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     3b2:	8af3      	ldrh	r3, [r6, #22]
     3b4:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     3b6:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     3b8:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     3ba:	2b00      	cmp	r3, #0
     3bc:	d104      	bne.n	3c8 <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     3be:	4b4d      	ldr	r3, [pc, #308]	; (4f4 <STACK_SIZE+0xf4>)
     3c0:	789b      	ldrb	r3, [r3, #2]
     3c2:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     3c4:	0fdb      	lsrs	r3, r3, #31
     3c6:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     3c8:	68b1      	ldr	r1, [r6, #8]
     3ca:	6933      	ldr	r3, [r6, #16]
     3cc:	430b      	orrs	r3, r1
     3ce:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     3d0:	2224      	movs	r2, #36	; 0x24
     3d2:	5cb2      	ldrb	r2, [r6, r2]
     3d4:	2a00      	cmp	r2, #0
     3d6:	d002      	beq.n	3de <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     3d8:	2280      	movs	r2, #128	; 0x80
     3da:	05d2      	lsls	r2, r2, #23
     3dc:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     3de:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     3e0:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     3e2:	222c      	movs	r2, #44	; 0x2c
     3e4:	5cb2      	ldrb	r2, [r6, r2]
     3e6:	2a00      	cmp	r2, #0
     3e8:	d103      	bne.n	3f2 <i2c_master_init+0x126>
     3ea:	2280      	movs	r2, #128	; 0x80
     3ec:	0492      	lsls	r2, r2, #18
     3ee:	4291      	cmp	r1, r2
     3f0:	d102      	bne.n	3f8 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     3f2:	2280      	movs	r2, #128	; 0x80
     3f4:	0512      	lsls	r2, r2, #20
     3f6:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     3f8:	222d      	movs	r2, #45	; 0x2d
     3fa:	5cb2      	ldrb	r2, [r6, r2]
     3fc:	2a00      	cmp	r2, #0
     3fe:	d002      	beq.n	406 <STACK_SIZE+0x6>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     400:	2280      	movs	r2, #128	; 0x80
     402:	0412      	lsls	r2, r2, #16
     404:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     406:	222e      	movs	r2, #46	; 0x2e
     408:	5cb2      	ldrb	r2, [r6, r2]
     40a:	2a00      	cmp	r2, #0
     40c:	d002      	beq.n	414 <STACK_SIZE+0x14>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     40e:	2280      	movs	r2, #128	; 0x80
     410:	03d2      	lsls	r2, r2, #15
     412:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     414:	6822      	ldr	r2, [r4, #0]
     416:	4313      	orrs	r3, r2
     418:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     41a:	2380      	movs	r3, #128	; 0x80
     41c:	005b      	lsls	r3, r3, #1
     41e:	6063      	str	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     420:	4645      	mov	r5, r8
     422:	350e      	adds	r5, #14
     424:	b2e8      	uxtb	r0, r5
     426:	4b34      	ldr	r3, [pc, #208]	; (4f8 <STACK_SIZE+0xf8>)
     428:	4798      	blx	r3
     42a:	0007      	movs	r7, r0
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     42c:	6873      	ldr	r3, [r6, #4]
     42e:	4698      	mov	r8, r3
	tmp_baud = (int32_t)(div_ceil(fgclk -  4680000, 2 * fscl));
     430:	21fa      	movs	r1, #250	; 0xfa
     432:	00c9      	lsls	r1, r1, #3
     434:	6833      	ldr	r3, [r6, #0]
     436:	4359      	muls	r1, r3
     438:	4b30      	ldr	r3, [pc, #192]	; (4fc <STACK_SIZE+0xfc>)
     43a:	18c8      	adds	r0, r1, r3
     43c:	19c0      	adds	r0, r0, r7
     43e:	4b30      	ldr	r3, [pc, #192]	; (500 <STACK_SIZE+0x100>)
     440:	4798      	blx	r3
     442:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     444:	2380      	movs	r3, #128	; 0x80
     446:	049b      	lsls	r3, r3, #18
     448:	68b2      	ldr	r2, [r6, #8]
     44a:	429a      	cmp	r2, r3
     44c:	d01c      	beq.n	488 <STACK_SIZE+0x88>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     44e:	2040      	movs	r0, #64	; 0x40
     450:	2dff      	cmp	r5, #255	; 0xff
     452:	d900      	bls.n	456 <STACK_SIZE+0x56>
     454:	e760      	b.n	318 <i2c_master_init+0x4c>
	int32_t tmp_baudlow_hs = 0;
     456:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     458:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     45a:	23ff      	movs	r3, #255	; 0xff
     45c:	402b      	ands	r3, r5
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     45e:	0636      	lsls	r6, r6, #24
     460:	4333      	orrs	r3, r6
     462:	0400      	lsls	r0, r0, #16
     464:	22ff      	movs	r2, #255	; 0xff
     466:	0412      	lsls	r2, r2, #16
     468:	4010      	ands	r0, r2
     46a:	4303      	orrs	r3, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     46c:	60e3      	str	r3, [r4, #12]
	enum status_code tmp_status_code = STATUS_OK;
     46e:	2000      	movs	r0, #0
     470:	e752      	b.n	318 <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     472:	2100      	movs	r1, #0
     474:	0020      	movs	r0, r4
     476:	4b23      	ldr	r3, [pc, #140]	; (504 <STACK_SIZE+0x104>)
     478:	4798      	blx	r3
     47a:	e782      	b.n	382 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     47c:	2101      	movs	r1, #1
     47e:	0020      	movs	r0, r4
     480:	4b20      	ldr	r3, [pc, #128]	; (504 <STACK_SIZE+0x104>)
     482:	4798      	blx	r3
     484:	0005      	movs	r5, r0
     486:	e788      	b.n	39a <i2c_master_init+0xce>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     488:	21fa      	movs	r1, #250	; 0xfa
     48a:	0089      	lsls	r1, r1, #2
     48c:	4643      	mov	r3, r8
     48e:	434b      	muls	r3, r1
     490:	4698      	mov	r8, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2) / (3 * fscl_hs) - 1);
     492:	0078      	lsls	r0, r7, #1
     494:	0059      	lsls	r1, r3, #1
     496:	4441      	add	r1, r8
     498:	4b19      	ldr	r3, [pc, #100]	; (500 <STACK_SIZE+0x100>)
     49a:	4798      	blx	r3
     49c:	1e46      	subs	r6, r0, #1
		if (tmp_baudlow_hs) {
     49e:	2e00      	cmp	r6, #0
     4a0:	d00b      	beq.n	4ba <STACK_SIZE+0xba>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     4a2:	4641      	mov	r1, r8
     4a4:	0038      	movs	r0, r7
     4a6:	4b16      	ldr	r3, [pc, #88]	; (500 <STACK_SIZE+0x100>)
     4a8:	4798      	blx	r3
     4aa:	3802      	subs	r0, #2
     4ac:	1b80      	subs	r0, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4ae:	2dff      	cmp	r5, #255	; 0xff
     4b0:	d80b      	bhi.n	4ca <STACK_SIZE+0xca>
     4b2:	28ff      	cmp	r0, #255	; 0xff
     4b4:	d9d1      	bls.n	45a <STACK_SIZE+0x5a>
     4b6:	2040      	movs	r0, #64	; 0x40
     4b8:	e72e      	b.n	318 <i2c_master_init+0x4c>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4ba:	4643      	mov	r3, r8
     4bc:	0059      	lsls	r1, r3, #1
     4be:	1e48      	subs	r0, r1, #1
     4c0:	19c0      	adds	r0, r0, r7
     4c2:	4b0f      	ldr	r3, [pc, #60]	; (500 <STACK_SIZE+0x100>)
     4c4:	4798      	blx	r3
     4c6:	3801      	subs	r0, #1
     4c8:	e7f1      	b.n	4ae <STACK_SIZE+0xae>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4ca:	2040      	movs	r0, #64	; 0x40
     4cc:	e724      	b.n	318 <i2c_master_init+0x4c>
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	000014dd 	.word	0x000014dd
     4d4:	40000400 	.word	0x40000400
     4d8:	00002499 	.word	0x00002499
     4dc:	0000240d 	.word	0x0000240d
     4e0:	00001411 	.word	0x00001411
     4e4:	00000931 	.word	0x00000931
     4e8:	00001505 	.word	0x00001505
     4ec:	20000278 	.word	0x20000278
     4f0:	00002591 	.word	0x00002591
     4f4:	41002000 	.word	0x41002000
     4f8:	000024b5 	.word	0x000024b5
     4fc:	ffb896bf 	.word	0xffb896bf
     500:	000026c5 	.word	0x000026c5
     504:	0000145d 	.word	0x0000145d

00000508 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     508:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     50a:	7e1a      	ldrb	r2, [r3, #24]
     50c:	0792      	lsls	r2, r2, #30
     50e:	d507      	bpl.n	520 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     510:	2202      	movs	r2, #2
     512:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     514:	8b5b      	ldrh	r3, [r3, #26]
     516:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     518:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     51a:	17db      	asrs	r3, r3, #31
     51c:	4018      	ands	r0, r3
}
     51e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     520:	8b5a      	ldrh	r2, [r3, #26]
     522:	0752      	lsls	r2, r2, #29
     524:	d506      	bpl.n	534 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     526:	6859      	ldr	r1, [r3, #4]
     528:	22c0      	movs	r2, #192	; 0xc0
     52a:	0292      	lsls	r2, r2, #10
     52c:	430a      	orrs	r2, r1
     52e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     530:	2018      	movs	r0, #24
     532:	e7f4      	b.n	51e <_i2c_master_address_response+0x16>
	return STATUS_OK;
     534:	2000      	movs	r0, #0
     536:	e7f2      	b.n	51e <_i2c_master_address_response+0x16>

00000538 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     538:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     53a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     53c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     53e:	2401      	movs	r4, #1
     540:	2502      	movs	r5, #2
     542:	7e11      	ldrb	r1, [r2, #24]
     544:	4221      	tst	r1, r4
     546:	d10b      	bne.n	560 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     548:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     54a:	4229      	tst	r1, r5
     54c:	d106      	bne.n	55c <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     54e:	3301      	adds	r3, #1
     550:	b29b      	uxth	r3, r3
     552:	8901      	ldrh	r1, [r0, #8]
     554:	4299      	cmp	r1, r3
     556:	d8f4      	bhi.n	542 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     558:	2012      	movs	r0, #18
     55a:	e002      	b.n	562 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     55c:	2000      	movs	r0, #0
     55e:	e000      	b.n	562 <_i2c_master_wait_for_bus+0x2a>
     560:	2000      	movs	r0, #0
}
     562:	bd30      	pop	{r4, r5, pc}

00000564 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     564:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     566:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     568:	6862      	ldr	r2, [r4, #4]
     56a:	2380      	movs	r3, #128	; 0x80
     56c:	02db      	lsls	r3, r3, #11
     56e:	4313      	orrs	r3, r2
     570:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     572:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     574:	4b02      	ldr	r3, [pc, #8]	; (580 <_i2c_master_send_hs_master_code+0x1c>)
     576:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     578:	2301      	movs	r3, #1
     57a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     57c:	bd10      	pop	{r4, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	00000539 	.word	0x00000539

00000584 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     584:	b5f0      	push	{r4, r5, r6, r7, lr}
     586:	46de      	mov	lr, fp
     588:	4657      	mov	r7, sl
     58a:	464e      	mov	r6, r9
     58c:	4645      	mov	r5, r8
     58e:	b5e0      	push	{r5, r6, r7, lr}
     590:	b083      	sub	sp, #12
     592:	0006      	movs	r6, r0
     594:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     596:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     598:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     59a:	682b      	ldr	r3, [r5, #0]
     59c:	011b      	lsls	r3, r3, #4
     59e:	0fdb      	lsrs	r3, r3, #31
     5a0:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     5a2:	7a4b      	ldrb	r3, [r1, #9]
     5a4:	2b00      	cmp	r3, #0
     5a6:	d12b      	bne.n	600 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5a8:	686b      	ldr	r3, [r5, #4]
     5aa:	4a58      	ldr	r2, [pc, #352]	; (70c <_i2c_master_read_packet+0x188>)
     5ac:	4013      	ands	r3, r2
     5ae:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     5b0:	464b      	mov	r3, r9
     5b2:	7a1b      	ldrb	r3, [r3, #8]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d127      	bne.n	608 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5b8:	464b      	mov	r3, r9
     5ba:	881b      	ldrh	r3, [r3, #0]
     5bc:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     5be:	464a      	mov	r2, r9
     5c0:	7a52      	ldrb	r2, [r2, #9]
     5c2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5c4:	4313      	orrs	r3, r2
     5c6:	2201      	movs	r2, #1
     5c8:	4313      	orrs	r3, r2
     5ca:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5cc:	0030      	movs	r0, r6
     5ce:	4b50      	ldr	r3, [pc, #320]	; (710 <_i2c_master_read_packet+0x18c>)
     5d0:	4798      	blx	r3
     5d2:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     5d4:	4653      	mov	r3, sl
     5d6:	2b00      	cmp	r3, #0
     5d8:	d003      	beq.n	5e2 <_i2c_master_read_packet+0x5e>
     5da:	464b      	mov	r3, r9
     5dc:	885b      	ldrh	r3, [r3, #2]
     5de:	2b01      	cmp	r3, #1
     5e0:	d03b      	beq.n	65a <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
     5e2:	686b      	ldr	r3, [r5, #4]
     5e4:	4a49      	ldr	r2, [pc, #292]	; (70c <_i2c_master_read_packet+0x188>)
     5e6:	4013      	ands	r3, r2
     5e8:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     5ea:	9b01      	ldr	r3, [sp, #4]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d03a      	beq.n	666 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     5f0:	9801      	ldr	r0, [sp, #4]
     5f2:	b003      	add	sp, #12
     5f4:	bc3c      	pop	{r2, r3, r4, r5}
     5f6:	4690      	mov	r8, r2
     5f8:	4699      	mov	r9, r3
     5fa:	46a2      	mov	sl, r4
     5fc:	46ab      	mov	fp, r5
     5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     600:	7a89      	ldrb	r1, [r1, #10]
     602:	4b44      	ldr	r3, [pc, #272]	; (714 <_i2c_master_read_packet+0x190>)
     604:	4798      	blx	r3
     606:	e7cf      	b.n	5a8 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
     608:	464b      	mov	r3, r9
     60a:	881b      	ldrh	r3, [r3, #0]
     60c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     60e:	464a      	mov	r2, r9
     610:	7a52      	ldrb	r2, [r2, #9]
     612:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     614:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     616:	2280      	movs	r2, #128	; 0x80
     618:	0212      	lsls	r2, r2, #8
     61a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     61c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     61e:	0030      	movs	r0, r6
     620:	4b3b      	ldr	r3, [pc, #236]	; (710 <_i2c_master_read_packet+0x18c>)
     622:	4798      	blx	r3
     624:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     626:	686b      	ldr	r3, [r5, #4]
     628:	4a38      	ldr	r2, [pc, #224]	; (70c <_i2c_master_read_packet+0x188>)
     62a:	4013      	ands	r3, r2
     62c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
     62e:	2800      	cmp	r0, #0
     630:	d1de      	bne.n	5f0 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
     632:	0030      	movs	r0, r6
     634:	4b38      	ldr	r3, [pc, #224]	; (718 <_i2c_master_read_packet+0x194>)
     636:	4798      	blx	r3
     638:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
     63a:	2800      	cmp	r0, #0
     63c:	d1d8      	bne.n	5f0 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     63e:	464b      	mov	r3, r9
     640:	881b      	ldrh	r3, [r3, #0]
     642:	0a1b      	lsrs	r3, r3, #8
     644:	2278      	movs	r2, #120	; 0x78
     646:	4313      	orrs	r3, r2
     648:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     64a:	464a      	mov	r2, r9
     64c:	7a52      	ldrb	r2, [r2, #9]
     64e:	0392      	lsls	r2, r2, #14
     650:	2101      	movs	r1, #1
     652:	430a      	orrs	r2, r1
     654:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     656:	626b      	str	r3, [r5, #36]	; 0x24
     658:	e7b8      	b.n	5cc <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     65a:	686a      	ldr	r2, [r5, #4]
     65c:	2380      	movs	r3, #128	; 0x80
     65e:	02db      	lsls	r3, r3, #11
     660:	4313      	orrs	r3, r2
     662:	606b      	str	r3, [r5, #4]
     664:	e7c1      	b.n	5ea <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
     666:	0030      	movs	r0, r6
     668:	4b2b      	ldr	r3, [pc, #172]	; (718 <_i2c_master_read_packet+0x194>)
     66a:	4798      	blx	r3
     66c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     66e:	2800      	cmp	r0, #0
     670:	d1be      	bne.n	5f0 <_i2c_master_read_packet+0x6c>
     672:	3c01      	subs	r4, #1
     674:	b2a4      	uxth	r4, r4
     676:	4680      	mov	r8, r0
		while (tmp_data_length--) {
     678:	4b28      	ldr	r3, [pc, #160]	; (71c <_i2c_master_read_packet+0x198>)
     67a:	469b      	mov	fp, r3
     67c:	e015      	b.n	6aa <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
     67e:	2c01      	cmp	r4, #1
     680:	d020      	beq.n	6c4 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
     682:	0030      	movs	r0, r6
     684:	4b26      	ldr	r3, [pc, #152]	; (720 <_i2c_master_read_packet+0x19c>)
     686:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     688:	4643      	mov	r3, r8
     68a:	1c5f      	adds	r7, r3, #1
     68c:	b2bf      	uxth	r7, r7
     68e:	2328      	movs	r3, #40	; 0x28
     690:	5ceb      	ldrb	r3, [r5, r3]
     692:	464a      	mov	r2, r9
     694:	6852      	ldr	r2, [r2, #4]
     696:	4641      	mov	r1, r8
     698:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
     69a:	0030      	movs	r0, r6
     69c:	4b1c      	ldr	r3, [pc, #112]	; (710 <_i2c_master_read_packet+0x18c>)
     69e:	4798      	blx	r3
     6a0:	3c01      	subs	r4, #1
     6a2:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
     6a4:	2800      	cmp	r0, #0
     6a6:	d115      	bne.n	6d4 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
     6a8:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
     6aa:	455c      	cmp	r4, fp
     6ac:	d014      	beq.n	6d8 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     6ae:	8b6b      	ldrh	r3, [r5, #26]
     6b0:	069b      	lsls	r3, r3, #26
     6b2:	d527      	bpl.n	704 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
     6b4:	7af3      	ldrb	r3, [r6, #11]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d0e3      	beq.n	682 <_i2c_master_read_packet+0xfe>
     6ba:	4653      	mov	r3, sl
     6bc:	2b00      	cmp	r3, #0
     6be:	d1de      	bne.n	67e <_i2c_master_read_packet+0xfa>
     6c0:	2c00      	cmp	r4, #0
     6c2:	d1de      	bne.n	682 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6c4:	686a      	ldr	r2, [r5, #4]
     6c6:	2380      	movs	r3, #128	; 0x80
     6c8:	02db      	lsls	r3, r3, #11
     6ca:	4313      	orrs	r3, r2
     6cc:	606b      	str	r3, [r5, #4]
     6ce:	3c01      	subs	r4, #1
     6d0:	b2a4      	uxth	r4, r4
     6d2:	e7ea      	b.n	6aa <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
     6d4:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
     6d6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     6d8:	7ab3      	ldrb	r3, [r6, #10]
     6da:	2b00      	cmp	r3, #0
     6dc:	d109      	bne.n	6f2 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
     6de:	0030      	movs	r0, r6
     6e0:	4b0f      	ldr	r3, [pc, #60]	; (720 <_i2c_master_read_packet+0x19c>)
     6e2:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     6e4:	2328      	movs	r3, #40	; 0x28
     6e6:	5cea      	ldrb	r2, [r5, r3]
     6e8:	464b      	mov	r3, r9
     6ea:	685b      	ldr	r3, [r3, #4]
     6ec:	4641      	mov	r1, r8
     6ee:	545a      	strb	r2, [r3, r1]
     6f0:	e77e      	b.n	5f0 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
     6f2:	0030      	movs	r0, r6
     6f4:	4b0a      	ldr	r3, [pc, #40]	; (720 <_i2c_master_read_packet+0x19c>)
     6f6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     6f8:	686a      	ldr	r2, [r5, #4]
     6fa:	23c0      	movs	r3, #192	; 0xc0
     6fc:	029b      	lsls	r3, r3, #10
     6fe:	4313      	orrs	r3, r2
     700:	606b      	str	r3, [r5, #4]
     702:	e7ec      	b.n	6de <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
     704:	2341      	movs	r3, #65	; 0x41
     706:	9301      	str	r3, [sp, #4]
     708:	e772      	b.n	5f0 <_i2c_master_read_packet+0x6c>
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	fffbffff 	.word	0xfffbffff
     710:	00000539 	.word	0x00000539
     714:	00000565 	.word	0x00000565
     718:	00000509 	.word	0x00000509
     71c:	0000ffff 	.word	0x0000ffff
     720:	000002c1 	.word	0x000002c1

00000724 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     724:	b5f0      	push	{r4, r5, r6, r7, lr}
     726:	46de      	mov	lr, fp
     728:	4657      	mov	r7, sl
     72a:	464e      	mov	r6, r9
     72c:	4645      	mov	r5, r8
     72e:	b5e0      	push	{r5, r6, r7, lr}
     730:	b083      	sub	sp, #12
     732:	0006      	movs	r6, r0
     734:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     736:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     738:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     73a:	4b32      	ldr	r3, [pc, #200]	; (804 <_i2c_master_write_packet+0xe0>)
     73c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     73e:	7a7b      	ldrb	r3, [r7, #9]
     740:	2b00      	cmp	r3, #0
     742:	d11d      	bne.n	780 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     744:	686b      	ldr	r3, [r5, #4]
     746:	4a30      	ldr	r2, [pc, #192]	; (808 <_i2c_master_write_packet+0xe4>)
     748:	4013      	ands	r3, r2
     74a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     74c:	7a3b      	ldrb	r3, [r7, #8]
     74e:	2b00      	cmp	r3, #0
     750:	d01b      	beq.n	78a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     752:	883b      	ldrh	r3, [r7, #0]
     754:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     756:	7a7a      	ldrb	r2, [r7, #9]
     758:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     75a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     75c:	2280      	movs	r2, #128	; 0x80
     75e:	0212      	lsls	r2, r2, #8
     760:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     762:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     764:	0030      	movs	r0, r6
     766:	4b29      	ldr	r3, [pc, #164]	; (80c <_i2c_master_write_packet+0xe8>)
     768:	4798      	blx	r3
     76a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     76c:	2800      	cmp	r0, #0
     76e:	d013      	beq.n	798 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     770:	9801      	ldr	r0, [sp, #4]
     772:	b003      	add	sp, #12
     774:	bc3c      	pop	{r2, r3, r4, r5}
     776:	4690      	mov	r8, r2
     778:	4699      	mov	r9, r3
     77a:	46a2      	mov	sl, r4
     77c:	46ab      	mov	fp, r5
     77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     780:	7ab9      	ldrb	r1, [r7, #10]
     782:	0030      	movs	r0, r6
     784:	4b22      	ldr	r3, [pc, #136]	; (810 <_i2c_master_write_packet+0xec>)
     786:	4798      	blx	r3
     788:	e7dc      	b.n	744 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     78a:	883b      	ldrh	r3, [r7, #0]
     78c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     78e:	7a7a      	ldrb	r2, [r7, #9]
     790:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     792:	4313      	orrs	r3, r2
     794:	626b      	str	r3, [r5, #36]	; 0x24
     796:	e7e5      	b.n	764 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
     798:	0030      	movs	r0, r6
     79a:	4b1e      	ldr	r3, [pc, #120]	; (814 <_i2c_master_write_packet+0xf0>)
     79c:	4798      	blx	r3
     79e:	1e03      	subs	r3, r0, #0
     7a0:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
     7a2:	d1e5      	bne.n	770 <_i2c_master_write_packet+0x4c>
     7a4:	46a0      	mov	r8, r4
     7a6:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7a8:	3320      	adds	r3, #32
     7aa:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
     7ac:	4b15      	ldr	r3, [pc, #84]	; (804 <_i2c_master_write_packet+0xe0>)
     7ae:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
     7b0:	4b16      	ldr	r3, [pc, #88]	; (80c <_i2c_master_write_packet+0xe8>)
     7b2:	469a      	mov	sl, r3
		while (tmp_data_length--) {
     7b4:	4544      	cmp	r4, r8
     7b6:	d015      	beq.n	7e4 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     7b8:	8b6b      	ldrh	r3, [r5, #26]
     7ba:	464a      	mov	r2, r9
     7bc:	4213      	tst	r3, r2
     7be:	d01d      	beq.n	7fc <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
     7c0:	0030      	movs	r0, r6
     7c2:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	5d1a      	ldrb	r2, [r3, r4]
     7c8:	2328      	movs	r3, #40	; 0x28
     7ca:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
     7cc:	0030      	movs	r0, r6
     7ce:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
     7d0:	2800      	cmp	r0, #0
     7d2:	d106      	bne.n	7e2 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     7d4:	8b6b      	ldrh	r3, [r5, #26]
     7d6:	3401      	adds	r4, #1
     7d8:	075b      	lsls	r3, r3, #29
     7da:	d5eb      	bpl.n	7b4 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
     7dc:	231e      	movs	r3, #30
     7de:	9301      	str	r3, [sp, #4]
     7e0:	e000      	b.n	7e4 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
     7e2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
     7e4:	7ab3      	ldrb	r3, [r6, #10]
     7e6:	2b00      	cmp	r3, #0
     7e8:	d0c2      	beq.n	770 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
     7ea:	0030      	movs	r0, r6
     7ec:	4b05      	ldr	r3, [pc, #20]	; (804 <_i2c_master_write_packet+0xe0>)
     7ee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7f0:	686a      	ldr	r2, [r5, #4]
     7f2:	23c0      	movs	r3, #192	; 0xc0
     7f4:	029b      	lsls	r3, r3, #10
     7f6:	4313      	orrs	r3, r2
     7f8:	606b      	str	r3, [r5, #4]
     7fa:	e7b9      	b.n	770 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
     7fc:	2341      	movs	r3, #65	; 0x41
     7fe:	9301      	str	r3, [sp, #4]
     800:	e7b6      	b.n	770 <_i2c_master_write_packet+0x4c>
     802:	46c0      	nop			; (mov r8, r8)
     804:	000002c1 	.word	0x000002c1
     808:	fffbffff 	.word	0xfffbffff
     80c:	00000539 	.word	0x00000539
     810:	00000565 	.word	0x00000565
     814:	00000509 	.word	0x00000509

00000818 <i2c_master_read_packet_wait>:
{
     818:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     81a:	8b83      	ldrh	r3, [r0, #28]
     81c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     81e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     820:	2b00      	cmp	r3, #0
     822:	d001      	beq.n	828 <i2c_master_read_packet_wait+0x10>
}
     824:	0010      	movs	r0, r2
     826:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     828:	3301      	adds	r3, #1
     82a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     82c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     82e:	4b02      	ldr	r3, [pc, #8]	; (838 <i2c_master_read_packet_wait+0x20>)
     830:	4798      	blx	r3
     832:	0002      	movs	r2, r0
     834:	e7f6      	b.n	824 <i2c_master_read_packet_wait+0xc>
     836:	46c0      	nop			; (mov r8, r8)
     838:	00000585 	.word	0x00000585

0000083c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     83c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     83e:	8b83      	ldrh	r3, [r0, #28]
     840:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     842:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     844:	2b00      	cmp	r3, #0
     846:	d001      	beq.n	84c <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
     848:	0010      	movs	r0, r2
     84a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     84c:	3301      	adds	r3, #1
     84e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     850:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     852:	4b02      	ldr	r3, [pc, #8]	; (85c <i2c_master_write_packet_wait+0x20>)
     854:	4798      	blx	r3
     856:	0002      	movs	r2, r0
     858:	e7f6      	b.n	848 <i2c_master_write_packet_wait+0xc>
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	00000725 	.word	0x00000725

00000860 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     860:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     862:	2207      	movs	r2, #7
     864:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
     866:	421a      	tst	r2, r3
     868:	d1fc      	bne.n	864 <_i2c_master_wait_for_sync+0x4>
}
     86a:	4770      	bx	lr

0000086c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     86c:	b570      	push	{r4, r5, r6, lr}
     86e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     870:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     872:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     874:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     876:	8b83      	ldrh	r3, [r0, #28]
     878:	1aed      	subs	r5, r5, r3
     87a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     87c:	8b83      	ldrh	r3, [r0, #28]
     87e:	3b01      	subs	r3, #1
     880:	b29b      	uxth	r3, r3
     882:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     884:	0113      	lsls	r3, r2, #4
     886:	d51d      	bpl.n	8c4 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     888:	7ac3      	ldrb	r3, [r0, #11]
     88a:	2b00      	cmp	r3, #0
     88c:	d003      	beq.n	896 <_i2c_master_read+0x2a>
     88e:	8b83      	ldrh	r3, [r0, #28]
     890:	b29b      	uxth	r3, r3
     892:	2b01      	cmp	r3, #1
     894:	d010      	beq.n	8b8 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     896:	8ba3      	ldrh	r3, [r4, #28]
     898:	b29b      	uxth	r3, r3
     89a:	2b00      	cmp	r3, #0
     89c:	d102      	bne.n	8a4 <_i2c_master_read+0x38>
		if (module->send_stop) {
     89e:	7aa3      	ldrb	r3, [r4, #10]
     8a0:	2b00      	cmp	r3, #0
     8a2:	d11c      	bne.n	8de <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     8a4:	0020      	movs	r0, r4
     8a6:	4b12      	ldr	r3, [pc, #72]	; (8f0 <_i2c_master_read+0x84>)
     8a8:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     8aa:	6a23      	ldr	r3, [r4, #32]
     8ac:	195d      	adds	r5, r3, r5
     8ae:	2328      	movs	r3, #40	; 0x28
     8b0:	5cf3      	ldrb	r3, [r6, r3]
     8b2:	b2db      	uxtb	r3, r3
     8b4:	702b      	strb	r3, [r5, #0]
}
     8b6:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8b8:	6872      	ldr	r2, [r6, #4]
     8ba:	2380      	movs	r3, #128	; 0x80
     8bc:	02db      	lsls	r3, r3, #11
     8be:	4313      	orrs	r3, r2
     8c0:	6073      	str	r3, [r6, #4]
     8c2:	e7e8      	b.n	896 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     8c4:	7ac3      	ldrb	r3, [r0, #11]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d0e5      	beq.n	896 <_i2c_master_read+0x2a>
     8ca:	8b83      	ldrh	r3, [r0, #28]
     8cc:	b29b      	uxth	r3, r3
     8ce:	2b00      	cmp	r3, #0
     8d0:	d1e1      	bne.n	896 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     8d2:	6872      	ldr	r2, [r6, #4]
     8d4:	2380      	movs	r3, #128	; 0x80
     8d6:	02db      	lsls	r3, r3, #11
     8d8:	4313      	orrs	r3, r2
     8da:	6073      	str	r3, [r6, #4]
     8dc:	e7db      	b.n	896 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     8de:	0020      	movs	r0, r4
     8e0:	4b03      	ldr	r3, [pc, #12]	; (8f0 <_i2c_master_read+0x84>)
     8e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8e4:	6872      	ldr	r2, [r6, #4]
     8e6:	23c0      	movs	r3, #192	; 0xc0
     8e8:	029b      	lsls	r3, r3, #10
     8ea:	4313      	orrs	r3, r2
     8ec:	6073      	str	r3, [r6, #4]
     8ee:	e7d9      	b.n	8a4 <_i2c_master_read+0x38>
     8f0:	00000861 	.word	0x00000861

000008f4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     8f4:	b570      	push	{r4, r5, r6, lr}
     8f6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     8f8:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     8fa:	8b6b      	ldrh	r3, [r5, #26]
     8fc:	075b      	lsls	r3, r3, #29
     8fe:	d503      	bpl.n	908 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     900:	221e      	movs	r2, #30
     902:	2325      	movs	r3, #37	; 0x25
     904:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     906:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     908:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     90a:	8b83      	ldrh	r3, [r0, #28]
     90c:	1af6      	subs	r6, r6, r3
     90e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     910:	8b83      	ldrh	r3, [r0, #28]
     912:	3b01      	subs	r3, #1
     914:	b29b      	uxth	r3, r3
     916:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     918:	4b04      	ldr	r3, [pc, #16]	; (92c <_i2c_master_write+0x38>)
     91a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     91c:	6a23      	ldr	r3, [r4, #32]
     91e:	199e      	adds	r6, r3, r6
     920:	7833      	ldrb	r3, [r6, #0]
     922:	b2db      	uxtb	r3, r3
     924:	2228      	movs	r2, #40	; 0x28
     926:	54ab      	strb	r3, [r5, r2]
     928:	e7ed      	b.n	906 <_i2c_master_write+0x12>
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	00000861 	.word	0x00000861

00000930 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     930:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     932:	0080      	lsls	r0, r0, #2
     934:	4b75      	ldr	r3, [pc, #468]	; (b0c <_i2c_master_interrupt_handler+0x1dc>)
     936:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     938:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     93a:	682b      	ldr	r3, [r5, #0]
     93c:	011b      	lsls	r3, r3, #4
     93e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     940:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     942:	7e26      	ldrb	r6, [r4, #24]
     944:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     946:	8b63      	ldrh	r3, [r4, #26]
     948:	b29b      	uxth	r3, r3
     94a:	2b00      	cmp	r3, #0
     94c:	d103      	bne.n	956 <_i2c_master_interrupt_handler+0x26>
     94e:	8ba3      	ldrh	r3, [r4, #28]
     950:	b29b      	uxth	r3, r3
     952:	2b00      	cmp	r3, #0
     954:	d123      	bne.n	99e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     956:	8b63      	ldrh	r3, [r4, #26]
     958:	b29b      	uxth	r3, r3
     95a:	2b00      	cmp	r3, #0
     95c:	d008      	beq.n	970 <_i2c_master_interrupt_handler+0x40>
     95e:	8ba3      	ldrh	r3, [r4, #28]
     960:	b29b      	uxth	r3, r3
     962:	2b00      	cmp	r3, #0
     964:	d104      	bne.n	970 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     966:	3325      	adds	r3, #37	; 0x25
     968:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     96a:	2b05      	cmp	r3, #5
     96c:	d100      	bne.n	970 <_i2c_master_interrupt_handler+0x40>
     96e:	e06d      	b.n	a4c <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     970:	8b63      	ldrh	r3, [r4, #26]
     972:	b29b      	uxth	r3, r3
     974:	2b00      	cmp	r3, #0
     976:	d024      	beq.n	9c2 <_i2c_master_interrupt_handler+0x92>
     978:	8ba3      	ldrh	r3, [r4, #28]
     97a:	b29b      	uxth	r3, r3
     97c:	2b00      	cmp	r3, #0
     97e:	d020      	beq.n	9c2 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     980:	8b6b      	ldrh	r3, [r5, #26]
     982:	069b      	lsls	r3, r3, #26
     984:	d500      	bpl.n	988 <_i2c_master_interrupt_handler+0x58>
     986:	e081      	b.n	a8c <_i2c_master_interrupt_handler+0x15c>
     988:	2a00      	cmp	r2, #0
     98a:	d004      	beq.n	996 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     98c:	8ba3      	ldrh	r3, [r4, #28]
     98e:	b29b      	uxth	r3, r3
     990:	2b01      	cmp	r3, #1
     992:	d100      	bne.n	996 <_i2c_master_interrupt_handler+0x66>
     994:	e07a      	b.n	a8c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     996:	2241      	movs	r2, #65	; 0x41
     998:	2325      	movs	r3, #37	; 0x25
     99a:	54e2      	strb	r2, [r4, r3]
     99c:	e011      	b.n	9c2 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     99e:	7e2b      	ldrb	r3, [r5, #24]
     9a0:	07db      	lsls	r3, r3, #31
     9a2:	d507      	bpl.n	9b4 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     9a4:	2301      	movs	r3, #1
     9a6:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     9a8:	8b6b      	ldrh	r3, [r5, #26]
     9aa:	079b      	lsls	r3, r3, #30
     9ac:	d52e      	bpl.n	a0c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     9ae:	2241      	movs	r2, #65	; 0x41
     9b0:	2325      	movs	r3, #37	; 0x25
     9b2:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     9b4:	8ba3      	ldrh	r3, [r4, #28]
     9b6:	b29b      	uxth	r3, r3
     9b8:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     9ba:	2325      	movs	r3, #37	; 0x25
     9bc:	5ce3      	ldrb	r3, [r4, r3]
     9be:	2b05      	cmp	r3, #5
     9c0:	d038      	beq.n	a34 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     9c2:	8b63      	ldrh	r3, [r4, #26]
     9c4:	b29b      	uxth	r3, r3
     9c6:	2b00      	cmp	r3, #0
     9c8:	d007      	beq.n	9da <_i2c_master_interrupt_handler+0xaa>
     9ca:	8ba3      	ldrh	r3, [r4, #28]
     9cc:	b29b      	uxth	r3, r3
     9ce:	2b00      	cmp	r3, #0
     9d0:	d103      	bne.n	9da <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     9d2:	3325      	adds	r3, #37	; 0x25
     9d4:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     9d6:	2b05      	cmp	r3, #5
     9d8:	d064      	beq.n	aa4 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     9da:	2325      	movs	r3, #37	; 0x25
     9dc:	5ce3      	ldrb	r3, [r4, r3]
     9de:	2b05      	cmp	r3, #5
     9e0:	d013      	beq.n	a0a <_i2c_master_interrupt_handler+0xda>
     9e2:	2325      	movs	r3, #37	; 0x25
     9e4:	5ce3      	ldrb	r3, [r4, r3]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d00f      	beq.n	a0a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     9ea:	2303      	movs	r3, #3
     9ec:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     9ee:	2300      	movs	r3, #0
     9f0:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     9f2:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     9f4:	3325      	adds	r3, #37	; 0x25
     9f6:	5ce3      	ldrb	r3, [r4, r3]
     9f8:	2b41      	cmp	r3, #65	; 0x41
     9fa:	d003      	beq.n	a04 <_i2c_master_interrupt_handler+0xd4>
     9fc:	7aa3      	ldrb	r3, [r4, #10]
     9fe:	2b00      	cmp	r3, #0
     a00:	d000      	beq.n	a04 <_i2c_master_interrupt_handler+0xd4>
     a02:	e075      	b.n	af0 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     a04:	0773      	lsls	r3, r6, #29
     a06:	d500      	bpl.n	a0a <_i2c_master_interrupt_handler+0xda>
     a08:	e07b      	b.n	b02 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     a0a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     a0c:	8b6b      	ldrh	r3, [r5, #26]
     a0e:	075b      	lsls	r3, r3, #29
     a10:	d5d0      	bpl.n	9b4 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     a12:	2218      	movs	r2, #24
     a14:	2325      	movs	r3, #37	; 0x25
     a16:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     a18:	2300      	movs	r3, #0
     a1a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     a1c:	7aa3      	ldrb	r3, [r4, #10]
     a1e:	2b00      	cmp	r3, #0
     a20:	d0c8      	beq.n	9b4 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     a22:	0020      	movs	r0, r4
     a24:	4b3a      	ldr	r3, [pc, #232]	; (b10 <_i2c_master_interrupt_handler+0x1e0>)
     a26:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a28:	686a      	ldr	r2, [r5, #4]
     a2a:	23c0      	movs	r3, #192	; 0xc0
     a2c:	029b      	lsls	r3, r3, #10
     a2e:	4313      	orrs	r3, r2
     a30:	606b      	str	r3, [r5, #4]
     a32:	e7bf      	b.n	9b4 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a34:	331f      	adds	r3, #31
     a36:	5ce3      	ldrb	r3, [r4, r3]
     a38:	2b00      	cmp	r3, #0
     a3a:	d003      	beq.n	a44 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     a3c:	0020      	movs	r0, r4
     a3e:	4b35      	ldr	r3, [pc, #212]	; (b14 <_i2c_master_interrupt_handler+0x1e4>)
     a40:	4798      	blx	r3
     a42:	e7be      	b.n	9c2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     a44:	0020      	movs	r0, r4
     a46:	4b34      	ldr	r3, [pc, #208]	; (b18 <_i2c_master_interrupt_handler+0x1e8>)
     a48:	4798      	blx	r3
     a4a:	e7ba      	b.n	9c2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     a4c:	331f      	adds	r3, #31
     a4e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     a50:	2b00      	cmp	r3, #0
     a52:	d000      	beq.n	a56 <_i2c_master_interrupt_handler+0x126>
     a54:	e78c      	b.n	970 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     a56:	3303      	adds	r3, #3
     a58:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     a5a:	2300      	movs	r3, #0
     a5c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     a5e:	3325      	adds	r3, #37	; 0x25
     a60:	2200      	movs	r2, #0
     a62:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     a64:	7aa3      	ldrb	r3, [r4, #10]
     a66:	2b00      	cmp	r3, #0
     a68:	d107      	bne.n	a7a <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     a6a:	2301      	movs	r3, #1
     a6c:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     a6e:	07f3      	lsls	r3, r6, #31
     a70:	d5a7      	bpl.n	9c2 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     a72:	68e3      	ldr	r3, [r4, #12]
     a74:	0020      	movs	r0, r4
     a76:	4798      	blx	r3
     a78:	e7a3      	b.n	9c2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     a7a:	0020      	movs	r0, r4
     a7c:	4b24      	ldr	r3, [pc, #144]	; (b10 <_i2c_master_interrupt_handler+0x1e0>)
     a7e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     a80:	686a      	ldr	r2, [r5, #4]
     a82:	23c0      	movs	r3, #192	; 0xc0
     a84:	029b      	lsls	r3, r3, #10
     a86:	4313      	orrs	r3, r2
     a88:	606b      	str	r3, [r5, #4]
     a8a:	e7f0      	b.n	a6e <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     a8c:	2324      	movs	r3, #36	; 0x24
     a8e:	5ce3      	ldrb	r3, [r4, r3]
     a90:	2b00      	cmp	r3, #0
     a92:	d103      	bne.n	a9c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     a94:	0020      	movs	r0, r4
     a96:	4b20      	ldr	r3, [pc, #128]	; (b18 <_i2c_master_interrupt_handler+0x1e8>)
     a98:	4798      	blx	r3
     a9a:	e792      	b.n	9c2 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     a9c:	0020      	movs	r0, r4
     a9e:	4b1d      	ldr	r3, [pc, #116]	; (b14 <_i2c_master_interrupt_handler+0x1e4>)
     aa0:	4798      	blx	r3
     aa2:	e78e      	b.n	9c2 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     aa4:	331f      	adds	r3, #31
     aa6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     aa8:	2b01      	cmp	r3, #1
     aaa:	d196      	bne.n	9da <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     aac:	7e2b      	ldrb	r3, [r5, #24]
     aae:	079b      	lsls	r3, r3, #30
     ab0:	d501      	bpl.n	ab6 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ab2:	2302      	movs	r3, #2
     ab4:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     ab6:	2303      	movs	r3, #3
     ab8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     aba:	2300      	movs	r3, #0
     abc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     abe:	3325      	adds	r3, #37	; 0x25
     ac0:	2200      	movs	r2, #0
     ac2:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     ac4:	07b3      	lsls	r3, r6, #30
     ac6:	d503      	bpl.n	ad0 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     ac8:	2324      	movs	r3, #36	; 0x24
     aca:	5ce3      	ldrb	r3, [r4, r3]
     acc:	2b01      	cmp	r3, #1
     ace:	d00b      	beq.n	ae8 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     ad0:	07f3      	lsls	r3, r6, #31
     ad2:	d400      	bmi.n	ad6 <_i2c_master_interrupt_handler+0x1a6>
     ad4:	e781      	b.n	9da <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     ad6:	2324      	movs	r3, #36	; 0x24
     ad8:	5ce3      	ldrb	r3, [r4, r3]
     ada:	2b00      	cmp	r3, #0
     adc:	d000      	beq.n	ae0 <_i2c_master_interrupt_handler+0x1b0>
     ade:	e77c      	b.n	9da <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     ae0:	68e3      	ldr	r3, [r4, #12]
     ae2:	0020      	movs	r0, r4
     ae4:	4798      	blx	r3
     ae6:	e778      	b.n	9da <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     ae8:	6923      	ldr	r3, [r4, #16]
     aea:	0020      	movs	r0, r4
     aec:	4798      	blx	r3
     aee:	e774      	b.n	9da <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     af0:	0020      	movs	r0, r4
     af2:	4b07      	ldr	r3, [pc, #28]	; (b10 <_i2c_master_interrupt_handler+0x1e0>)
     af4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     af6:	686a      	ldr	r2, [r5, #4]
     af8:	23e0      	movs	r3, #224	; 0xe0
     afa:	02db      	lsls	r3, r3, #11
     afc:	4313      	orrs	r3, r2
     afe:	606b      	str	r3, [r5, #4]
     b00:	e780      	b.n	a04 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     b02:	6963      	ldr	r3, [r4, #20]
     b04:	0020      	movs	r0, r4
     b06:	4798      	blx	r3
}
     b08:	e77f      	b.n	a0a <_i2c_master_interrupt_handler+0xda>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	20000278 	.word	0x20000278
     b10:	00000861 	.word	0x00000861
     b14:	0000086d 	.word	0x0000086d
     b18:	000008f5 	.word	0x000008f5

00000b1c <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     b1c:	2000      	movs	r0, #0
     b1e:	4770      	bx	lr

00000b20 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     b20:	b530      	push	{r4, r5, lr}
     b22:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
     b24:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
     b26:	2903      	cmp	r1, #3
     b28:	d900      	bls.n	b2c <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
     b2a:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
     b2c:	4d11      	ldr	r5, [pc, #68]	; (b74 <_tcc_set_compare_value+0x54>)
     b2e:	42aa      	cmp	r2, r5
     b30:	d8fb      	bhi.n	b2a <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
     b32:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
     b34:	2b00      	cmp	r3, #0
     b36:	d010      	beq.n	b5a <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
     b38:	2480      	movs	r4, #128	; 0x80
     b3a:	0264      	lsls	r4, r4, #9
     b3c:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
     b3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
     b40:	421c      	tst	r4, r3
     b42:	d1fc      	bne.n	b3e <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
     b44:	2480      	movs	r4, #128	; 0x80
     b46:	0324      	lsls	r4, r4, #12
     b48:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
     b4a:	6883      	ldr	r3, [r0, #8]
     b4c:	421c      	tst	r4, r3
     b4e:	d1fc      	bne.n	b4a <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
     b50:	311c      	adds	r1, #28
     b52:	0089      	lsls	r1, r1, #2
     b54:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
     b56:	2000      	movs	r0, #0
     b58:	e7e7      	b.n	b2a <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     b5a:	2480      	movs	r4, #128	; 0x80
     b5c:	0064      	lsls	r4, r4, #1
     b5e:	408c      	lsls	r4, r1
     b60:	6883      	ldr	r3, [r0, #8]
     b62:	421c      	tst	r4, r3
     b64:	d1fc      	bne.n	b60 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
     b66:	3110      	adds	r1, #16
     b68:	0089      	lsls	r1, r1, #2
     b6a:	1841      	adds	r1, r0, r1
     b6c:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
     b6e:	2000      	movs	r0, #0
     b70:	e7db      	b.n	b2a <_tcc_set_compare_value+0xa>
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	00ffffff 	.word	0x00ffffff

00000b78 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
     b78:	2300      	movs	r3, #0
     b7a:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
     b7c:	4a4c      	ldr	r2, [pc, #304]	; (cb0 <tcc_get_config_defaults+0x138>)
     b7e:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
     b80:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     b82:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     b84:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     b86:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
     b88:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     b8a:	61c3      	str	r3, [r0, #28]
     b8c:	6203      	str	r3, [r0, #32]
     b8e:	6243      	str	r3, [r0, #36]	; 0x24
     b90:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     b92:	7503      	strb	r3, [r0, #20]
     b94:	7543      	strb	r3, [r0, #21]
     b96:	7583      	strb	r3, [r0, #22]
     b98:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     b9a:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     b9c:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     b9e:	7403      	strb	r3, [r0, #16]
     ba0:	7443      	strb	r3, [r0, #17]
     ba2:	7483      	strb	r3, [r0, #18]
     ba4:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     ba6:	222c      	movs	r2, #44	; 0x2c
     ba8:	5483      	strb	r3, [r0, r2]
     baa:	3201      	adds	r2, #1
     bac:	5483      	strb	r3, [r0, r2]
     bae:	3201      	adds	r2, #1
     bb0:	5483      	strb	r3, [r0, r2]
     bb2:	3201      	adds	r2, #1
     bb4:	5483      	strb	r3, [r0, r2]
     bb6:	3201      	adds	r2, #1
     bb8:	5483      	strb	r3, [r0, r2]
     bba:	3201      	adds	r2, #1
     bbc:	5483      	strb	r3, [r0, r2]
     bbe:	3201      	adds	r2, #1
     bc0:	5483      	strb	r3, [r0, r2]
     bc2:	3201      	adds	r2, #1
     bc4:	5483      	strb	r3, [r0, r2]
     bc6:	3201      	adds	r2, #1
     bc8:	5483      	strb	r3, [r0, r2]
     bca:	3201      	adds	r2, #1
     bcc:	5483      	strb	r3, [r0, r2]
     bce:	3201      	adds	r2, #1
     bd0:	5483      	strb	r3, [r0, r2]
     bd2:	3201      	adds	r2, #1
     bd4:	5483      	strb	r3, [r0, r2]
     bd6:	3201      	adds	r2, #1
     bd8:	5483      	strb	r3, [r0, r2]
     bda:	3201      	adds	r2, #1
     bdc:	5483      	strb	r3, [r0, r2]
     bde:	3201      	adds	r2, #1
     be0:	5483      	strb	r3, [r0, r2]
     be2:	3201      	adds	r2, #1
     be4:	5483      	strb	r3, [r0, r2]
     be6:	3201      	adds	r2, #1
     be8:	5483      	strb	r3, [r0, r2]
     bea:	3201      	adds	r2, #1
     bec:	5483      	strb	r3, [r0, r2]
     bee:	3201      	adds	r2, #1
     bf0:	5483      	strb	r3, [r0, r2]
     bf2:	3201      	adds	r2, #1
     bf4:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     bf6:	3201      	adds	r2, #1
     bf8:	5483      	strb	r3, [r0, r2]
     bfa:	3201      	adds	r2, #1
     bfc:	5483      	strb	r3, [r0, r2]
     bfe:	3201      	adds	r2, #1
     c00:	5483      	strb	r3, [r0, r2]
     c02:	3201      	adds	r2, #1
     c04:	5483      	strb	r3, [r0, r2]
     c06:	3201      	adds	r2, #1
     c08:	5483      	strb	r3, [r0, r2]
     c0a:	3201      	adds	r2, #1
     c0c:	5483      	strb	r3, [r0, r2]
     c0e:	3201      	adds	r2, #1
     c10:	5483      	strb	r3, [r0, r2]
     c12:	3201      	adds	r2, #1
     c14:	5483      	strb	r3, [r0, r2]
     c16:	3201      	adds	r2, #1
     c18:	5483      	strb	r3, [r0, r2]
     c1a:	3201      	adds	r2, #1
     c1c:	5483      	strb	r3, [r0, r2]
     c1e:	3201      	adds	r2, #1
     c20:	5483      	strb	r3, [r0, r2]
     c22:	3201      	adds	r2, #1
     c24:	5483      	strb	r3, [r0, r2]
     c26:	3201      	adds	r2, #1
     c28:	5483      	strb	r3, [r0, r2]
     c2a:	3201      	adds	r2, #1
     c2c:	5483      	strb	r3, [r0, r2]
     c2e:	3201      	adds	r2, #1
     c30:	5483      	strb	r3, [r0, r2]
     c32:	3201      	adds	r2, #1
     c34:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     c36:	3201      	adds	r2, #1
     c38:	5483      	strb	r3, [r0, r2]
     c3a:	3201      	adds	r2, #1
     c3c:	5483      	strb	r3, [r0, r2]
     c3e:	3201      	adds	r2, #1
     c40:	5483      	strb	r3, [r0, r2]
     c42:	3201      	adds	r2, #1
     c44:	5483      	strb	r3, [r0, r2]
     c46:	3201      	adds	r2, #1
     c48:	5483      	strb	r3, [r0, r2]
     c4a:	3201      	adds	r2, #1
     c4c:	5483      	strb	r3, [r0, r2]
     c4e:	3201      	adds	r2, #1
     c50:	5483      	strb	r3, [r0, r2]
     c52:	3201      	adds	r2, #1
     c54:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     c56:	3241      	adds	r2, #65	; 0x41
     c58:	5483      	strb	r3, [r0, r2]
     c5a:	6583      	str	r3, [r0, #88]	; 0x58
     c5c:	6783      	str	r3, [r0, #120]	; 0x78
     c5e:	3201      	adds	r2, #1
     c60:	5483      	strb	r3, [r0, r2]
     c62:	65c3      	str	r3, [r0, #92]	; 0x5c
     c64:	67c3      	str	r3, [r0, #124]	; 0x7c
     c66:	3201      	adds	r2, #1
     c68:	5483      	strb	r3, [r0, r2]
     c6a:	6603      	str	r3, [r0, #96]	; 0x60
     c6c:	3a1a      	subs	r2, #26
     c6e:	5083      	str	r3, [r0, r2]
     c70:	321b      	adds	r2, #27
     c72:	5483      	strb	r3, [r0, r2]
     c74:	6643      	str	r3, [r0, #100]	; 0x64
     c76:	3a17      	subs	r2, #23
     c78:	5083      	str	r3, [r0, r2]
     c7a:	3218      	adds	r2, #24
     c7c:	5483      	strb	r3, [r0, r2]
     c7e:	6683      	str	r3, [r0, #104]	; 0x68
     c80:	3a14      	subs	r2, #20
     c82:	5083      	str	r3, [r0, r2]
     c84:	3215      	adds	r2, #21
     c86:	5483      	strb	r3, [r0, r2]
     c88:	66c3      	str	r3, [r0, #108]	; 0x6c
     c8a:	3a11      	subs	r2, #17
     c8c:	5083      	str	r3, [r0, r2]
     c8e:	3212      	adds	r2, #18
     c90:	5483      	strb	r3, [r0, r2]
     c92:	6703      	str	r3, [r0, #112]	; 0x70
     c94:	3a0e      	subs	r2, #14
     c96:	5083      	str	r3, [r0, r2]
     c98:	320f      	adds	r2, #15
     c9a:	5483      	strb	r3, [r0, r2]
     c9c:	6743      	str	r3, [r0, #116]	; 0x74
     c9e:	3a0b      	subs	r2, #11
     ca0:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
     ca2:	2101      	movs	r1, #1
     ca4:	320c      	adds	r2, #12
     ca6:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
     ca8:	3201      	adds	r2, #1
     caa:	5483      	strb	r3, [r0, r2]
}
     cac:	4770      	bx	lr
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	00ffffff 	.word	0x00ffffff

00000cb4 <tcc_init>:
{
     cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb6:	46de      	mov	lr, fp
     cb8:	4657      	mov	r7, sl
     cba:	464e      	mov	r6, r9
     cbc:	4645      	mov	r5, r8
     cbe:	b5e0      	push	{r5, r6, r7, lr}
     cc0:	b08d      	sub	sp, #52	; 0x34
     cc2:	0006      	movs	r6, r0
     cc4:	000c      	movs	r4, r1
     cc6:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     cc8:	0008      	movs	r0, r1
     cca:	4bcd      	ldr	r3, [pc, #820]	; (1000 <tcc_init+0x34c>)
     ccc:	4798      	blx	r3
     cce:	0003      	movs	r3, r0
     cd0:	49cc      	ldr	r1, [pc, #816]	; (1004 <tcc_init+0x350>)
     cd2:	6a0a      	ldr	r2, [r1, #32]
     cd4:	2020      	movs	r0, #32
     cd6:	4302      	orrs	r2, r0
     cd8:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     cda:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     cdc:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     cde:	0792      	lsls	r2, r2, #30
     ce0:	d506      	bpl.n	cf0 <tcc_init+0x3c>
}
     ce2:	b00d      	add	sp, #52	; 0x34
     ce4:	bc3c      	pop	{r2, r3, r4, r5}
     ce6:	4690      	mov	r8, r2
     ce8:	4699      	mov	r9, r3
     cea:	46a2      	mov	sl, r4
     cec:	46ab      	mov	fp, r5
     cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     cf0:	6822      	ldr	r2, [r4, #0]
     cf2:	2701      	movs	r7, #1
     cf4:	4017      	ands	r7, r2
     cf6:	d1f4      	bne.n	ce2 <tcc_init+0x2e>
	if ((config->counter.count > count_max)
     cf8:	4ac3      	ldr	r2, [pc, #780]	; (1008 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
     cfa:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
     cfc:	6829      	ldr	r1, [r5, #0]
     cfe:	4291      	cmp	r1, r2
     d00:	d8ef      	bhi.n	ce2 <tcc_init+0x2e>
		|| (config->counter.period > count_max)
     d02:	6869      	ldr	r1, [r5, #4]
     d04:	4291      	cmp	r1, r2
     d06:	d8ec      	bhi.n	ce2 <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
     d08:	69e9      	ldr	r1, [r5, #28]
     d0a:	4291      	cmp	r1, r2
     d0c:	d900      	bls.n	d10 <tcc_init+0x5c>
     d0e:	e18b      	b.n	1028 <tcc_init+0x374>
     d10:	6a29      	ldr	r1, [r5, #32]
     d12:	4291      	cmp	r1, r2
     d14:	d900      	bls.n	d18 <tcc_init+0x64>
     d16:	e189      	b.n	102c <tcc_init+0x378>
     d18:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d1a:	4291      	cmp	r1, r2
     d1c:	d900      	bls.n	d20 <tcc_init+0x6c>
     d1e:	e187      	b.n	1030 <tcc_init+0x37c>
     d20:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     d22:	4291      	cmp	r1, r2
     d24:	d900      	bls.n	d28 <tcc_init+0x74>
     d26:	e185      	b.n	1034 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
     d28:	7c2a      	ldrb	r2, [r5, #16]
     d2a:	3a01      	subs	r2, #1
     d2c:	4250      	negs	r0, r2
     d2e:	4150      	adcs	r0, r2
     d30:	0602      	lsls	r2, r0, #24
     d32:	9201      	str	r2, [sp, #4]
     d34:	7c6a      	ldrb	r2, [r5, #17]
     d36:	2a01      	cmp	r2, #1
     d38:	d031      	beq.n	d9e <tcc_init+0xea>
     d3a:	7caa      	ldrb	r2, [r5, #18]
     d3c:	2a01      	cmp	r2, #1
     d3e:	d034      	beq.n	daa <tcc_init+0xf6>
     d40:	7cea      	ldrb	r2, [r5, #19]
     d42:	2a01      	cmp	r2, #1
     d44:	d037      	beq.n	db6 <tcc_init+0x102>
	if (config->run_in_standby) {
     d46:	22a1      	movs	r2, #161	; 0xa1
     d48:	5caa      	ldrb	r2, [r5, r2]
     d4a:	2a00      	cmp	r2, #0
     d4c:	d004      	beq.n	d58 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     d4e:	2280      	movs	r2, #128	; 0x80
     d50:	0112      	lsls	r2, r2, #4
     d52:	9901      	ldr	r1, [sp, #4]
     d54:	4311      	orrs	r1, r2
     d56:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
     d58:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     d5a:	1e51      	subs	r1, r2, #1
     d5c:	418a      	sbcs	r2, r1
     d5e:	0092      	lsls	r2, r2, #2
     d60:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     d62:	7a6a      	ldrb	r2, [r5, #9]
     d64:	2a01      	cmp	r2, #1
     d66:	d02c      	beq.n	dc2 <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
     d68:	2235      	movs	r2, #53	; 0x35
     d6a:	5caa      	ldrb	r2, [r5, r2]
     d6c:	2a03      	cmp	r2, #3
     d6e:	d900      	bls.n	d72 <tcc_init+0xbe>
     d70:	e162      	b.n	1038 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     d72:	212c      	movs	r1, #44	; 0x2c
     d74:	5c69      	ldrb	r1, [r5, r1]
     d76:	290f      	cmp	r1, #15
     d78:	d900      	bls.n	d7c <tcc_init+0xc8>
     d7a:	e15d      	b.n	1038 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     d7c:	7b28      	ldrb	r0, [r5, #12]
     d7e:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     d80:	7ae8      	ldrb	r0, [r5, #11]
     d82:	9005      	str	r0, [sp, #20]
     d84:	202d      	movs	r0, #45	; 0x2d
     d86:	4682      	mov	sl, r0
     d88:	44aa      	add	sl, r5
     d8a:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     d8c:	9702      	str	r7, [sp, #8]
     d8e:	4684      	mov	ip, r0
     d90:	9606      	str	r6, [sp, #24]
     d92:	000e      	movs	r6, r1
     d94:	46a0      	mov	r8, r4
     d96:	4654      	mov	r4, sl
     d98:	46a9      	mov	r9, r5
     d9a:	9307      	str	r3, [sp, #28]
     d9c:	e047      	b.n	e2e <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     d9e:	2280      	movs	r2, #128	; 0x80
     da0:	0492      	lsls	r2, r2, #18
     da2:	9901      	ldr	r1, [sp, #4]
     da4:	4311      	orrs	r1, r2
     da6:	9101      	str	r1, [sp, #4]
     da8:	e7c7      	b.n	d3a <tcc_init+0x86>
     daa:	2280      	movs	r2, #128	; 0x80
     dac:	04d2      	lsls	r2, r2, #19
     dae:	9901      	ldr	r1, [sp, #4]
     db0:	4311      	orrs	r1, r2
     db2:	9101      	str	r1, [sp, #4]
     db4:	e7c4      	b.n	d40 <tcc_init+0x8c>
     db6:	2280      	movs	r2, #128	; 0x80
     db8:	0512      	lsls	r2, r2, #20
     dba:	9901      	ldr	r1, [sp, #4]
     dbc:	4311      	orrs	r1, r2
     dbe:	9101      	str	r1, [sp, #4]
     dc0:	e7c1      	b.n	d46 <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
     dc2:	9903      	ldr	r1, [sp, #12]
     dc4:	4311      	orrs	r1, r2
     dc6:	9103      	str	r1, [sp, #12]
     dc8:	e7ce      	b.n	d68 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     dca:	0292      	lsls	r2, r2, #10
     dcc:	25c0      	movs	r5, #192	; 0xc0
     dce:	012d      	lsls	r5, r5, #4
     dd0:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     dd2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
     dd4:	790d      	ldrb	r5, [r1, #4]
     dd6:	2603      	movs	r6, #3
     dd8:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     dda:	4332      	orrs	r2, r6
     ddc:	4655      	mov	r5, sl
     dde:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
     de0:	794e      	ldrb	r6, [r1, #5]
     de2:	0176      	lsls	r6, r6, #5
     de4:	2560      	movs	r5, #96	; 0x60
     de6:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     de8:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
     dea:	798d      	ldrb	r5, [r1, #6]
     dec:	022d      	lsls	r5, r5, #8
     dee:	26c0      	movs	r6, #192	; 0xc0
     df0:	00b6      	lsls	r6, r6, #2
     df2:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     df4:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     df6:	79cd      	ldrb	r5, [r1, #7]
     df8:	032d      	lsls	r5, r5, #12
     dfa:	26e0      	movs	r6, #224	; 0xe0
     dfc:	01f6      	lsls	r6, r6, #7
     dfe:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     e00:	432a      	orrs	r2, r5
     e02:	4310      	orrs	r0, r2
     e04:	4303      	orrs	r3, r0
     e06:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
     e08:	ab08      	add	r3, sp, #32
     e0a:	4662      	mov	r2, ip
     e0c:	2008      	movs	r0, #8
     e0e:	181b      	adds	r3, r3, r0
     e10:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     e12:	2a04      	cmp	r2, #4
     e14:	d028      	beq.n	e68 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
     e16:	7c8a      	ldrb	r2, [r1, #18]
     e18:	2a03      	cmp	r2, #3
     e1a:	d900      	bls.n	e1e <tcc_init+0x16a>
     e1c:	e10c      	b.n	1038 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     e1e:	7a4e      	ldrb	r6, [r1, #9]
     e20:	340a      	adds	r4, #10
     e22:	2304      	movs	r3, #4
     e24:	469a      	mov	sl, r3
     e26:	44d4      	add	ip, sl
     e28:	2e0f      	cmp	r6, #15
     e2a:	d900      	bls.n	e2e <tcc_init+0x17a>
     e2c:	e104      	b.n	1038 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     e2e:	0636      	lsls	r6, r6, #24
     e30:	23f0      	movs	r3, #240	; 0xf0
     e32:	051b      	lsls	r3, r3, #20
     e34:	401e      	ands	r6, r3
     e36:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     e38:	7825      	ldrb	r5, [r4, #0]
     e3a:	042d      	lsls	r5, r5, #16
     e3c:	23ff      	movs	r3, #255	; 0xff
     e3e:	041b      	lsls	r3, r3, #16
     e40:	401d      	ands	r5, r3
     e42:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     e44:	7863      	ldrb	r3, [r4, #1]
     e46:	2080      	movs	r0, #128	; 0x80
     e48:	2b00      	cmp	r3, #0
     e4a:	d100      	bne.n	e4e <tcc_init+0x19a>
     e4c:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     e4e:	788f      	ldrb	r7, [r1, #2]
     e50:	2308      	movs	r3, #8
     e52:	2f00      	cmp	r7, #0
     e54:	d100      	bne.n	e58 <tcc_init+0x1a4>
     e56:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     e58:	78cf      	ldrb	r7, [r1, #3]
     e5a:	46bb      	mov	fp, r7
     e5c:	2710      	movs	r7, #16
     e5e:	465d      	mov	r5, fp
     e60:	2d00      	cmp	r5, #0
     e62:	d1b2      	bne.n	dca <tcc_init+0x116>
     e64:	9f02      	ldr	r7, [sp, #8]
     e66:	e7b0      	b.n	dca <tcc_init+0x116>
     e68:	9e06      	ldr	r6, [sp, #24]
     e6a:	4644      	mov	r4, r8
     e6c:	464d      	mov	r5, r9
     e6e:	9b07      	ldr	r3, [sp, #28]
     e70:	4648      	mov	r0, r9
     e72:	3050      	adds	r0, #80	; 0x50
     e74:	4649      	mov	r1, r9
     e76:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     e78:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     e7a:	2780      	movs	r7, #128	; 0x80
     e7c:	027f      	lsls	r7, r7, #9
     e7e:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     e80:	2701      	movs	r7, #1
     e82:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     e84:	2702      	movs	r7, #2
     e86:	37ff      	adds	r7, #255	; 0xff
     e88:	46ba      	mov	sl, r7
     e8a:	001f      	movs	r7, r3
     e8c:	0013      	movs	r3, r2
     e8e:	46a0      	mov	r8, r4
     e90:	003c      	movs	r4, r7
     e92:	e007      	b.n	ea4 <tcc_init+0x1f0>
     e94:	4657      	mov	r7, sl
     e96:	4097      	lsls	r7, r2
     e98:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     e9a:	3201      	adds	r2, #1
     e9c:	3001      	adds	r0, #1
     e9e:	3102      	adds	r1, #2
     ea0:	2a08      	cmp	r2, #8
     ea2:	d00e      	beq.n	ec2 <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
     ea4:	7807      	ldrb	r7, [r0, #0]
     ea6:	2f00      	cmp	r7, #0
     ea8:	d002      	beq.n	eb0 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     eaa:	4667      	mov	r7, ip
     eac:	4097      	lsls	r7, r2
     eae:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
     eb0:	780f      	ldrb	r7, [r1, #0]
     eb2:	2f00      	cmp	r7, #0
     eb4:	d0f1      	beq.n	e9a <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     eb6:	2f02      	cmp	r7, #2
     eb8:	d0ec      	beq.n	e94 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     eba:	464f      	mov	r7, r9
     ebc:	4097      	lsls	r7, r2
     ebe:	433b      	orrs	r3, r7
     ec0:	e7eb      	b.n	e9a <tcc_init+0x1e6>
     ec2:	0022      	movs	r2, r4
     ec4:	4644      	mov	r4, r8
     ec6:	4698      	mov	r8, r3
     ec8:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     eca:	7e6a      	ldrb	r2, [r5, #25]
     ecc:	0112      	lsls	r2, r2, #4
     ece:	2130      	movs	r1, #48	; 0x30
     ed0:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     ed2:	7e28      	ldrb	r0, [r5, #24]
     ed4:	2207      	movs	r2, #7
     ed6:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     ed8:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     eda:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     edc:	2080      	movs	r0, #128	; 0x80
     ede:	0240      	lsls	r0, r0, #9
     ee0:	000f      	movs	r7, r1
     ee2:	e002      	b.n	eea <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     ee4:	3201      	adds	r2, #1
     ee6:	2a04      	cmp	r2, #4
     ee8:	d007      	beq.n	efa <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
     eea:	18a9      	adds	r1, r5, r2
     eec:	7d09      	ldrb	r1, [r1, #20]
     eee:	2900      	cmp	r1, #0
     ef0:	d0f8      	beq.n	ee4 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
     ef2:	0001      	movs	r1, r0
     ef4:	4091      	lsls	r1, r2
     ef6:	430f      	orrs	r7, r1
     ef8:	e7f4      	b.n	ee4 <tcc_init+0x230>
     efa:	46b9      	mov	r9, r7
     efc:	1d32      	adds	r2, r6, #4
     efe:	0030      	movs	r0, r6
     f00:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     f02:	2100      	movs	r1, #0
     f04:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     f06:	4290      	cmp	r0, r2
     f08:	d1fc      	bne.n	f04 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
     f0a:	2200      	movs	r2, #0
     f0c:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     f0e:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     f10:	009b      	lsls	r3, r3, #2
     f12:	4a3e      	ldr	r2, [pc, #248]	; (100c <tcc_init+0x358>)
     f14:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
     f16:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     f18:	23a0      	movs	r3, #160	; 0xa0
     f1a:	5cea      	ldrb	r2, [r5, r3]
     f1c:	3b64      	subs	r3, #100	; 0x64
     f1e:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
     f20:	a909      	add	r1, sp, #36	; 0x24
     f22:	7aab      	ldrb	r3, [r5, #10]
     f24:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     f26:	2011      	movs	r0, #17
     f28:	4b39      	ldr	r3, [pc, #228]	; (1010 <tcc_init+0x35c>)
     f2a:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     f2c:	2011      	movs	r0, #17
     f2e:	4b39      	ldr	r3, [pc, #228]	; (1014 <tcc_init+0x360>)
     f30:	4798      	blx	r3
     f32:	002f      	movs	r7, r5
     f34:	3798      	adds	r7, #152	; 0x98
     f36:	002e      	movs	r6, r5
     f38:	3658      	adds	r6, #88	; 0x58
     f3a:	2378      	movs	r3, #120	; 0x78
     f3c:	469a      	mov	sl, r3
     f3e:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f40:	3b77      	subs	r3, #119	; 0x77
     f42:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(
     f44:	0023      	movs	r3, r4
     f46:	4654      	mov	r4, sl
     f48:	469a      	mov	sl, r3
     f4a:	e003      	b.n	f54 <tcc_init+0x2a0>
     f4c:	3701      	adds	r7, #1
     f4e:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     f50:	42b4      	cmp	r4, r6
     f52:	d014      	beq.n	f7e <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
     f54:	783b      	ldrb	r3, [r7, #0]
     f56:	2b00      	cmp	r3, #0
     f58:	d0f8      	beq.n	f4c <tcc_init+0x298>
     f5a:	ab08      	add	r3, sp, #32
     f5c:	465a      	mov	r2, fp
     f5e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     f60:	2300      	movs	r3, #0
     f62:	aa08      	add	r2, sp, #32
     f64:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     f66:	0013      	movs	r3, r2
     f68:	2220      	movs	r2, #32
     f6a:	18b2      	adds	r2, r6, r2
     f6c:	7812      	ldrb	r2, [r2, #0]
     f6e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     f70:	465a      	mov	r2, fp
     f72:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
     f74:	7830      	ldrb	r0, [r6, #0]
     f76:	0019      	movs	r1, r3
     f78:	4b27      	ldr	r3, [pc, #156]	; (1018 <tcc_init+0x364>)
     f7a:	4798      	blx	r3
     f7c:	e7e6      	b.n	f4c <tcc_init+0x298>
     f7e:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     f80:	9b04      	ldr	r3, [sp, #16]
     f82:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     f84:	9a05      	ldr	r2, [sp, #20]
     f86:	0212      	lsls	r2, r2, #8
     f88:	4313      	orrs	r3, r2
     f8a:	9a01      	ldr	r2, [sp, #4]
     f8c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     f8e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     f90:	2204      	movs	r2, #4
     f92:	68a3      	ldr	r3, [r4, #8]
     f94:	421a      	tst	r2, r3
     f96:	d1fc      	bne.n	f92 <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
     f98:	23ff      	movs	r3, #255	; 0xff
     f9a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     f9c:	2204      	movs	r2, #4
     f9e:	68a3      	ldr	r3, [r4, #8]
     fa0:	421a      	tst	r2, r3
     fa2:	d1fc      	bne.n	f9e <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
     fa4:	466b      	mov	r3, sp
     fa6:	7b1b      	ldrb	r3, [r3, #12]
     fa8:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     fac:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     fb0:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     fb2:	4643      	mov	r3, r8
     fb4:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     fb6:	4a19      	ldr	r2, [pc, #100]	; (101c <tcc_init+0x368>)
     fb8:	68a3      	ldr	r3, [r4, #8]
     fba:	4213      	tst	r3, r2
     fbc:	d1fc      	bne.n	fb8 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
     fbe:	464b      	mov	r3, r9
     fc0:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     fc2:	2210      	movs	r2, #16
     fc4:	68a3      	ldr	r3, [r4, #8]
     fc6:	421a      	tst	r2, r3
     fc8:	d1fc      	bne.n	fc4 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
     fca:	682b      	ldr	r3, [r5, #0]
     fcc:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     fce:	4a14      	ldr	r2, [pc, #80]	; (1020 <tcc_init+0x36c>)
     fd0:	68a3      	ldr	r3, [r4, #8]
     fd2:	4213      	tst	r3, r2
     fd4:	d1fc      	bne.n	fd0 <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
     fd6:	686b      	ldr	r3, [r5, #4]
     fd8:	6423      	str	r3, [r4, #64]	; 0x40
     fda:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     fdc:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     fde:	4811      	ldr	r0, [pc, #68]	; (1024 <tcc_init+0x370>)
     fe0:	0002      	movs	r2, r0
     fe2:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     fe4:	68a3      	ldr	r3, [r4, #8]
     fe6:	421a      	tst	r2, r3
     fe8:	d1fc      	bne.n	fe4 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
     fea:	cd04      	ldmia	r5!, {r2}
     fec:	000b      	movs	r3, r1
     fee:	3310      	adds	r3, #16
     ff0:	009b      	lsls	r3, r3, #2
     ff2:	18e3      	adds	r3, r4, r3
     ff4:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     ff6:	3101      	adds	r1, #1
     ff8:	2904      	cmp	r1, #4
     ffa:	d1f1      	bne.n	fe0 <tcc_init+0x32c>
	return STATUS_OK;
     ffc:	2000      	movs	r0, #0
     ffe:	e670      	b.n	ce2 <tcc_init+0x2e>
    1000:	00000b1d 	.word	0x00000b1d
    1004:	40000400 	.word	0x40000400
    1008:	00ffffff 	.word	0x00ffffff
    100c:	2000026c 	.word	0x2000026c
    1010:	00002499 	.word	0x00002499
    1014:	0000240d 	.word	0x0000240d
    1018:	00002591 	.word	0x00002591
    101c:	00020040 	.word	0x00020040
    1020:	00040080 	.word	0x00040080
    1024:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
    1028:	2017      	movs	r0, #23
    102a:	e65a      	b.n	ce2 <tcc_init+0x2e>
    102c:	2017      	movs	r0, #23
    102e:	e658      	b.n	ce2 <tcc_init+0x2e>
    1030:	2017      	movs	r0, #23
    1032:	e656      	b.n	ce2 <tcc_init+0x2e>
    1034:	2017      	movs	r0, #23
    1036:	e654      	b.n	ce2 <tcc_init+0x2e>
    1038:	2017      	movs	r0, #23
    103a:	e652      	b.n	ce2 <tcc_init+0x2e>

0000103c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    103c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    103e:	233c      	movs	r3, #60	; 0x3c
    1040:	5cc3      	ldrb	r3, [r0, r3]
    1042:	4c01      	ldr	r4, [pc, #4]	; (1048 <tcc_set_compare_value+0xc>)
    1044:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
    1046:	bd10      	pop	{r4, pc}
    1048:	00000b21 	.word	0x00000b21

0000104c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    104c:	b5f0      	push	{r4, r5, r6, r7, lr}
    104e:	46c6      	mov	lr, r8
    1050:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    1052:	0080      	lsls	r0, r0, #2
    1054:	4b0e      	ldr	r3, [pc, #56]	; (1090 <_tcc_interrupt_handler+0x44>)
    1056:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1058:	683b      	ldr	r3, [r7, #0]
    105a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    105e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1060:	4013      	ands	r3, r2
    1062:	401e      	ands	r6, r3
    1064:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1066:	4b0b      	ldr	r3, [pc, #44]	; (1094 <_tcc_interrupt_handler+0x48>)
    1068:	4698      	mov	r8, r3
    106a:	e002      	b.n	1072 <_tcc_interrupt_handler+0x26>
    106c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    106e:	2c30      	cmp	r4, #48	; 0x30
    1070:	d00a      	beq.n	1088 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1072:	4643      	mov	r3, r8
    1074:	58e5      	ldr	r5, [r4, r3]
    1076:	4235      	tst	r5, r6
    1078:	d0f8      	beq.n	106c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    107a:	193b      	adds	r3, r7, r4
    107c:	685b      	ldr	r3, [r3, #4]
    107e:	0038      	movs	r0, r7
    1080:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1082:	683b      	ldr	r3, [r7, #0]
    1084:	62dd      	str	r5, [r3, #44]	; 0x2c
    1086:	e7f1      	b.n	106c <_tcc_interrupt_handler+0x20>
		}
	}
}
    1088:	bc04      	pop	{r2}
    108a:	4690      	mov	r8, r2
    108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	2000026c 	.word	0x2000026c
    1094:	000029f8 	.word	0x000029f8

00001098 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1098:	b510      	push	{r4, lr}
    109a:	2000      	movs	r0, #0
    109c:	4b01      	ldr	r3, [pc, #4]	; (10a4 <TCC0_Handler+0xc>)
    109e:	4798      	blx	r3
    10a0:	bd10      	pop	{r4, pc}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	0000104d 	.word	0x0000104d

000010a8 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    10a8:	4b06      	ldr	r3, [pc, #24]	; (10c4 <_tc_get_inst_index+0x1c>)
    10aa:	4298      	cmp	r0, r3
    10ac:	d008      	beq.n	10c0 <_tc_get_inst_index+0x18>
    10ae:	4a06      	ldr	r2, [pc, #24]	; (10c8 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    10b0:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    10b2:	4290      	cmp	r0, r2
    10b4:	d001      	beq.n	10ba <_tc_get_inst_index+0x12>
}
    10b6:	0018      	movs	r0, r3
    10b8:	4770      	bx	lr
    10ba:	3301      	adds	r3, #1
			return i;
    10bc:	b2db      	uxtb	r3, r3
    10be:	e7fa      	b.n	10b6 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    10c0:	2300      	movs	r3, #0
    10c2:	e7fb      	b.n	10bc <_tc_get_inst_index+0x14>
    10c4:	42001800 	.word	0x42001800
    10c8:	42001c00 	.word	0x42001c00

000010cc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    10cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ce:	b085      	sub	sp, #20
    10d0:	0004      	movs	r4, r0
    10d2:	000d      	movs	r5, r1
    10d4:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    10d6:	0008      	movs	r0, r1
    10d8:	4b82      	ldr	r3, [pc, #520]	; (12e4 <tc_init+0x218>)
    10da:	4798      	blx	r3
    10dc:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    10de:	ab03      	add	r3, sp, #12
    10e0:	2212      	movs	r2, #18
    10e2:	701a      	strb	r2, [r3, #0]
    10e4:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    10e6:	ab02      	add	r3, sp, #8
    10e8:	322e      	adds	r2, #46	; 0x2e
    10ea:	801a      	strh	r2, [r3, #0]
    10ec:	3240      	adds	r2, #64	; 0x40
    10ee:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    10f0:	2300      	movs	r3, #0
    10f2:	60a3      	str	r3, [r4, #8]
    10f4:	60e3      	str	r3, [r4, #12]
    10f6:	6123      	str	r3, [r4, #16]
    10f8:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    10fa:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    10fc:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    10fe:	0082      	lsls	r2, r0, #2
    1100:	4b79      	ldr	r3, [pc, #484]	; (12e8 <tc_init+0x21c>)
    1102:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1104:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1106:	78b3      	ldrb	r3, [r6, #2]
    1108:	2b08      	cmp	r3, #8
    110a:	d006      	beq.n	111a <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    110c:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    110e:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1110:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1112:	07db      	lsls	r3, r3, #31
    1114:	d505      	bpl.n	1122 <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    1116:	b005      	add	sp, #20
    1118:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    111a:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    111c:	07fa      	lsls	r2, r7, #31
    111e:	d4fa      	bmi.n	1116 <tc_init+0x4a>
    1120:	e7f4      	b.n	110c <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1122:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    1124:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1126:	06db      	lsls	r3, r3, #27
    1128:	d4f5      	bmi.n	1116 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    112a:	882b      	ldrh	r3, [r5, #0]
    112c:	079b      	lsls	r3, r3, #30
    112e:	d4f2      	bmi.n	1116 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    1130:	7c33      	ldrb	r3, [r6, #16]
    1132:	2b00      	cmp	r3, #0
    1134:	d000      	beq.n	1138 <tc_init+0x6c>
    1136:	e07a      	b.n	122e <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    1138:	7f33      	ldrb	r3, [r6, #28]
    113a:	2b00      	cmp	r3, #0
    113c:	d000      	beq.n	1140 <tc_init+0x74>
    113e:	e082      	b.n	1246 <tc_init+0x17a>
    1140:	496a      	ldr	r1, [pc, #424]	; (12ec <tc_init+0x220>)
    1142:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    1144:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1146:	ab02      	add	r3, sp, #8
    1148:	5ad3      	ldrh	r3, [r2, r3]
    114a:	4303      	orrs	r3, r0
    114c:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    114e:	78b3      	ldrb	r3, [r6, #2]
    1150:	2b08      	cmp	r3, #8
    1152:	d100      	bne.n	1156 <tc_init+0x8a>
    1154:	e087      	b.n	1266 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    1156:	7833      	ldrb	r3, [r6, #0]
    1158:	466a      	mov	r2, sp
    115a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    115c:	ab03      	add	r3, sp, #12
    115e:	5ddf      	ldrb	r7, [r3, r7]
    1160:	4669      	mov	r1, sp
    1162:	0038      	movs	r0, r7
    1164:	4b62      	ldr	r3, [pc, #392]	; (12f0 <tc_init+0x224>)
    1166:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1168:	0038      	movs	r0, r7
    116a:	4b62      	ldr	r3, [pc, #392]	; (12f4 <tc_init+0x228>)
    116c:	4798      	blx	r3
	ctrla_tmp =
    116e:	8931      	ldrh	r1, [r6, #8]
    1170:	88b3      	ldrh	r3, [r6, #4]
    1172:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    1174:	78b1      	ldrb	r1, [r6, #2]
    1176:	79b2      	ldrb	r2, [r6, #6]
    1178:	4311      	orrs	r1, r2
	ctrla_tmp =
    117a:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    117c:	7873      	ldrb	r3, [r6, #1]
    117e:	2b00      	cmp	r3, #0
    1180:	d002      	beq.n	1188 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1182:	2380      	movs	r3, #128	; 0x80
    1184:	011b      	lsls	r3, r3, #4
    1186:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1188:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    118a:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    118c:	b25b      	sxtb	r3, r3
    118e:	2b00      	cmp	r3, #0
    1190:	dbfb      	blt.n	118a <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1192:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    1194:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1196:	1e4b      	subs	r3, r1, #1
    1198:	4199      	sbcs	r1, r3
    119a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    119c:	7bb3      	ldrb	r3, [r6, #14]
    119e:	2b00      	cmp	r3, #0
    11a0:	d001      	beq.n	11a6 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    11a2:	2301      	movs	r3, #1
    11a4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11a6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11a8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    11aa:	b25b      	sxtb	r3, r3
    11ac:	2b00      	cmp	r3, #0
    11ae:	dbfb      	blt.n	11a8 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    11b0:	23ff      	movs	r3, #255	; 0xff
    11b2:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    11b4:	2900      	cmp	r1, #0
    11b6:	d005      	beq.n	11c4 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11b8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11ba:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    11bc:	b25b      	sxtb	r3, r3
    11be:	2b00      	cmp	r3, #0
    11c0:	dbfb      	blt.n	11ba <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    11c2:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    11c4:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    11c6:	7af3      	ldrb	r3, [r6, #11]
    11c8:	2b00      	cmp	r3, #0
    11ca:	d001      	beq.n	11d0 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    11cc:	2310      	movs	r3, #16
    11ce:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    11d0:	7b33      	ldrb	r3, [r6, #12]
    11d2:	2b00      	cmp	r3, #0
    11d4:	d001      	beq.n	11da <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    11d6:	2320      	movs	r3, #32
    11d8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11da:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11dc:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    11de:	b25b      	sxtb	r3, r3
    11e0:	2b00      	cmp	r3, #0
    11e2:	dbfb      	blt.n	11dc <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    11e4:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    11e6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    11e8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    11ea:	b25b      	sxtb	r3, r3
    11ec:	2b00      	cmp	r3, #0
    11ee:	dbfb      	blt.n	11e8 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    11f0:	7923      	ldrb	r3, [r4, #4]
    11f2:	2b04      	cmp	r3, #4
    11f4:	d03f      	beq.n	1276 <tc_init+0x1aa>
    11f6:	2b08      	cmp	r3, #8
    11f8:	d05e      	beq.n	12b8 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    11fa:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    11fc:	2b00      	cmp	r3, #0
    11fe:	d000      	beq.n	1202 <tc_init+0x136>
    1200:	e789      	b.n	1116 <tc_init+0x4a>
    1202:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1204:	b25b      	sxtb	r3, r3
    1206:	2b00      	cmp	r3, #0
    1208:	dbfb      	blt.n	1202 <tc_init+0x136>
				= config->counter_16_bit.value;
    120a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    120c:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    120e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1210:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1212:	b25b      	sxtb	r3, r3
    1214:	2b00      	cmp	r3, #0
    1216:	dbfb      	blt.n	1210 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    1218:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    121a:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    121c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    121e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1220:	b25b      	sxtb	r3, r3
    1222:	2b00      	cmp	r3, #0
    1224:	dbfb      	blt.n	121e <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    1226:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1228:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    122a:	2000      	movs	r0, #0
    122c:	e773      	b.n	1116 <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    122e:	a901      	add	r1, sp, #4
    1230:	2301      	movs	r3, #1
    1232:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1234:	2200      	movs	r2, #0
    1236:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1238:	7e32      	ldrb	r2, [r6, #24]
    123a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    123c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    123e:	7d30      	ldrb	r0, [r6, #20]
    1240:	4b2d      	ldr	r3, [pc, #180]	; (12f8 <tc_init+0x22c>)
    1242:	4798      	blx	r3
    1244:	e778      	b.n	1138 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1246:	a901      	add	r1, sp, #4
    1248:	2301      	movs	r3, #1
    124a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    124c:	2200      	movs	r2, #0
    124e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1250:	3224      	adds	r2, #36	; 0x24
    1252:	18b2      	adds	r2, r6, r2
    1254:	7812      	ldrb	r2, [r2, #0]
    1256:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1258:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    125a:	331f      	adds	r3, #31
    125c:	18f3      	adds	r3, r6, r3
    125e:	7818      	ldrb	r0, [r3, #0]
    1260:	4b25      	ldr	r3, [pc, #148]	; (12f8 <tc_init+0x22c>)
    1262:	4798      	blx	r3
    1264:	e76c      	b.n	1140 <tc_init+0x74>
    1266:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    1268:	1c7a      	adds	r2, r7, #1
    126a:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    126c:	ab02      	add	r3, sp, #8
    126e:	5ad3      	ldrh	r3, [r2, r3]
    1270:	4303      	orrs	r3, r0
    1272:	620b      	str	r3, [r1, #32]
    1274:	e76f      	b.n	1156 <tc_init+0x8a>
    1276:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1278:	b25b      	sxtb	r3, r3
    127a:	2b00      	cmp	r3, #0
    127c:	dbfb      	blt.n	1276 <tc_init+0x1aa>
					config->counter_8_bit.value;
    127e:	2328      	movs	r3, #40	; 0x28
    1280:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    1282:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1284:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1286:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1288:	b25b      	sxtb	r3, r3
    128a:	2b00      	cmp	r3, #0
    128c:	dbfb      	blt.n	1286 <tc_init+0x1ba>
					config->counter_8_bit.period;
    128e:	2329      	movs	r3, #41	; 0x29
    1290:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    1292:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1294:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1296:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1298:	b25b      	sxtb	r3, r3
    129a:	2b00      	cmp	r3, #0
    129c:	dbfb      	blt.n	1296 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    129e:	232a      	movs	r3, #42	; 0x2a
    12a0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    12a2:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12a4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12a6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12a8:	b25b      	sxtb	r3, r3
    12aa:	2b00      	cmp	r3, #0
    12ac:	dbfb      	blt.n	12a6 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    12ae:	232b      	movs	r3, #43	; 0x2b
    12b0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    12b2:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    12b4:	2000      	movs	r0, #0
    12b6:	e72e      	b.n	1116 <tc_init+0x4a>
    12b8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12ba:	b25b      	sxtb	r3, r3
    12bc:	2b00      	cmp	r3, #0
    12be:	dbfb      	blt.n	12b8 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    12c0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    12c2:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12c4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12c6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12c8:	b25b      	sxtb	r3, r3
    12ca:	2b00      	cmp	r3, #0
    12cc:	dbfb      	blt.n	12c6 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    12ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    12d0:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    12d2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    12d4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    12d6:	b25b      	sxtb	r3, r3
    12d8:	2b00      	cmp	r3, #0
    12da:	dbfb      	blt.n	12d4 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    12dc:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    12de:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    12e0:	2000      	movs	r0, #0
    12e2:	e718      	b.n	1116 <tc_init+0x4a>
    12e4:	000010a9 	.word	0x000010a9
    12e8:	20000270 	.word	0x20000270
    12ec:	40000400 	.word	0x40000400
    12f0:	00002499 	.word	0x00002499
    12f4:	0000240d 	.word	0x0000240d
    12f8:	00002591 	.word	0x00002591

000012fc <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    12fc:	6802      	ldr	r2, [r0, #0]
    12fe:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1300:	b25b      	sxtb	r3, r3
    1302:	2b00      	cmp	r3, #0
    1304:	dbfb      	blt.n	12fe <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    1306:	7903      	ldrb	r3, [r0, #4]
    1308:	2b04      	cmp	r3, #4
    130a:	d005      	beq.n	1318 <tc_set_count_value+0x1c>
    130c:	2b08      	cmp	r3, #8
    130e:	d00b      	beq.n	1328 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
    1310:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1312:	2b00      	cmp	r3, #0
    1314:	d004      	beq.n	1320 <tc_set_count_value+0x24>
	}
}
    1316:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    1318:	b2c9      	uxtb	r1, r1
    131a:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
    131c:	2000      	movs	r0, #0
    131e:	e7fa      	b.n	1316 <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    1320:	b289      	uxth	r1, r1
    1322:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
    1324:	2000      	movs	r0, #0
    1326:	e7f6      	b.n	1316 <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1328:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
    132a:	2000      	movs	r0, #0
    132c:	e7f3      	b.n	1316 <tc_set_count_value+0x1a>

0000132e <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    132e:	6802      	ldr	r2, [r0, #0]
    1330:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1332:	b25b      	sxtb	r3, r3
    1334:	2b00      	cmp	r3, #0
    1336:	dbfb      	blt.n	1330 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    1338:	7903      	ldrb	r3, [r0, #4]
    133a:	2b04      	cmp	r3, #4
    133c:	d005      	beq.n	134a <tc_get_count_value+0x1c>
    133e:	2b08      	cmp	r3, #8
    1340:	d009      	beq.n	1356 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    1342:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    1344:	2b00      	cmp	r3, #0
    1346:	d003      	beq.n	1350 <tc_get_count_value+0x22>
}
    1348:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    134a:	7c10      	ldrb	r0, [r2, #16]
    134c:	b2c0      	uxtb	r0, r0
    134e:	e7fb      	b.n	1348 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    1350:	8a10      	ldrh	r0, [r2, #16]
    1352:	b280      	uxth	r0, r0
    1354:	e7f8      	b.n	1348 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
    1356:	6910      	ldr	r0, [r2, #16]
    1358:	e7f6      	b.n	1348 <tc_get_count_value+0x1a>

0000135a <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    135a:	1c93      	adds	r3, r2, #2
    135c:	009b      	lsls	r3, r3, #2
    135e:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1360:	2a02      	cmp	r2, #2
    1362:	d009      	beq.n	1378 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1364:	2a03      	cmp	r2, #3
    1366:	d00c      	beq.n	1382 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1368:	2301      	movs	r3, #1
    136a:	4093      	lsls	r3, r2
    136c:	001a      	movs	r2, r3
    136e:	7e03      	ldrb	r3, [r0, #24]
    1370:	4313      	orrs	r3, r2
    1372:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1374:	2000      	movs	r0, #0
    1376:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1378:	7e03      	ldrb	r3, [r0, #24]
    137a:	2210      	movs	r2, #16
    137c:	4313      	orrs	r3, r2
    137e:	7603      	strb	r3, [r0, #24]
    1380:	e7f8      	b.n	1374 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1382:	7e03      	ldrb	r3, [r0, #24]
    1384:	2220      	movs	r2, #32
    1386:	4313      	orrs	r3, r2
    1388:	7603      	strb	r3, [r0, #24]
    138a:	e7f3      	b.n	1374 <tc_register_callback+0x1a>

0000138c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    138c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    138e:	0080      	lsls	r0, r0, #2
    1390:	4b16      	ldr	r3, [pc, #88]	; (13ec <_tc_interrupt_handler+0x60>)
    1392:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1394:	6823      	ldr	r3, [r4, #0]
    1396:	7b9d      	ldrb	r5, [r3, #14]
    1398:	7e22      	ldrb	r2, [r4, #24]
    139a:	7e63      	ldrb	r3, [r4, #25]
    139c:	4013      	ands	r3, r2
    139e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    13a0:	07eb      	lsls	r3, r5, #31
    13a2:	d406      	bmi.n	13b2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    13a4:	07ab      	lsls	r3, r5, #30
    13a6:	d40b      	bmi.n	13c0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    13a8:	06eb      	lsls	r3, r5, #27
    13aa:	d410      	bmi.n	13ce <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    13ac:	06ab      	lsls	r3, r5, #26
    13ae:	d415      	bmi.n	13dc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    13b0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    13b2:	0020      	movs	r0, r4
    13b4:	68a3      	ldr	r3, [r4, #8]
    13b6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    13b8:	2301      	movs	r3, #1
    13ba:	6822      	ldr	r2, [r4, #0]
    13bc:	7393      	strb	r3, [r2, #14]
    13be:	e7f1      	b.n	13a4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    13c0:	0020      	movs	r0, r4
    13c2:	68e3      	ldr	r3, [r4, #12]
    13c4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    13c6:	2302      	movs	r3, #2
    13c8:	6822      	ldr	r2, [r4, #0]
    13ca:	7393      	strb	r3, [r2, #14]
    13cc:	e7ec      	b.n	13a8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    13ce:	0020      	movs	r0, r4
    13d0:	6923      	ldr	r3, [r4, #16]
    13d2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    13d4:	2310      	movs	r3, #16
    13d6:	6822      	ldr	r2, [r4, #0]
    13d8:	7393      	strb	r3, [r2, #14]
    13da:	e7e7      	b.n	13ac <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    13dc:	0020      	movs	r0, r4
    13de:	6963      	ldr	r3, [r4, #20]
    13e0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    13e2:	6823      	ldr	r3, [r4, #0]
    13e4:	2220      	movs	r2, #32
    13e6:	739a      	strb	r2, [r3, #14]
}
    13e8:	e7e2      	b.n	13b0 <_tc_interrupt_handler+0x24>
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	20000270 	.word	0x20000270

000013f0 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    13f0:	b510      	push	{r4, lr}
    13f2:	2000      	movs	r0, #0
    13f4:	4b01      	ldr	r3, [pc, #4]	; (13fc <TC1_Handler+0xc>)
    13f6:	4798      	blx	r3
    13f8:	bd10      	pop	{r4, pc}
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	0000138d 	.word	0x0000138d

00001400 <TC2_Handler>:
    1400:	b510      	push	{r4, lr}
    1402:	2001      	movs	r0, #1
    1404:	4b01      	ldr	r3, [pc, #4]	; (140c <TC2_Handler+0xc>)
    1406:	4798      	blx	r3
    1408:	bd10      	pop	{r4, pc}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	0000138d 	.word	0x0000138d

00001410 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1410:	b510      	push	{r4, lr}
    1412:	b082      	sub	sp, #8
    1414:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1416:	4b0e      	ldr	r3, [pc, #56]	; (1450 <sercom_set_gclk_generator+0x40>)
    1418:	781b      	ldrb	r3, [r3, #0]
    141a:	2b00      	cmp	r3, #0
    141c:	d007      	beq.n	142e <sercom_set_gclk_generator+0x1e>
    141e:	2900      	cmp	r1, #0
    1420:	d105      	bne.n	142e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1422:	4b0b      	ldr	r3, [pc, #44]	; (1450 <sercom_set_gclk_generator+0x40>)
    1424:	785b      	ldrb	r3, [r3, #1]
    1426:	4283      	cmp	r3, r0
    1428:	d010      	beq.n	144c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    142a:	201d      	movs	r0, #29
    142c:	e00c      	b.n	1448 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    142e:	a901      	add	r1, sp, #4
    1430:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1432:	200d      	movs	r0, #13
    1434:	4b07      	ldr	r3, [pc, #28]	; (1454 <sercom_set_gclk_generator+0x44>)
    1436:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1438:	200d      	movs	r0, #13
    143a:	4b07      	ldr	r3, [pc, #28]	; (1458 <sercom_set_gclk_generator+0x48>)
    143c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    143e:	4b04      	ldr	r3, [pc, #16]	; (1450 <sercom_set_gclk_generator+0x40>)
    1440:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1442:	2201      	movs	r2, #1
    1444:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1446:	2000      	movs	r0, #0
}
    1448:	b002      	add	sp, #8
    144a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    144c:	2000      	movs	r0, #0
    144e:	e7fb      	b.n	1448 <sercom_set_gclk_generator+0x38>
    1450:	20000020 	.word	0x20000020
    1454:	00002499 	.word	0x00002499
    1458:	0000240d 	.word	0x0000240d

0000145c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    145c:	4b15      	ldr	r3, [pc, #84]	; (14b4 <_sercom_get_default_pad+0x58>)
    145e:	4298      	cmp	r0, r3
    1460:	d004      	beq.n	146c <_sercom_get_default_pad+0x10>
    1462:	4b15      	ldr	r3, [pc, #84]	; (14b8 <_sercom_get_default_pad+0x5c>)
    1464:	4298      	cmp	r0, r3
    1466:	d011      	beq.n	148c <_sercom_get_default_pad+0x30>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1468:	2000      	movs	r0, #0
}
    146a:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    146c:	2901      	cmp	r1, #1
    146e:	d007      	beq.n	1480 <_sercom_get_default_pad+0x24>
    1470:	2900      	cmp	r1, #0
    1472:	d01b      	beq.n	14ac <_sercom_get_default_pad+0x50>
    1474:	2902      	cmp	r1, #2
    1476:	d005      	beq.n	1484 <_sercom_get_default_pad+0x28>
    1478:	2903      	cmp	r1, #3
    147a:	d005      	beq.n	1488 <_sercom_get_default_pad+0x2c>
	return 0;
    147c:	2000      	movs	r0, #0
    147e:	e7f4      	b.n	146a <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1480:	480e      	ldr	r0, [pc, #56]	; (14bc <_sercom_get_default_pad+0x60>)
    1482:	e7f2      	b.n	146a <_sercom_get_default_pad+0xe>
    1484:	480e      	ldr	r0, [pc, #56]	; (14c0 <_sercom_get_default_pad+0x64>)
    1486:	e7f0      	b.n	146a <_sercom_get_default_pad+0xe>
    1488:	480e      	ldr	r0, [pc, #56]	; (14c4 <_sercom_get_default_pad+0x68>)
    148a:	e7ee      	b.n	146a <_sercom_get_default_pad+0xe>
    148c:	2901      	cmp	r1, #1
    148e:	d007      	beq.n	14a0 <_sercom_get_default_pad+0x44>
    1490:	2900      	cmp	r1, #0
    1492:	d00d      	beq.n	14b0 <_sercom_get_default_pad+0x54>
    1494:	2902      	cmp	r1, #2
    1496:	d005      	beq.n	14a4 <_sercom_get_default_pad+0x48>
    1498:	2903      	cmp	r1, #3
    149a:	d005      	beq.n	14a8 <_sercom_get_default_pad+0x4c>
	return 0;
    149c:	2000      	movs	r0, #0
    149e:	e7e4      	b.n	146a <_sercom_get_default_pad+0xe>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14a0:	4809      	ldr	r0, [pc, #36]	; (14c8 <_sercom_get_default_pad+0x6c>)
    14a2:	e7e2      	b.n	146a <_sercom_get_default_pad+0xe>
    14a4:	4809      	ldr	r0, [pc, #36]	; (14cc <_sercom_get_default_pad+0x70>)
    14a6:	e7e0      	b.n	146a <_sercom_get_default_pad+0xe>
    14a8:	4809      	ldr	r0, [pc, #36]	; (14d0 <_sercom_get_default_pad+0x74>)
    14aa:	e7de      	b.n	146a <_sercom_get_default_pad+0xe>
    14ac:	4809      	ldr	r0, [pc, #36]	; (14d4 <_sercom_get_default_pad+0x78>)
    14ae:	e7dc      	b.n	146a <_sercom_get_default_pad+0xe>
    14b0:	4809      	ldr	r0, [pc, #36]	; (14d8 <_sercom_get_default_pad+0x7c>)
    14b2:	e7da      	b.n	146a <_sercom_get_default_pad+0xe>
    14b4:	42000800 	.word	0x42000800
    14b8:	42000c00 	.word	0x42000c00
    14bc:	000f0002 	.word	0x000f0002
    14c0:	00080003 	.word	0x00080003
    14c4:	00090003 	.word	0x00090003
    14c8:	001f0002 	.word	0x001f0002
    14cc:	00180002 	.word	0x00180002
    14d0:	00190002 	.word	0x00190002
    14d4:	000e0002 	.word	0x000e0002
    14d8:	001e0002 	.word	0x001e0002

000014dc <_sercom_get_sercom_inst_index>:
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    14dc:	4b06      	ldr	r3, [pc, #24]	; (14f8 <_sercom_get_sercom_inst_index+0x1c>)
    14de:	4298      	cmp	r0, r3
    14e0:	d008      	beq.n	14f4 <_sercom_get_sercom_inst_index+0x18>
    14e2:	4a06      	ldr	r2, [pc, #24]	; (14fc <_sercom_get_sercom_inst_index+0x20>)
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    14e4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    14e6:	4290      	cmp	r0, r2
    14e8:	d001      	beq.n	14ee <_sercom_get_sercom_inst_index+0x12>
}
    14ea:	0018      	movs	r0, r3
    14ec:	4770      	bx	lr
    14ee:	3301      	adds	r3, #1
			return i;
    14f0:	b2db      	uxtb	r3, r3
    14f2:	e7fa      	b.n	14ea <_sercom_get_sercom_inst_index+0xe>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14f4:	2300      	movs	r3, #0
    14f6:	e7fb      	b.n	14f0 <_sercom_get_sercom_inst_index+0x14>
    14f8:	42000800 	.word	0x42000800
    14fc:	42000c00 	.word	0x42000c00

00001500 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1500:	4770      	bx	lr
	...

00001504 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1504:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1506:	4b09      	ldr	r3, [pc, #36]	; (152c <_sercom_set_handler+0x28>)
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	2b00      	cmp	r3, #0
    150c:	d10a      	bne.n	1524 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    150e:	4c08      	ldr	r4, [pc, #32]	; (1530 <_sercom_set_handler+0x2c>)
    1510:	4d08      	ldr	r5, [pc, #32]	; (1534 <_sercom_set_handler+0x30>)
    1512:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    1514:	4b08      	ldr	r3, [pc, #32]	; (1538 <_sercom_set_handler+0x34>)
    1516:	2200      	movs	r2, #0
    1518:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    151a:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    151c:	605a      	str	r2, [r3, #4]
		}

		_handler_table_initialized = true;
    151e:	3201      	adds	r2, #1
    1520:	4b02      	ldr	r3, [pc, #8]	; (152c <_sercom_set_handler+0x28>)
    1522:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1524:	0080      	lsls	r0, r0, #2
    1526:	4b02      	ldr	r3, [pc, #8]	; (1530 <_sercom_set_handler+0x2c>)
    1528:	50c1      	str	r1, [r0, r3]
}
    152a:	bd30      	pop	{r4, r5, pc}
    152c:	20000022 	.word	0x20000022
    1530:	20000024 	.word	0x20000024
    1534:	00001501 	.word	0x00001501
    1538:	20000278 	.word	0x20000278

0000153c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    153c:	b510      	push	{r4, lr}
    153e:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1540:	ac01      	add	r4, sp, #4
    1542:	2309      	movs	r3, #9
    1544:	7023      	strb	r3, [r4, #0]
    1546:	3301      	adds	r3, #1
    1548:	7063      	strb	r3, [r4, #1]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    154a:	4b02      	ldr	r3, [pc, #8]	; (1554 <_sercom_get_interrupt_vector+0x18>)
    154c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    154e:	5620      	ldrsb	r0, [r4, r0]
}
    1550:	b002      	add	sp, #8
    1552:	bd10      	pop	{r4, pc}
    1554:	000014dd 	.word	0x000014dd

00001558 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1558:	b510      	push	{r4, lr}
    155a:	4b02      	ldr	r3, [pc, #8]	; (1564 <SERCOM0_Handler+0xc>)
    155c:	681b      	ldr	r3, [r3, #0]
    155e:	2000      	movs	r0, #0
    1560:	4798      	blx	r3
    1562:	bd10      	pop	{r4, pc}
    1564:	20000024 	.word	0x20000024

00001568 <SERCOM1_Handler>:
    1568:	b510      	push	{r4, lr}
    156a:	4b02      	ldr	r3, [pc, #8]	; (1574 <SERCOM1_Handler+0xc>)
    156c:	685b      	ldr	r3, [r3, #4]
    156e:	2001      	movs	r0, #1
    1570:	4798      	blx	r3
    1572:	bd10      	pop	{r4, pc}
    1574:	20000024 	.word	0x20000024

00001578 <pwm_detection_callback>:
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
	extint_chan_set_config(PWM_EIC_LINE, &config_extint_chan);
}

void pwm_detection_callback()
{
    1578:	b570      	push	{r4, r5, r6, lr}
	static bool interrupt_edge = true;
	static int count_i = 0;
	Eic *const EIC_module = _extint_get_eic_from_channel(PWM_EIC_LINE);
	if(interrupt_edge == true )
    157a:	4b1c      	ldr	r3, [pc, #112]	; (15ec <pwm_detection_callback+0x74>)
    157c:	781b      	ldrb	r3, [r3, #0]
    157e:	2b00      	cmp	r3, #0
    1580:	d11b      	bne.n	15ba <pwm_detection_callback+0x42>
		EIC_module->CONFIG[0].reg |= 0x20000000;
		interrupt_edge = false;
	}
	else
	{
		pwm_rawvalue[count_i] = tc_get_count_value(&tc_instance2);
    1582:	4d1b      	ldr	r5, [pc, #108]	; (15f0 <pwm_detection_callback+0x78>)
    1584:	682c      	ldr	r4, [r5, #0]
    1586:	481b      	ldr	r0, [pc, #108]	; (15f4 <pwm_detection_callback+0x7c>)
    1588:	4b1b      	ldr	r3, [pc, #108]	; (15f8 <pwm_detection_callback+0x80>)
    158a:	4798      	blx	r3
    158c:	00a4      	lsls	r4, r4, #2
    158e:	4b1b      	ldr	r3, [pc, #108]	; (15fc <pwm_detection_callback+0x84>)
    1590:	50e0      	str	r0, [r4, r3]
		interrupt_edge = true;
    1592:	2201      	movs	r2, #1
    1594:	4b15      	ldr	r3, [pc, #84]	; (15ec <pwm_detection_callback+0x74>)
    1596:	701a      	strb	r2, [r3, #0]
		
		//pwm_value = (CONSTANT_TIMER/pwm_rawvalue[count_i]); //gives the hertz
		EIC_module->CONFIG[0].reg &= 0x8FFFFFFF;
    1598:	4b19      	ldr	r3, [pc, #100]	; (1600 <pwm_detection_callback+0x88>)
    159a:	699a      	ldr	r2, [r3, #24]
    159c:	4919      	ldr	r1, [pc, #100]	; (1604 <pwm_detection_callback+0x8c>)
    159e:	400a      	ands	r2, r1
    15a0:	619a      	str	r2, [r3, #24]
		EIC_module->CONFIG[0].reg |= 0x10000000;
    15a2:	6999      	ldr	r1, [r3, #24]
    15a4:	2280      	movs	r2, #128	; 0x80
    15a6:	0552      	lsls	r2, r2, #21
    15a8:	430a      	orrs	r2, r1
    15aa:	619a      	str	r2, [r3, #24]
		
		count_i ++;
    15ac:	682b      	ldr	r3, [r5, #0]
    15ae:	3301      	adds	r3, #1
		if(count_i ==  10)
    15b0:	2b0a      	cmp	r3, #10
    15b2:	d014      	beq.n	15de <pwm_detection_callback+0x66>
		count_i ++;
    15b4:	4a0e      	ldr	r2, [pc, #56]	; (15f0 <pwm_detection_callback+0x78>)
    15b6:	6013      	str	r3, [r2, #0]
    15b8:	e010      	b.n	15dc <pwm_detection_callback+0x64>
		tc_set_count_value(&tc_instance2, 0);
    15ba:	2100      	movs	r1, #0
    15bc:	480d      	ldr	r0, [pc, #52]	; (15f4 <pwm_detection_callback+0x7c>)
    15be:	4b12      	ldr	r3, [pc, #72]	; (1608 <pwm_detection_callback+0x90>)
    15c0:	4798      	blx	r3
		EIC_module->CONFIG[0].reg &= 0x8FFFFFFF;
    15c2:	4b0f      	ldr	r3, [pc, #60]	; (1600 <pwm_detection_callback+0x88>)
    15c4:	699a      	ldr	r2, [r3, #24]
    15c6:	490f      	ldr	r1, [pc, #60]	; (1604 <pwm_detection_callback+0x8c>)
    15c8:	400a      	ands	r2, r1
    15ca:	619a      	str	r2, [r3, #24]
		EIC_module->CONFIG[0].reg |= 0x20000000;
    15cc:	6999      	ldr	r1, [r3, #24]
    15ce:	2280      	movs	r2, #128	; 0x80
    15d0:	0592      	lsls	r2, r2, #22
    15d2:	430a      	orrs	r2, r1
    15d4:	619a      	str	r2, [r3, #24]
		interrupt_edge = false;
    15d6:	2200      	movs	r2, #0
    15d8:	4b04      	ldr	r3, [pc, #16]	; (15ec <pwm_detection_callback+0x74>)
    15da:	701a      	strb	r2, [r3, #0]
		}
		
	}
	//Convert raw value
	
}
    15dc:	bd70      	pop	{r4, r5, r6, pc}
			count_i = 0;
    15de:	2200      	movs	r2, #0
    15e0:	4b03      	ldr	r3, [pc, #12]	; (15f0 <pwm_detection_callback+0x78>)
    15e2:	601a      	str	r2, [r3, #0]
			pwm_available = true;
    15e4:	3201      	adds	r2, #1
    15e6:	4b09      	ldr	r3, [pc, #36]	; (160c <pwm_detection_callback+0x94>)
    15e8:	701a      	strb	r2, [r3, #0]
}
    15ea:	e7f7      	b.n	15dc <pwm_detection_callback+0x64>
    15ec:	20000000 	.word	0x20000000
    15f0:	2000002c 	.word	0x2000002c
    15f4:	20000280 	.word	0x20000280
    15f8:	0000132f 	.word	0x0000132f
    15fc:	20000194 	.word	0x20000194
    1600:	40001800 	.word	0x40001800
    1604:	8fffffff 	.word	0x8fffffff
    1608:	000012fd 	.word	0x000012fd
    160c:	20000190 	.word	0x20000190

00001610 <config_tc2>:
{
    1610:	b510      	push	{r4, lr}
    1612:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1614:	aa01      	add	r2, sp, #4
    1616:	2300      	movs	r3, #0
    1618:	2100      	movs	r1, #0
    161a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    161c:	7093      	strb	r3, [r2, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    161e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1620:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1622:	2000      	movs	r0, #0
    1624:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1626:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1628:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    162a:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    162c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    162e:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1630:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1632:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1634:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1636:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1638:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    163a:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    163c:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    163e:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1640:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64; //256
    1642:	23a0      	movs	r3, #160	; 0xa0
    1644:	00db      	lsls	r3, r3, #3
    1646:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance2, TC2, &config_tc);
    1648:	4c07      	ldr	r4, [pc, #28]	; (1668 <config_tc2+0x58>)
    164a:	4908      	ldr	r1, [pc, #32]	; (166c <config_tc2+0x5c>)
    164c:	0020      	movs	r0, r4
    164e:	4b08      	ldr	r3, [pc, #32]	; (1670 <config_tc2+0x60>)
    1650:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1652:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1654:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1656:	b25b      	sxtb	r3, r3
    1658:	2b00      	cmp	r3, #0
    165a:	dbfb      	blt.n	1654 <config_tc2+0x44>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    165c:	8813      	ldrh	r3, [r2, #0]
    165e:	2102      	movs	r1, #2
    1660:	430b      	orrs	r3, r1
    1662:	8013      	strh	r3, [r2, #0]
}
    1664:	b00e      	add	sp, #56	; 0x38
    1666:	bd10      	pop	{r4, pc}
    1668:	20000280 	.word	0x20000280
    166c:	42001c00 	.word	0x42001c00
    1670:	000010cd 	.word	0x000010cd

00001674 <configure_pwm_rising_extint>:
{
    1674:	b510      	push	{r4, lr}
    1676:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    1678:	ac01      	add	r4, sp, #4
    167a:	0020      	movs	r0, r4
    167c:	4b08      	ldr	r3, [pc, #32]	; (16a0 <configure_pwm_rising_extint+0x2c>)
    167e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = PWM_PIN_EIC;
    1680:	2309      	movs	r3, #9
    1682:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = PWM_PIN_MUX;
    1684:	2390      	movs	r3, #144	; 0x90
    1686:	031b      	lsls	r3, r3, #12
    1688:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    168a:	2302      	movs	r3, #2
    168c:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    168e:	3b01      	subs	r3, #1
    1690:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(PWM_EIC_LINE, &config_extint_chan);
    1692:	0021      	movs	r1, r4
    1694:	2007      	movs	r0, #7
    1696:	4b03      	ldr	r3, [pc, #12]	; (16a4 <configure_pwm_rising_extint+0x30>)
    1698:	4798      	blx	r3
}
    169a:	b004      	add	sp, #16
    169c:	bd10      	pop	{r4, pc}
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00000211 	.word	0x00000211
    16a4:	00000225 	.word	0x00000225

000016a8 <configure_ext_callback>:


void configure_ext_callback()
{
    16a8:	b510      	push	{r4, lr}
	extint_register_callback(pwm_detection_callback,PWM_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    16aa:	2200      	movs	r2, #0
    16ac:	2107      	movs	r1, #7
    16ae:	4804      	ldr	r0, [pc, #16]	; (16c0 <configure_ext_callback+0x18>)
    16b0:	4b04      	ldr	r3, [pc, #16]	; (16c4 <configure_ext_callback+0x1c>)
    16b2:	4798      	blx	r3
	extint_chan_enable_callback(PWM_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    16b4:	2100      	movs	r1, #0
    16b6:	2007      	movs	r0, #7
    16b8:	4b03      	ldr	r3, [pc, #12]	; (16c8 <configure_ext_callback+0x20>)
    16ba:	4798      	blx	r3
}
    16bc:	bd10      	pop	{r4, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	00001579 	.word	0x00001579
    16c4:	000000ed 	.word	0x000000ed
    16c8:	00000119 	.word	0x00000119

000016cc <initialize_find_pwm>:
//Initialize timer and external interrupt

void initialize_find_pwm()
{
    16cc:	b510      	push	{r4, lr}
	
	config_tc2();
    16ce:	4b03      	ldr	r3, [pc, #12]	; (16dc <initialize_find_pwm+0x10>)
    16d0:	4798      	blx	r3
	configure_pwm_rising_extint();
    16d2:	4b03      	ldr	r3, [pc, #12]	; (16e0 <initialize_find_pwm+0x14>)
    16d4:	4798      	blx	r3
	configure_ext_callback();
    16d6:	4b03      	ldr	r3, [pc, #12]	; (16e4 <initialize_find_pwm+0x18>)
    16d8:	4798      	blx	r3
	
}  
    16da:	bd10      	pop	{r4, pc}
    16dc:	00001611 	.word	0x00001611
    16e0:	00001675 	.word	0x00001675
    16e4:	000016a9 	.word	0x000016a9

000016e8 <write_data_encoders>:
 */ 


// Helper function to just execute a simple write
void write_data_encoders(uint8_t *bufferSend, uint8_t length, struct i2c_master_module *const module)
{
    16e8:	b570      	push	{r4, r5, r6, lr}
    16ea:	b084      	sub	sp, #16
    16ec:	0016      	movs	r6, r2
	struct i2c_master_packet packet = {
    16ee:	ab01      	add	r3, sp, #4
    16f0:	225e      	movs	r2, #94	; 0x5e
    16f2:	801a      	strh	r2, [r3, #0]
    16f4:	8059      	strh	r1, [r3, #2]
    16f6:	9002      	str	r0, [sp, #8]
    16f8:	2200      	movs	r2, #0
    16fa:	721a      	strb	r2, [r3, #8]
    16fc:	725a      	strb	r2, [r3, #9]
    16fe:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	do {
		error_code = i2c_master_write_packet_wait(module, &packet);
    1700:	4d04      	ldr	r5, [pc, #16]	; (1714 <write_data_encoders+0x2c>)
    1702:	4c05      	ldr	r4, [pc, #20]	; (1718 <write_data_encoders+0x30>)
    1704:	a901      	add	r1, sp, #4
    1706:	0030      	movs	r0, r6
    1708:	47a8      	blx	r5
    170a:	7020      	strb	r0, [r4, #0]
		
	}
	while (error_code != STATUS_OK);
    170c:	2800      	cmp	r0, #0
    170e:	d1f9      	bne.n	1704 <write_data_encoders+0x1c>
	
}
    1710:	b004      	add	sp, #16
    1712:	bd70      	pop	{r4, r5, r6, pc}
    1714:	0000083d 	.word	0x0000083d
    1718:	20000320 	.word	0x20000320

0000171c <config_I2C_SERCOM2>:

void config_I2C_SERCOM2()
{
    171c:	b570      	push	{r4, r5, r6, lr}
    171e:	b08e      	sub	sp, #56	; 0x38
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1720:	ab01      	add	r3, sp, #4
    1722:	4a24      	ldr	r2, [pc, #144]	; (17b4 <config_I2C_SERCOM2+0x98>)
    1724:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1726:	2200      	movs	r2, #0
    1728:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    172a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    172c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    172e:	2101      	movs	r1, #1
    1730:	4249      	negs	r1, r1
    1732:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1734:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1736:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    1738:	3125      	adds	r1, #37	; 0x25
    173a:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    173c:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    173e:	3108      	adds	r1, #8
    1740:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1742:	3101      	adds	r1, #1
    1744:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1746:	3101      	adds	r1, #1
    1748:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    174a:	32d7      	adds	r2, #215	; 0xd7
    174c:	861a      	strh	r2, [r3, #48]	; 0x30
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
	config_i2c_master.buffer_timeout = 40000;
    174e:	4a1a      	ldr	r2, [pc, #104]	; (17b8 <config_I2C_SERCOM2+0x9c>)
    1750:	82da      	strh	r2, [r3, #22]
	// Fast mode Baud rate
	config_i2c_master.baud_rate        = I2C_MASTER_BAUD_RATE_400KHZ;
    1752:	22c8      	movs	r2, #200	; 0xc8
    1754:	0052      	lsls	r2, r2, #1
    1756:	9201      	str	r2, [sp, #4]
	config_i2c_master.start_hold_time  = I2C_MASTER_START_HOLD_TIME_400NS_800NS;
    1758:	22c0      	movs	r2, #192	; 0xc0
    175a:	0392      	lsls	r2, r2, #14
    175c:	9205      	str	r2, [sp, #20]
	/* Initialize and enable device with config. */
	do
	{
		error_code = i2c_master_init(&i2c_master_encoder, ENCODER_SERCOMM_2 , &config_i2c_master);
    175e:	4e17      	ldr	r6, [pc, #92]	; (17bc <config_I2C_SERCOM2+0xa0>)
    1760:	4d17      	ldr	r5, [pc, #92]	; (17c0 <config_I2C_SERCOM2+0xa4>)
    1762:	4c18      	ldr	r4, [pc, #96]	; (17c4 <config_I2C_SERCOM2+0xa8>)
    1764:	aa01      	add	r2, sp, #4
    1766:	4918      	ldr	r1, [pc, #96]	; (17c8 <config_I2C_SERCOM2+0xac>)
    1768:	0030      	movs	r0, r6
    176a:	47a8      	blx	r5
    176c:	7020      	strb	r0, [r4, #0]
	}
	while(error_code != STATUS_OK);
    176e:	2800      	cmp	r0, #0
    1770:	d1f8      	bne.n	1764 <config_I2C_SERCOM2+0x48>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1772:	4b12      	ldr	r3, [pc, #72]	; (17bc <config_I2C_SERCOM2+0xa0>)
    1774:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1776:	2207      	movs	r2, #7
    1778:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    177a:	421a      	tst	r2, r3
    177c:	d1fc      	bne.n	1778 <config_I2C_SERCOM2+0x5c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    177e:	6823      	ldr	r3, [r4, #0]
    1780:	2202      	movs	r2, #2
    1782:	4313      	orrs	r3, r2
    1784:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1786:	4d0d      	ldr	r5, [pc, #52]	; (17bc <config_I2C_SERCOM2+0xa0>)
    1788:	6828      	ldr	r0, [r5, #0]
    178a:	4b10      	ldr	r3, [pc, #64]	; (17cc <config_I2C_SERCOM2+0xb0>)
    178c:	4798      	blx	r3
    178e:	231f      	movs	r3, #31
    1790:	4018      	ands	r0, r3
    1792:	3b1e      	subs	r3, #30
    1794:	4083      	lsls	r3, r0
    1796:	4a0e      	ldr	r2, [pc, #56]	; (17d0 <config_I2C_SERCOM2+0xb4>)
    1798:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    179a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    179c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    179e:	2110      	movs	r1, #16
    17a0:	8b62      	ldrh	r2, [r4, #26]
    17a2:	420a      	tst	r2, r1
    17a4:	d104      	bne.n	17b0 <config_I2C_SERCOM2+0x94>
		timeout_counter++;
    17a6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    17a8:	4283      	cmp	r3, r0
    17aa:	d3f9      	bcc.n	17a0 <config_I2C_SERCOM2+0x84>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    17ac:	2310      	movs	r3, #16
    17ae:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&i2c_master_encoder);
}
    17b0:	b00e      	add	sp, #56	; 0x38
    17b2:	bd70      	pop	{r4, r5, r6, pc}
    17b4:	00000d48 	.word	0x00000d48
    17b8:	ffff9c40 	.word	0xffff9c40
    17bc:	200002f8 	.word	0x200002f8
    17c0:	000002cd 	.word	0x000002cd
    17c4:	20000320 	.word	0x20000320
    17c8:	42000800 	.word	0x42000800
    17cc:	0000153d 	.word	0x0000153d
    17d0:	e000e100 	.word	0xe000e100

000017d4 <initialize_encoder>:


void initialize_encoder()
{
    17d4:	b500      	push	{lr}
    17d6:	b083      	sub	sp, #12
	
	unsigned char bufferSend[4];
	// Disable the temperature sensor, Parity test disabled, enable the interrupt, FAST mode
	bufferSend[0] = 0b00000000;
    17d8:	a801      	add	r0, sp, #4
    17da:	2300      	movs	r3, #0
    17dc:	7003      	strb	r3, [r0, #0]
	bufferSend[1] = 0b00000010;
    17de:	2202      	movs	r2, #2
    17e0:	7042      	strb	r2, [r0, #1]
	bufferSend[2] = 0b00000000;
    17e2:	7083      	strb	r3, [r0, #2]
	bufferSend[3] = 0b10000000;
    17e4:	3380      	adds	r3, #128	; 0x80
    17e6:	70c3      	strb	r3, [r0, #3]
	//
	write_data_encoders(bufferSend, 4 , &i2c_master_encoder);
    17e8:	4a02      	ldr	r2, [pc, #8]	; (17f4 <initialize_encoder+0x20>)
    17ea:	2104      	movs	r1, #4
    17ec:	4b02      	ldr	r3, [pc, #8]	; (17f8 <initialize_encoder+0x24>)
    17ee:	4798      	blx	r3
		
}
    17f0:	b003      	add	sp, #12
    17f2:	bd00      	pop	{pc}
    17f4:	200002f8 	.word	0x200002f8
    17f8:	000016e9 	.word	0x000016e9

000017fc <config_encoder>:

void config_encoder()
{
    17fc:	b510      	push	{r4, lr}
	config_I2C_SERCOM2(); 
    17fe:	4b02      	ldr	r3, [pc, #8]	; (1808 <config_encoder+0xc>)
    1800:	4798      	blx	r3
	initialize_encoder();
    1802:	4b02      	ldr	r3, [pc, #8]	; (180c <config_encoder+0x10>)
    1804:	4798      	blx	r3
}
    1806:	bd10      	pop	{r4, pc}
    1808:	0000171d 	.word	0x0000171d
    180c:	000017d5 	.word	0x000017d5

00001810 <configure_encoder>:
void config_encoder_modules()
{
	config_encoder();
}
void configure_encoder()
{
    1810:	b510      	push	{r4, lr}
	config_encoder();
    1812:	4b01      	ldr	r3, [pc, #4]	; (1818 <configure_encoder+0x8>)
    1814:	4798      	blx	r3
	config_encoder_modules();
}
    1816:	bd10      	pop	{r4, pc}
    1818:	000017fd 	.word	0x000017fd

0000181c <config_tc1>:

void config_tc1()
{
    181c:	b510      	push	{r4, lr}
    181e:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    1820:	aa01      	add	r2, sp, #4
    1822:	2300      	movs	r3, #0
    1824:	2100      	movs	r1, #0
    1826:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1828:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    182a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    182c:	2000      	movs	r0, #0
    182e:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1830:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1832:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1834:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1836:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1838:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    183a:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    183c:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    183e:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1840:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1842:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1844:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    1846:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1848:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    184a:	8593      	strh	r3, [r2, #44]	; 0x2c
	
	struct tc_config config_tc;
	tc_get_config_defaults(&config_tc);
	config_tc.counter_size = TC_COUNTER_SIZE_8BIT; //8
    184c:	3304      	adds	r3, #4
    184e:	7093      	strb	r3, [r2, #2]
	config_tc.clock_source = GCLK_GENERATOR_0;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV8; //64
    1850:	23c0      	movs	r3, #192	; 0xc0
    1852:	009b      	lsls	r3, r3, #2
    1854:	8093      	strh	r3, [r2, #4]
	config_tc.count_direction = TC_COUNT_DIRECTION_UP;
	config_tc.counter_8_bit.period = 0x55;
    1856:	2155      	movs	r1, #85	; 0x55
    1858:	2329      	movs	r3, #41	; 0x29
    185a:	54d1      	strb	r1, [r2, r3]
	tc_init(&tc_instance1, TC1, &config_tc);
    185c:	4c07      	ldr	r4, [pc, #28]	; (187c <config_tc1+0x60>)
    185e:	4908      	ldr	r1, [pc, #32]	; (1880 <config_tc1+0x64>)
    1860:	0020      	movs	r0, r4
    1862:	4b08      	ldr	r3, [pc, #32]	; (1884 <config_tc1+0x68>)
    1864:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1866:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1868:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    186a:	b25b      	sxtb	r3, r3
    186c:	2b00      	cmp	r3, #0
    186e:	dbfb      	blt.n	1868 <config_tc1+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1870:	8813      	ldrh	r3, [r2, #0]
    1872:	2102      	movs	r1, #2
    1874:	430b      	orrs	r3, r1
    1876:	8013      	strh	r3, [r2, #0]
	tc_enable(&tc_instance1);
	
	
}
    1878:	b00e      	add	sp, #56	; 0x38
    187a:	bd10      	pop	{r4, pc}
    187c:	200002dc 	.word	0x200002dc
    1880:	42001800 	.word	0x42001800
    1884:	000010cd 	.word	0x000010cd

00001888 <config_callbacks_tc1>:


void config_callbacks_tc1()
{
    1888:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance1, tc_callback_servo_control ,TC_CALLBACK_OVERFLOW);
    188a:	4c0c      	ldr	r4, [pc, #48]	; (18bc <config_callbacks_tc1+0x34>)
    188c:	2200      	movs	r2, #0
    188e:	490c      	ldr	r1, [pc, #48]	; (18c0 <config_callbacks_tc1+0x38>)
    1890:	0020      	movs	r0, r4
    1892:	4b0c      	ldr	r3, [pc, #48]	; (18c4 <config_callbacks_tc1+0x3c>)
    1894:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1896:	6820      	ldr	r0, [r4, #0]
    1898:	4b0b      	ldr	r3, [pc, #44]	; (18c8 <config_callbacks_tc1+0x40>)
    189a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    189c:	4b0b      	ldr	r3, [pc, #44]	; (18cc <config_callbacks_tc1+0x44>)
    189e:	5c1a      	ldrb	r2, [r3, r0]
    18a0:	231f      	movs	r3, #31
    18a2:	4013      	ands	r3, r2
    18a4:	2201      	movs	r2, #1
    18a6:	0011      	movs	r1, r2
    18a8:	4099      	lsls	r1, r3
    18aa:	4b09      	ldr	r3, [pc, #36]	; (18d0 <config_callbacks_tc1+0x48>)
    18ac:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    18ae:	7e63      	ldrb	r3, [r4, #25]
    18b0:	2101      	movs	r1, #1
    18b2:	430b      	orrs	r3, r1
    18b4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    18b6:	6823      	ldr	r3, [r4, #0]
    18b8:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance1, TC_CALLBACK_OVERFLOW);
}
    18ba:	bd10      	pop	{r4, pc}
    18bc:	200002dc 	.word	0x200002dc
    18c0:	00001f79 	.word	0x00001f79
    18c4:	0000135b 	.word	0x0000135b
    18c8:	000010a9 	.word	0x000010a9
    18cc:	00002a28 	.word	0x00002a28
    18d0:	e000e100 	.word	0xe000e100

000018d4 <configure_pid_servo_control>:


void configure_pid_servo_control()
{
    18d4:	b510      	push	{r4, lr}
	config_tc1();
    18d6:	4b02      	ldr	r3, [pc, #8]	; (18e0 <configure_pid_servo_control+0xc>)
    18d8:	4798      	blx	r3
	config_callbacks_tc1();
    18da:	4b02      	ldr	r3, [pc, #8]	; (18e4 <configure_pid_servo_control+0x10>)
    18dc:	4798      	blx	r3
}
    18de:	bd10      	pop	{r4, pc}
    18e0:	0000181d 	.word	0x0000181d
    18e4:	00001889 	.word	0x00001889

000018e8 <configure_enable_pins>:

void configure_enable_pins()
{
    18e8:	b530      	push	{r4, r5, lr}
    18ea:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    18ec:	ac01      	add	r4, sp, #4
    18ee:	2301      	movs	r3, #1
    18f0:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    18f2:	2200      	movs	r2, #0
    18f4:	70a2      	strb	r2, [r4, #2]
	
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    18f6:	7023      	strb	r3, [r4, #0]
		
	port_pin_set_config(ENABLE_MOTOR_1, &config_port_pin);
    18f8:	0021      	movs	r1, r4
    18fa:	2019      	movs	r0, #25
    18fc:	4d09      	ldr	r5, [pc, #36]	; (1924 <configure_enable_pins+0x3c>)
    18fe:	47a8      	blx	r5
	port_pin_set_config(ENABLE_MOTOR_2, &config_port_pin);
    1900:	0021      	movs	r1, r4
    1902:	2018      	movs	r0, #24
    1904:	47a8      	blx	r5
	port_pin_set_config(SLEEP_PIN, &config_port_pin);
    1906:	0021      	movs	r1, r4
    1908:	2008      	movs	r0, #8
    190a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    190c:	4b06      	ldr	r3, [pc, #24]	; (1928 <configure_enable_pins+0x40>)
    190e:	2280      	movs	r2, #128	; 0x80
    1910:	0492      	lsls	r2, r2, #18
    1912:	619a      	str	r2, [r3, #24]
    1914:	2280      	movs	r2, #128	; 0x80
    1916:	0452      	lsls	r2, r2, #17
    1918:	619a      	str	r2, [r3, #24]
    191a:	2280      	movs	r2, #128	; 0x80
    191c:	0052      	lsls	r2, r2, #1
    191e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(ENABLE_MOTOR_1,true);
	port_pin_set_output_level(ENABLE_MOTOR_2,true);
	port_pin_set_output_level(SLEEP_PIN,DONT_SLEEP);
	
	
}
    1920:	b003      	add	sp, #12
    1922:	bd30      	pop	{r4, r5, pc}
    1924:	0000029d 	.word	0x0000029d
    1928:	41004400 	.word	0x41004400

0000192c <config_motors>:


void config_motors(void)
{
    192c:	b570      	push	{r4, r5, r6, lr}
    192e:	b0aa      	sub	sp, #168	; 0xa8
	
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    1930:	4e17      	ldr	r6, [pc, #92]	; (1990 <config_motors+0x64>)
    1932:	ac01      	add	r4, sp, #4
    1934:	0031      	movs	r1, r6
    1936:	0020      	movs	r0, r4
    1938:	4b16      	ldr	r3, [pc, #88]	; (1994 <config_motors+0x68>)
    193a:	4798      	blx	r3
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
    193c:	2306      	movs	r3, #6
    193e:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 0x00FF;
    1940:	33f9      	adds	r3, #249	; 0xf9
    1942:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    1944:	3bfd      	subs	r3, #253	; 0xfd
    1946:	7623      	strb	r3, [r4, #24]
	
	
	//
	//
	config_tcc.compare.wave_polarity[MOTOR_CH_1]  = TCC_WAVE_POLARITY_0;
    1948:	2300      	movs	r3, #0
    194a:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_polarity[MOTOR_CH_2]  = TCC_WAVE_POLARITY_0;
    194c:	7563      	strb	r3, [r4, #21]
	
	//
	//
	config_tcc.compare.match[MOTOR_CH_1]			 = 0;
    194e:	61e3      	str	r3, [r4, #28]
	config_tcc.pins.enable_wave_out_pin[MOTOR_WO_1] = true;
    1950:	2201      	movs	r2, #1
    1952:	2198      	movs	r1, #152	; 0x98
    1954:	5462      	strb	r2, [r4, r1]
	
	///
	config_tcc.pins.wave_out_pin[MOTOR_WO_1]        = PIN_PA04F_TCC0_WO0; 
    1956:	3994      	subs	r1, #148	; 0x94
    1958:	65a1      	str	r1, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[MOTOR_WO_1]    = PINMUX_PA04F_TCC0_WO0;
    195a:	490f      	ldr	r1, [pc, #60]	; (1998 <config_motors+0x6c>)
    195c:	67a1      	str	r1, [r4, #120]	; 0x78
	
	///
	config_tcc.compare.match[MOTOR_CH_2] = 0;
    195e:	6223      	str	r3, [r4, #32]
	config_tcc.pins.enable_wave_out_pin[MOTOR_WO_2] = true;
    1960:	3399      	adds	r3, #153	; 0x99
    1962:	54e2      	strb	r2, [r4, r3]
	config_tcc.pins.wave_out_pin[MOTOR_WO_2]        = PIN_PA05F_TCC0_WO1; 
    1964:	3b94      	subs	r3, #148	; 0x94
    1966:	65e3      	str	r3, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[MOTOR_WO_2]    = PINMUX_PA05F_TCC0_WO1; 
    1968:	4b0c      	ldr	r3, [pc, #48]	; (199c <config_motors+0x70>)
    196a:	67e3      	str	r3, [r4, #124]	; 0x7c
	

	tcc_init(&tcc_instance0, TCC0, &config_tcc);
    196c:	4d0c      	ldr	r5, [pc, #48]	; (19a0 <config_motors+0x74>)
    196e:	0022      	movs	r2, r4
    1970:	0031      	movs	r1, r6
    1972:	0028      	movs	r0, r5
    1974:	4b0b      	ldr	r3, [pc, #44]	; (19a4 <config_motors+0x78>)
    1976:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1978:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    197a:	2102      	movs	r1, #2
    197c:	6893      	ldr	r3, [r2, #8]
    197e:	4219      	tst	r1, r3
    1980:	d1fc      	bne.n	197c <config_motors+0x50>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1982:	6813      	ldr	r3, [r2, #0]
    1984:	2102      	movs	r1, #2
    1986:	430b      	orrs	r3, r1
    1988:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance0);
}
    198a:	b02a      	add	sp, #168	; 0xa8
    198c:	bd70      	pop	{r4, r5, r6, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	42001400 	.word	0x42001400
    1994:	00000b79 	.word	0x00000b79
    1998:	00040005 	.word	0x00040005
    199c:	00050005 	.word	0x00050005
    19a0:	2000029c 	.word	0x2000029c
    19a4:	00000cb5 	.word	0x00000cb5

000019a8 <enable_motor>:
{
	configure_enable_pins();
}

void enable_motor()
{
    19a8:	b510      	push	{r4, lr}
	configure_enable_pins();
    19aa:	4b02      	ldr	r3, [pc, #8]	; (19b4 <enable_motor+0xc>)
    19ac:	4798      	blx	r3
	configure_pins();
	config_motors();
    19ae:	4b02      	ldr	r3, [pc, #8]	; (19b8 <enable_motor+0x10>)
    19b0:	4798      	blx	r3
}
    19b2:	bd10      	pop	{r4, pc}
    19b4:	000018e9 	.word	0x000018e9
    19b8:	0000192d 	.word	0x0000192d

000019bc <set_motor>:

// PWM is on AIN1/AIN2 - PA12 and PA20
void set_motor(uint8_t dir, uint8_t speed)
{
    19bc:	b570      	push	{r4, r5, r6, lr}
    19be:	000c      	movs	r4, r1
	if(dir == 0)
    19c0:	2800      	cmp	r0, #0
    19c2:	d00a      	beq.n	19da <set_motor+0x1e>
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_1, speed);
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_2, 0);
	}
	else
	{
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_1, 0);
    19c4:	4e0a      	ldr	r6, [pc, #40]	; (19f0 <set_motor+0x34>)
    19c6:	2200      	movs	r2, #0
    19c8:	2100      	movs	r1, #0
    19ca:	0030      	movs	r0, r6
    19cc:	4d09      	ldr	r5, [pc, #36]	; (19f4 <set_motor+0x38>)
    19ce:	47a8      	blx	r5
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_2, speed);	 
    19d0:	0022      	movs	r2, r4
    19d2:	2101      	movs	r1, #1
    19d4:	0030      	movs	r0, r6
    19d6:	47a8      	blx	r5
	}
	
}
    19d8:	bd70      	pop	{r4, r5, r6, pc}
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_1, speed);
    19da:	4d05      	ldr	r5, [pc, #20]	; (19f0 <set_motor+0x34>)
    19dc:	000a      	movs	r2, r1
    19de:	2100      	movs	r1, #0
    19e0:	0028      	movs	r0, r5
    19e2:	4c04      	ldr	r4, [pc, #16]	; (19f4 <set_motor+0x38>)
    19e4:	47a0      	blx	r4
		tcc_set_compare_value(&tcc_instance0, MOTOR_CH_2, 0);
    19e6:	2200      	movs	r2, #0
    19e8:	2101      	movs	r1, #1
    19ea:	0028      	movs	r0, r5
    19ec:	47a0      	blx	r4
    19ee:	e7f3      	b.n	19d8 <set_motor+0x1c>
    19f0:	2000029c 	.word	0x2000029c
    19f4:	0000103d 	.word	0x0000103d

000019f8 <find_mode>:
}

*/

int find_mode(uint32_t* input)
{
    19f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fa:	46d6      	mov	lr, sl
    19fc:	464f      	mov	r7, r9
    19fe:	4646      	mov	r6, r8
    1a00:	b5c0      	push	{r6, r7, lr}
    1a02:	b0ae      	sub	sp, #184	; 0xb8
    1a04:	4681      	mov	r9, r0
	int temp_max = 0;
	
	volatile static int j=0;
	volatile uint32_t temp_bin[20];
	volatile uint32_t count_bin[20];
	volatile uint32_t test_samples=0;
    1a06:	2300      	movs	r3, #0
    1a08:	9305      	str	r3, [sp, #20]
	volatile uint32_t max_index=0;
    1a0a:	9304      	str	r3, [sp, #16]
	volatile uint32_t output= 0;
    1a0c:	9303      	str	r3, [sp, #12]
	bool create_bin = true;
	
	for(j=0;j<NO_OF_SAMPLES;j++)
    1a0e:	4a3b      	ldr	r2, [pc, #236]	; (1afc <find_mode+0x104>)
    1a10:	6013      	str	r3, [r2, #0]
    1a12:	6813      	ldr	r3, [r2, #0]
    1a14:	2b04      	cmp	r3, #4
    1a16:	dc0f      	bgt.n	1a38 <find_mode+0x40>
	{
		temp_bin[j]  = 0;
    1a18:	0013      	movs	r3, r2
    1a1a:	a81a      	add	r0, sp, #104	; 0x68
    1a1c:	2400      	movs	r4, #0
		count_bin[j] = 0;
    1a1e:	a906      	add	r1, sp, #24
		temp_bin[j]  = 0;
    1a20:	681a      	ldr	r2, [r3, #0]
    1a22:	0092      	lsls	r2, r2, #2
    1a24:	5014      	str	r4, [r2, r0]
		count_bin[j] = 0;
    1a26:	681a      	ldr	r2, [r3, #0]
    1a28:	0092      	lsls	r2, r2, #2
    1a2a:	5054      	str	r4, [r2, r1]
	for(j=0;j<NO_OF_SAMPLES;j++)
    1a2c:	681a      	ldr	r2, [r3, #0]
    1a2e:	3201      	adds	r2, #1
    1a30:	601a      	str	r2, [r3, #0]
    1a32:	681a      	ldr	r2, [r3, #0]
    1a34:	2a04      	cmp	r2, #4
    1a36:	ddf3      	ble.n	1a20 <find_mode+0x28>
{
    1a38:	2300      	movs	r3, #0
    1a3a:	469c      	mov	ip, r3
	}
	
	for(i=0;i<NO_OF_SAMPLES;i++)
	{
		for(j=0;j<test_samples;j++)
    1a3c:	4b2f      	ldr	r3, [pc, #188]	; (1afc <find_mode+0x104>)
    1a3e:	4698      	mov	r8, r3
		{
			if(input[i] == temp_bin[j])
    1a40:	001c      	movs	r4, r3
			{
				create_bin = false;
				count_bin[j] = count_bin[j] + 1;
    1a42:	0018      	movs	r0, r3
    1a44:	ad06      	add	r5, sp, #24
		for(j=0;j<test_samples;j++)
    1a46:	001a      	movs	r2, r3
    1a48:	e01e      	b.n	1a88 <find_mode+0x90>
    1a4a:	6813      	ldr	r3, [r2, #0]
    1a4c:	3301      	adds	r3, #1
    1a4e:	6013      	str	r3, [r2, #0]
    1a50:	6816      	ldr	r6, [r2, #0]
    1a52:	9b05      	ldr	r3, [sp, #20]
    1a54:	429e      	cmp	r6, r3
    1a56:	d20e      	bcs.n	1a76 <find_mode+0x7e>
			if(input[i] == temp_bin[j])
    1a58:	6823      	ldr	r3, [r4, #0]
    1a5a:	009b      	lsls	r3, r3, #2
    1a5c:	585b      	ldr	r3, [r3, r1]
    1a5e:	429f      	cmp	r7, r3
    1a60:	d1f3      	bne.n	1a4a <find_mode+0x52>
				count_bin[j] = count_bin[j] + 1;
    1a62:	6803      	ldr	r3, [r0, #0]
    1a64:	6806      	ldr	r6, [r0, #0]
    1a66:	00b6      	lsls	r6, r6, #2
    1a68:	5976      	ldr	r6, [r6, r5]
    1a6a:	3601      	adds	r6, #1
    1a6c:	009b      	lsls	r3, r3, #2
    1a6e:	515e      	str	r6, [r3, r5]
				create_bin = false;
    1a70:	2300      	movs	r3, #0
    1a72:	9301      	str	r3, [sp, #4]
    1a74:	e7e9      	b.n	1a4a <find_mode+0x52>
			}
		}
		if(create_bin == true)
    1a76:	9b01      	ldr	r3, [sp, #4]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d114      	bne.n	1aa6 <find_mode+0xae>
	for(i=0;i<NO_OF_SAMPLES;i++)
    1a7c:	2301      	movs	r3, #1
    1a7e:	469a      	mov	sl, r3
    1a80:	44d4      	add	ip, sl
    1a82:	4663      	mov	r3, ip
    1a84:	2b05      	cmp	r3, #5
    1a86:	d01a      	beq.n	1abe <find_mode+0xc6>
		for(j=0;j<test_samples;j++)
    1a88:	4643      	mov	r3, r8
    1a8a:	2100      	movs	r1, #0
    1a8c:	6019      	str	r1, [r3, #0]
    1a8e:	6819      	ldr	r1, [r3, #0]
    1a90:	9b05      	ldr	r3, [sp, #20]
    1a92:	4299      	cmp	r1, r3
    1a94:	d207      	bcs.n	1aa6 <find_mode+0xae>
			if(input[i] == temp_bin[j])
    1a96:	4663      	mov	r3, ip
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	4649      	mov	r1, r9
    1a9c:	58cf      	ldr	r7, [r1, r3]
    1a9e:	2301      	movs	r3, #1
    1aa0:	9301      	str	r3, [sp, #4]
    1aa2:	a91a      	add	r1, sp, #104	; 0x68
    1aa4:	e7d8      	b.n	1a58 <find_mode+0x60>
		{
			temp_bin[i] = input[test_samples] ;
    1aa6:	9b05      	ldr	r3, [sp, #20]
    1aa8:	009b      	lsls	r3, r3, #2
    1aaa:	4649      	mov	r1, r9
    1aac:	585e      	ldr	r6, [r3, r1]
    1aae:	4663      	mov	r3, ip
    1ab0:	009b      	lsls	r3, r3, #2
    1ab2:	a91a      	add	r1, sp, #104	; 0x68
    1ab4:	505e      	str	r6, [r3, r1]
			test_samples++;
    1ab6:	9b05      	ldr	r3, [sp, #20]
    1ab8:	3301      	adds	r3, #1
    1aba:	9305      	str	r3, [sp, #20]
    1abc:	e7de      	b.n	1a7c <find_mode+0x84>
		}
		create_bin = true;
		
	}
	for(k=0;k<test_samples;k++)
    1abe:	9b05      	ldr	r3, [sp, #20]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d00f      	beq.n	1ae4 <find_mode+0xec>
    1ac4:	2000      	movs	r0, #0
    1ac6:	2300      	movs	r3, #0
	{
		if( count_bin[k] >= temp_max)
    1ac8:	a906      	add	r1, sp, #24
    1aca:	e003      	b.n	1ad4 <find_mode+0xdc>
	for(k=0;k<test_samples;k++)
    1acc:	3301      	adds	r3, #1
    1ace:	9a05      	ldr	r2, [sp, #20]
    1ad0:	4293      	cmp	r3, r2
    1ad2:	d207      	bcs.n	1ae4 <find_mode+0xec>
		if( count_bin[k] >= temp_max)
    1ad4:	009a      	lsls	r2, r3, #2
    1ad6:	5852      	ldr	r2, [r2, r1]
    1ad8:	4282      	cmp	r2, r0
    1ada:	d3f7      	bcc.n	1acc <find_mode+0xd4>
		{
			max_index = k;
    1adc:	9304      	str	r3, [sp, #16]
			temp_max  =  count_bin[k];
    1ade:	009a      	lsls	r2, r3, #2
    1ae0:	5850      	ldr	r0, [r2, r1]
    1ae2:	e7f3      	b.n	1acc <find_mode+0xd4>
		}
	}
	output = temp_bin[max_index];
    1ae4:	9b04      	ldr	r3, [sp, #16]
    1ae6:	009b      	lsls	r3, r3, #2
    1ae8:	aa1a      	add	r2, sp, #104	; 0x68
    1aea:	589b      	ldr	r3, [r3, r2]
    1aec:	9303      	str	r3, [sp, #12]
	return output;
    1aee:	9803      	ldr	r0, [sp, #12]
}
    1af0:	b02e      	add	sp, #184	; 0xb8
    1af2:	bc1c      	pop	{r2, r3, r4}
    1af4:	4690      	mov	r8, r2
    1af6:	4699      	mov	r9, r3
    1af8:	46a2      	mov	sl, r4
    1afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1afc:	20000158 	.word	0x20000158

00001b00 <set_motion>:
#define MIN_SPEED 100 
#define MAX_PARTION 560
#define HALF_PARTION 280

void set_motion(uint32_t position,uint32_t pwm_value)
{
    1b00:	b510      	push	{r4, lr}
	bool direction_motion=  CLOCKWISE;
	uint32_t min_diff = 0;
	uint32_t speed = 0;
	if(position > pwm_value)
    1b02:	4288      	cmp	r0, r1
    1b04:	d91e      	bls.n	1b44 <set_motion+0x44>
	{
		if(abs(position - pwm_value)> HALF_PARTION)
    1b06:	1a40      	subs	r0, r0, r1
    1b08:	17c3      	asrs	r3, r0, #31
    1b0a:	18c0      	adds	r0, r0, r3
    1b0c:	4058      	eors	r0, r3
    1b0e:	238c      	movs	r3, #140	; 0x8c
    1b10:	005b      	lsls	r3, r3, #1
			direction_motion = CLOCKWISE;
		}
		else
		{
			min_diff =  abs(position - pwm_value);
			direction_motion = ANTI_CLOCKWISE;
    1b12:	2401      	movs	r4, #1
		if(abs(position - pwm_value)> HALF_PARTION)
    1b14:	4298      	cmp	r0, r3
    1b16:	dd03      	ble.n	1b20 <set_motion+0x20>
			min_diff =  MAX_PARTION - abs(position - pwm_value) ;
    1b18:	218c      	movs	r1, #140	; 0x8c
    1b1a:	0089      	lsls	r1, r1, #2
    1b1c:	1a08      	subs	r0, r1, r0
			direction_motion = CLOCKWISE;
    1b1e:	2400      	movs	r4, #0
		
	}
	
	
	
	if(min_diff > 100)
    1b20:	2864      	cmp	r0, #100	; 0x64
    1b22:	d81d      	bhi.n	1b60 <set_motion+0x60>
	{
		set_motor(direction_motion,MAX_SPEED);
	}
	else
	{	
		speed = (min_diff * MAX_SPEED)/ HALF_PARTION ; 
    1b24:	21e6      	movs	r1, #230	; 0xe6
    1b26:	4348      	muls	r0, r1
    1b28:	3132      	adds	r1, #50	; 0x32
    1b2a:	4b10      	ldr	r3, [pc, #64]	; (1b6c <set_motion+0x6c>)
    1b2c:	4798      	blx	r3
    1b2e:	2864      	cmp	r0, #100	; 0x64
    1b30:	d200      	bcs.n	1b34 <set_motion+0x34>
    1b32:	2064      	movs	r0, #100	; 0x64
		}
		else if(speed < MIN_SPEED)
		{
			speed = MIN_SPEED;
		}
		set_motor(direction_motion,speed);
    1b34:	28e6      	cmp	r0, #230	; 0xe6
    1b36:	d900      	bls.n	1b3a <set_motion+0x3a>
    1b38:	20e6      	movs	r0, #230	; 0xe6
    1b3a:	b2c1      	uxtb	r1, r0
    1b3c:	0020      	movs	r0, r4
    1b3e:	4b0c      	ldr	r3, [pc, #48]	; (1b70 <set_motion+0x70>)
    1b40:	4798      	blx	r3
	}
	
	
}
    1b42:	bd10      	pop	{r4, pc}
		if(abs(position - pwm_value)> HALF_PARTION)
    1b44:	1a40      	subs	r0, r0, r1
    1b46:	17c3      	asrs	r3, r0, #31
    1b48:	18c0      	adds	r0, r0, r3
    1b4a:	4058      	eors	r0, r3
    1b4c:	238c      	movs	r3, #140	; 0x8c
    1b4e:	005b      	lsls	r3, r3, #1
			direction_motion = CLOCKWISE;
    1b50:	2400      	movs	r4, #0
		if(abs(position - pwm_value)> HALF_PARTION)
    1b52:	4298      	cmp	r0, r3
    1b54:	dde4      	ble.n	1b20 <set_motion+0x20>
			min_diff =  MAX_PARTION - abs(position - pwm_value) ;
    1b56:	218c      	movs	r1, #140	; 0x8c
    1b58:	0089      	lsls	r1, r1, #2
    1b5a:	1a08      	subs	r0, r1, r0
			direction_motion = ANTI_CLOCKWISE;
    1b5c:	2401      	movs	r4, #1
    1b5e:	e7df      	b.n	1b20 <set_motion+0x20>
		set_motor(direction_motion,MAX_SPEED);
    1b60:	21e6      	movs	r1, #230	; 0xe6
    1b62:	0020      	movs	r0, r4
    1b64:	4b02      	ldr	r3, [pc, #8]	; (1b70 <set_motion+0x70>)
    1b66:	4798      	blx	r3
    1b68:	e7eb      	b.n	1b42 <set_motion+0x42>
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	000026c5 	.word	0x000026c5
    1b70:	000019bd 	.word	0x000019bd

00001b74 <convert2degree>:



int  convert2degree(volatile int x , volatile int y)
{
    1b74:	b082      	sub	sp, #8
    1b76:	9001      	str	r0, [sp, #4]
    1b78:	9100      	str	r1, [sp, #0]
	volatile static int pos_x[10];
	static int count = 0;
	count++;
    1b7a:	4a22      	ldr	r2, [pc, #136]	; (1c04 <convert2degree+0x90>)
    1b7c:	6813      	ldr	r3, [r2, #0]
    1b7e:	3301      	adds	r3, #1
    1b80:	6013      	str	r3, [r2, #0]
	if(x >= 0  && y < 0 )
    1b82:	9a01      	ldr	r2, [sp, #4]
    1b84:	2a00      	cmp	r2, #0
    1b86:	db02      	blt.n	1b8e <convert2degree+0x1a>
    1b88:	9a00      	ldr	r2, [sp, #0]
    1b8a:	2a00      	cmp	r2, #0
    1b8c:	db15      	blt.n	1bba <convert2degree+0x46>
	{
	//1st Quad
		pos_x[count] =  x ;	
	}
	
	else if(x >= 0  && y >= 0 )
    1b8e:	9a01      	ldr	r2, [sp, #4]
    1b90:	2a00      	cmp	r2, #0
    1b92:	db17      	blt.n	1bc4 <convert2degree+0x50>
    1b94:	9a00      	ldr	r2, [sp, #0]
    1b96:	2a00      	cmp	r2, #0
    1b98:	db14      	blt.n	1bc4 <convert2degree+0x50>
	{
	//2nd Quad
		pos_x[count] = 2*X_POS_LIMIT - x;
    1b9a:	9a01      	ldr	r2, [sp, #4]
    1b9c:	218f      	movs	r1, #143	; 0x8f
    1b9e:	0049      	lsls	r1, r1, #1
    1ba0:	1a89      	subs	r1, r1, r2
    1ba2:	009a      	lsls	r2, r3, #2
    1ba4:	4818      	ldr	r0, [pc, #96]	; (1c08 <convert2degree+0x94>)
    1ba6:	5011      	str	r1, [r2, r0]
	
	//if(count == 360)
	//{
	//	set_motor(0,0) ;
	//}
	if(count == 5)
    1ba8:	2b05      	cmp	r3, #5
    1baa:	d026      	beq.n	1bfa <convert2degree+0x86>
	{
		count = 0;
		//set_motor(0,200) ;
	}
	return pos_x[count];
    1bac:	4b15      	ldr	r3, [pc, #84]	; (1c04 <convert2degree+0x90>)
    1bae:	681b      	ldr	r3, [r3, #0]
    1bb0:	009b      	lsls	r3, r3, #2
    1bb2:	4a15      	ldr	r2, [pc, #84]	; (1c08 <convert2degree+0x94>)
    1bb4:	5898      	ldr	r0, [r3, r2]
	
}
    1bb6:	b002      	add	sp, #8
    1bb8:	4770      	bx	lr
		pos_x[count] =  x ;	
    1bba:	9801      	ldr	r0, [sp, #4]
    1bbc:	009a      	lsls	r2, r3, #2
    1bbe:	4912      	ldr	r1, [pc, #72]	; (1c08 <convert2degree+0x94>)
    1bc0:	5050      	str	r0, [r2, r1]
    1bc2:	e7f1      	b.n	1ba8 <convert2degree+0x34>
	else if(x< 0 && y>=0)
    1bc4:	9a01      	ldr	r2, [sp, #4]
    1bc6:	2a00      	cmp	r2, #0
    1bc8:	db0a      	blt.n	1be0 <convert2degree+0x6c>
		pos_x[count] = 4*X_POS_LIMIT - abs(x);
    1bca:	9a01      	ldr	r2, [sp, #4]
    1bcc:	17d1      	asrs	r1, r2, #31
    1bce:	1852      	adds	r2, r2, r1
    1bd0:	404a      	eors	r2, r1
    1bd2:	218f      	movs	r1, #143	; 0x8f
    1bd4:	0089      	lsls	r1, r1, #2
    1bd6:	1a89      	subs	r1, r1, r2
    1bd8:	009a      	lsls	r2, r3, #2
    1bda:	480b      	ldr	r0, [pc, #44]	; (1c08 <convert2degree+0x94>)
    1bdc:	5011      	str	r1, [r2, r0]
    1bde:	e7e3      	b.n	1ba8 <convert2degree+0x34>
	else if(x< 0 && y>=0)
    1be0:	9a00      	ldr	r2, [sp, #0]
    1be2:	2a00      	cmp	r2, #0
    1be4:	dbf1      	blt.n	1bca <convert2degree+0x56>
		pos_x[count] = 2*X_POS_LIMIT + abs(x);
    1be6:	9a01      	ldr	r2, [sp, #4]
    1be8:	17d1      	asrs	r1, r2, #31
    1bea:	1852      	adds	r2, r2, r1
    1bec:	404a      	eors	r2, r1
    1bee:	321f      	adds	r2, #31
    1bf0:	32ff      	adds	r2, #255	; 0xff
    1bf2:	0099      	lsls	r1, r3, #2
    1bf4:	4804      	ldr	r0, [pc, #16]	; (1c08 <convert2degree+0x94>)
    1bf6:	500a      	str	r2, [r1, r0]
    1bf8:	e7d6      	b.n	1ba8 <convert2degree+0x34>
		count = 0;
    1bfa:	2200      	movs	r2, #0
    1bfc:	4b01      	ldr	r3, [pc, #4]	; (1c04 <convert2degree+0x90>)
    1bfe:	601a      	str	r2, [r3, #0]
    1c00:	e7d4      	b.n	1bac <convert2degree+0x38>
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	20000148 	.word	0x20000148
    1c08:	20000160 	.word	0x20000160

00001c0c <check>:
//Check
void check(uint32_t pwm_value)
{
    1c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c0e:	0004      	movs	r4, r0
	bool direction_motion = true;
	
	temp_x =  x_left_a[0];
	temp_y =  y_left_a[0];
	
	if(filter_enable == true)
    1c10:	4b62      	ldr	r3, [pc, #392]	; (1d9c <check+0x190>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	2b01      	cmp	r3, #1
    1c16:	d000      	beq.n	1c1a <check+0xe>
			
			
		}
		
	}
}
    1c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	temp_x =  x_left_a[0];
    1c1a:	4b61      	ldr	r3, [pc, #388]	; (1da0 <check+0x194>)
    1c1c:	2700      	movs	r7, #0
    1c1e:	5fdf      	ldrsh	r7, [r3, r7]
	temp_y =  y_left_a[0];
    1c20:	4b60      	ldr	r3, [pc, #384]	; (1da4 <check+0x198>)
    1c22:	2200      	movs	r2, #0
    1c24:	5e9a      	ldrsh	r2, [r3, r2]
    1c26:	4694      	mov	ip, r2
		filter_enable = false;
    1c28:	2200      	movs	r2, #0
    1c2a:	4b5c      	ldr	r3, [pc, #368]	; (1d9c <check+0x190>)
    1c2c:	601a      	str	r2, [r3, #0]
    1c2e:	2308      	movs	r3, #8
			storage_array_x[i] = storage_array_x[i-1];	
    1c30:	485d      	ldr	r0, [pc, #372]	; (1da8 <check+0x19c>)
			storage_array_y[i] = storage_array_y[i-1];	
    1c32:	495e      	ldr	r1, [pc, #376]	; (1dac <check+0x1a0>)
			storage_array_x[i] = storage_array_x[i-1];	
    1c34:	1e9a      	subs	r2, r3, #2
    1c36:	5e85      	ldrsh	r5, [r0, r2]
    1c38:	521d      	strh	r5, [r3, r0]
			storage_array_y[i] = storage_array_y[i-1];	
    1c3a:	5e8d      	ldrsh	r5, [r1, r2]
    1c3c:	525d      	strh	r5, [r3, r1]
    1c3e:	1e13      	subs	r3, r2, #0
		for(i=NO_OF_SAMPLES-1;i>=1;i--)
    1c40:	d1f8      	bne.n	1c34 <check+0x28>
		if(initialization == true)
    1c42:	4b5b      	ldr	r3, [pc, #364]	; (1db0 <check+0x1a4>)
    1c44:	781b      	ldrb	r3, [r3, #0]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d020      	beq.n	1c8c <check+0x80>
			if(abs(abs(temp_x) - abs(storage_array_x[0])) < MARGIN)
    1c4a:	17fa      	asrs	r2, r7, #31
    1c4c:	18bb      	adds	r3, r7, r2
    1c4e:	4053      	eors	r3, r2
    1c50:	4a55      	ldr	r2, [pc, #340]	; (1da8 <check+0x19c>)
    1c52:	2100      	movs	r1, #0
    1c54:	5e52      	ldrsh	r2, [r2, r1]
    1c56:	17d1      	asrs	r1, r2, #31
    1c58:	1852      	adds	r2, r2, r1
    1c5a:	404a      	eors	r2, r1
    1c5c:	1a9b      	subs	r3, r3, r2
    1c5e:	3309      	adds	r3, #9
    1c60:	2b12      	cmp	r3, #18
    1c62:	d801      	bhi.n	1c68 <check+0x5c>
					storage_array_x[0] = temp_x ; 
    1c64:	4b50      	ldr	r3, [pc, #320]	; (1da8 <check+0x19c>)
    1c66:	801f      	strh	r7, [r3, #0]
			if(abs(abs(temp_y) - abs(storage_array_y[0])) < MARGIN)
    1c68:	4663      	mov	r3, ip
    1c6a:	17da      	asrs	r2, r3, #31
    1c6c:	189b      	adds	r3, r3, r2
    1c6e:	4053      	eors	r3, r2
    1c70:	4a4e      	ldr	r2, [pc, #312]	; (1dac <check+0x1a0>)
    1c72:	2100      	movs	r1, #0
    1c74:	5e52      	ldrsh	r2, [r2, r1]
    1c76:	17d1      	asrs	r1, r2, #31
    1c78:	1852      	adds	r2, r2, r1
    1c7a:	404a      	eors	r2, r1
    1c7c:	1a9b      	subs	r3, r3, r2
    1c7e:	3309      	adds	r3, #9
    1c80:	2b12      	cmp	r3, #18
    1c82:	d808      	bhi.n	1c96 <check+0x8a>
				storage_array_y[0] = temp_y ;
    1c84:	4b49      	ldr	r3, [pc, #292]	; (1dac <check+0x1a0>)
    1c86:	4662      	mov	r2, ip
    1c88:	801a      	strh	r2, [r3, #0]
    1c8a:	e004      	b.n	1c96 <check+0x8a>
			storage_array_x[0] = temp_x ; 
    1c8c:	4b46      	ldr	r3, [pc, #280]	; (1da8 <check+0x19c>)
    1c8e:	801f      	strh	r7, [r3, #0]
			storage_array_y[0] = temp_y ; 
    1c90:	4b46      	ldr	r3, [pc, #280]	; (1dac <check+0x1a0>)
    1c92:	4662      	mov	r2, ip
    1c94:	801a      	strh	r2, [r3, #0]
		avg_x[count_i] = (storage_array_x[4]*10 + storage_array_x[3]*15 + storage_array_x[2]*20 + storage_array_x[1]*25 + storage_array_x[0]*30)/100;
    1c96:	4b47      	ldr	r3, [pc, #284]	; (1db4 <check+0x1a8>)
    1c98:	681d      	ldr	r5, [r3, #0]
    1c9a:	4a43      	ldr	r2, [pc, #268]	; (1da8 <check+0x19c>)
    1c9c:	2108      	movs	r1, #8
    1c9e:	5e53      	ldrsh	r3, [r2, r1]
    1ca0:	0098      	lsls	r0, r3, #2
    1ca2:	18c0      	adds	r0, r0, r3
    1ca4:	0040      	lsls	r0, r0, #1
    1ca6:	2306      	movs	r3, #6
    1ca8:	5ed1      	ldrsh	r1, [r2, r3]
    1caa:	010b      	lsls	r3, r1, #4
    1cac:	1a5b      	subs	r3, r3, r1
    1cae:	18c0      	adds	r0, r0, r3
    1cb0:	2304      	movs	r3, #4
    1cb2:	5ed1      	ldrsh	r1, [r2, r3]
    1cb4:	008b      	lsls	r3, r1, #2
    1cb6:	185b      	adds	r3, r3, r1
    1cb8:	009b      	lsls	r3, r3, #2
    1cba:	18c0      	adds	r0, r0, r3
    1cbc:	2302      	movs	r3, #2
    1cbe:	5ed1      	ldrsh	r1, [r2, r3]
    1cc0:	008b      	lsls	r3, r1, #2
    1cc2:	185b      	adds	r3, r3, r1
    1cc4:	0099      	lsls	r1, r3, #2
    1cc6:	185b      	adds	r3, r3, r1
    1cc8:	18c0      	adds	r0, r0, r3
    1cca:	2300      	movs	r3, #0
    1ccc:	5ed2      	ldrsh	r2, [r2, r3]
    1cce:	0113      	lsls	r3, r2, #4
    1cd0:	1a9b      	subs	r3, r3, r2
    1cd2:	005b      	lsls	r3, r3, #1
    1cd4:	18c0      	adds	r0, r0, r3
    1cd6:	4f38      	ldr	r7, [pc, #224]	; (1db8 <check+0x1ac>)
    1cd8:	2164      	movs	r1, #100	; 0x64
    1cda:	47b8      	blx	r7
    1cdc:	00ae      	lsls	r6, r5, #2
    1cde:	4b37      	ldr	r3, [pc, #220]	; (1dbc <check+0x1b0>)
    1ce0:	50f0      	str	r0, [r6, r3]
		avg_y[count_i] = (storage_array_y[4]*10 + storage_array_y[3]*15 + storage_array_y[2]*20 + storage_array_y[1]*25 + storage_array_y[0]*30)/100;
    1ce2:	4a32      	ldr	r2, [pc, #200]	; (1dac <check+0x1a0>)
    1ce4:	2108      	movs	r1, #8
    1ce6:	5e53      	ldrsh	r3, [r2, r1]
    1ce8:	0098      	lsls	r0, r3, #2
    1cea:	18c0      	adds	r0, r0, r3
    1cec:	0040      	lsls	r0, r0, #1
    1cee:	2306      	movs	r3, #6
    1cf0:	5ed1      	ldrsh	r1, [r2, r3]
    1cf2:	010b      	lsls	r3, r1, #4
    1cf4:	1a5b      	subs	r3, r3, r1
    1cf6:	18c0      	adds	r0, r0, r3
    1cf8:	2304      	movs	r3, #4
    1cfa:	5ed1      	ldrsh	r1, [r2, r3]
    1cfc:	008b      	lsls	r3, r1, #2
    1cfe:	185b      	adds	r3, r3, r1
    1d00:	009b      	lsls	r3, r3, #2
    1d02:	18c0      	adds	r0, r0, r3
    1d04:	2302      	movs	r3, #2
    1d06:	5ed1      	ldrsh	r1, [r2, r3]
    1d08:	008b      	lsls	r3, r1, #2
    1d0a:	185b      	adds	r3, r3, r1
    1d0c:	0099      	lsls	r1, r3, #2
    1d0e:	185b      	adds	r3, r3, r1
    1d10:	18c0      	adds	r0, r0, r3
    1d12:	2300      	movs	r3, #0
    1d14:	5ed2      	ldrsh	r2, [r2, r3]
    1d16:	0113      	lsls	r3, r2, #4
    1d18:	1a9b      	subs	r3, r3, r2
    1d1a:	005b      	lsls	r3, r3, #1
    1d1c:	18c0      	adds	r0, r0, r3
    1d1e:	2164      	movs	r1, #100	; 0x64
    1d20:	47b8      	blx	r7
    1d22:	4b27      	ldr	r3, [pc, #156]	; (1dc0 <check+0x1b4>)
    1d24:	50f0      	str	r0, [r6, r3]
		if(initialization == true)
    1d26:	4b22      	ldr	r3, [pc, #136]	; (1db0 <check+0x1a4>)
    1d28:	781b      	ldrb	r3, [r3, #0]
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d01f      	beq.n	1d6e <check+0x162>
			 position = convert2degree(avg_x[count_i],avg_y[count_i]);
    1d2e:	4b23      	ldr	r3, [pc, #140]	; (1dbc <check+0x1b0>)
    1d30:	58f0      	ldr	r0, [r6, r3]
    1d32:	4b23      	ldr	r3, [pc, #140]	; (1dc0 <check+0x1b4>)
    1d34:	58f1      	ldr	r1, [r6, r3]
    1d36:	4b23      	ldr	r3, [pc, #140]	; (1dc4 <check+0x1b8>)
    1d38:	4798      	blx	r3
    1d3a:	4b23      	ldr	r3, [pc, #140]	; (1dc8 <check+0x1bc>)
    1d3c:	6018      	str	r0, [r3, #0]
			 if(abs(position-pwm_value) < 2)
    1d3e:	681b      	ldr	r3, [r3, #0]
    1d40:	1b1b      	subs	r3, r3, r4
    1d42:	17da      	asrs	r2, r3, #31
    1d44:	189b      	adds	r3, r3, r2
    1d46:	4053      	eors	r3, r2
    1d48:	2b01      	cmp	r3, #1
    1d4a:	dd05      	ble.n	1d58 <check+0x14c>
				set_motion(position,pwm_value);
    1d4c:	4b1e      	ldr	r3, [pc, #120]	; (1dc8 <check+0x1bc>)
    1d4e:	6818      	ldr	r0, [r3, #0]
    1d50:	0021      	movs	r1, r4
    1d52:	4b1e      	ldr	r3, [pc, #120]	; (1dcc <check+0x1c0>)
    1d54:	4798      	blx	r3
    1d56:	e75f      	b.n	1c18 <check+0xc>
				 stop_flag = true;
    1d58:	2201      	movs	r2, #1
    1d5a:	4b1d      	ldr	r3, [pc, #116]	; (1dd0 <check+0x1c4>)
    1d5c:	601a      	str	r2, [r3, #0]
				 initialization = false;
    1d5e:	2200      	movs	r2, #0
    1d60:	4b13      	ldr	r3, [pc, #76]	; (1db0 <check+0x1a4>)
    1d62:	701a      	strb	r2, [r3, #0]
				 set_motor(0,0);			
    1d64:	2100      	movs	r1, #0
    1d66:	2000      	movs	r0, #0
    1d68:	4b1a      	ldr	r3, [pc, #104]	; (1dd4 <check+0x1c8>)
    1d6a:	4798      	blx	r3
    1d6c:	e754      	b.n	1c18 <check+0xc>
			position = convert2degree(avg_x[count_i],avg_y[count_i]);
    1d6e:	00ab      	lsls	r3, r5, #2
    1d70:	4a12      	ldr	r2, [pc, #72]	; (1dbc <check+0x1b0>)
    1d72:	5898      	ldr	r0, [r3, r2]
    1d74:	4a12      	ldr	r2, [pc, #72]	; (1dc0 <check+0x1b4>)
    1d76:	5899      	ldr	r1, [r3, r2]
    1d78:	4b12      	ldr	r3, [pc, #72]	; (1dc4 <check+0x1b8>)
    1d7a:	4798      	blx	r3
    1d7c:	4b12      	ldr	r3, [pc, #72]	; (1dc8 <check+0x1bc>)
    1d7e:	6018      	str	r0, [r3, #0]
			count_i++;
    1d80:	3501      	adds	r5, #1
    1d82:	4b0c      	ldr	r3, [pc, #48]	; (1db4 <check+0x1a8>)
    1d84:	601d      	str	r5, [r3, #0]
			if(count_i == 6 )
    1d86:	2d06      	cmp	r5, #6
    1d88:	d000      	beq.n	1d8c <check+0x180>
    1d8a:	e745      	b.n	1c18 <check+0xc>
				initialization = true;
    1d8c:	2201      	movs	r2, #1
    1d8e:	4b08      	ldr	r3, [pc, #32]	; (1db0 <check+0x1a4>)
    1d90:	701a      	strb	r2, [r3, #0]
				count_i = 0;
    1d92:	2200      	movs	r2, #0
    1d94:	4b07      	ldr	r3, [pc, #28]	; (1db4 <check+0x1a8>)
    1d96:	601a      	str	r2, [r3, #0]
}
    1d98:	e73e      	b.n	1c18 <check+0xc>
    1d9a:	46c0      	nop			; (mov r8, r8)
    1d9c:	20000150 	.word	0x20000150
    1da0:	2000034c 	.word	0x2000034c
    1da4:	20000374 	.word	0x20000374
    1da8:	200001d4 	.word	0x200001d4
    1dac:	200001e8 	.word	0x200001e8
    1db0:	20000154 	.word	0x20000154
    1db4:	2000014c 	.word	0x2000014c
    1db8:	000027d9 	.word	0x000027d9
    1dbc:	20000030 	.word	0x20000030
    1dc0:	200000bc 	.word	0x200000bc
    1dc4:	00001b75 	.word	0x00001b75
    1dc8:	20000188 	.word	0x20000188
    1dcc:	00001b01 	.word	0x00001b01
    1dd0:	200001d0 	.word	0x200001d0
    1dd4:	000019bd 	.word	0x000019bd

00001dd8 <check_pwm>:

uint32_t check_pwm()
{
    1dd8:	b510      	push	{r4, lr}
	static uint32_t mode= 0;
	if(pwm_available == true)
    1dda:	4b08      	ldr	r3, [pc, #32]	; (1dfc <check_pwm+0x24>)
    1ddc:	781b      	ldrb	r3, [r3, #0]
    1dde:	2b00      	cmp	r3, #0
    1de0:	d102      	bne.n	1de8 <check_pwm+0x10>
	{
		pwm_available = false;
		mode = find_mode(pwm_rawvalue);
	}
	return mode;
    1de2:	4b07      	ldr	r3, [pc, #28]	; (1e00 <check_pwm+0x28>)
    1de4:	6818      	ldr	r0, [r3, #0]
}
    1de6:	bd10      	pop	{r4, pc}
		pwm_available = false;
    1de8:	2200      	movs	r2, #0
    1dea:	4b04      	ldr	r3, [pc, #16]	; (1dfc <check_pwm+0x24>)
    1dec:	701a      	strb	r2, [r3, #0]
		mode = find_mode(pwm_rawvalue);
    1dee:	4805      	ldr	r0, [pc, #20]	; (1e04 <check_pwm+0x2c>)
    1df0:	4b05      	ldr	r3, [pc, #20]	; (1e08 <check_pwm+0x30>)
    1df2:	4798      	blx	r3
    1df4:	4b02      	ldr	r3, [pc, #8]	; (1e00 <check_pwm+0x28>)
    1df6:	6018      	str	r0, [r3, #0]
    1df8:	e7f3      	b.n	1de2 <check_pwm+0xa>
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	20000190 	.word	0x20000190
    1e00:	2000015c 	.word	0x2000015c
    1e04:	20000194 	.word	0x20000194
    1e08:	000019f9 	.word	0x000019f9

00001e0c <check_motor>:

void check_motor(uint32_t present_pwm_value)
{
    1e0c:	b570      	push	{r4, r5, r6, lr}
    1e0e:	0004      	movs	r4, r0
	static uint32_t prev_pwm_value = 0;
	int temp = 0;
	if(abs(present_pwm_value - prev_pwm_value) > 2  )//not equal to previous
    1e10:	4b0a      	ldr	r3, [pc, #40]	; (1e3c <check_motor+0x30>)
    1e12:	681b      	ldr	r3, [r3, #0]
    1e14:	1ac3      	subs	r3, r0, r3
    1e16:	17da      	asrs	r2, r3, #31
    1e18:	189b      	adds	r3, r3, r2
    1e1a:	4053      	eors	r3, r2
    1e1c:	2b02      	cmp	r3, #2
    1e1e:	dd0b      	ble.n	1e38 <check_motor+0x2c>
			
			//extint_chan_disable_callback(PWM_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
			//tc_enable(&tc_instance1);
			//tc_enable_callback(&tc_instance1, TC_CALLBACK_OVERFLOW);
			//Disable external Interrupts;
			stop_flag = false;
    1e20:	2200      	movs	r2, #0
    1e22:	4b07      	ldr	r3, [pc, #28]	; (1e40 <check_motor+0x34>)
    1e24:	601a      	str	r2, [r3, #0]
			prev_pwm_value = present_pwm_value ;
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <check_motor+0x30>)
    1e28:	6018      	str	r0, [r3, #0]
			temp = present_pwm_value;
			temp = temp;
			while(stop_flag == false )
			{
				check(temp);
    1e2a:	4e06      	ldr	r6, [pc, #24]	; (1e44 <check_motor+0x38>)
			while(stop_flag == false )
    1e2c:	4d04      	ldr	r5, [pc, #16]	; (1e40 <check_motor+0x34>)
				check(temp);
    1e2e:	0020      	movs	r0, r4
    1e30:	47b0      	blx	r6
			while(stop_flag == false )
    1e32:	682b      	ldr	r3, [r5, #0]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d0fa      	beq.n	1e2e <check_motor+0x22>
			//tc_disable(&tc_instance1);
			//extint_chan_enable_callback(PWM_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);

		}
	
}
    1e38:	bd70      	pop	{r4, r5, r6, pc}
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	2000018c 	.word	0x2000018c
    1e40:	200001d0 	.word	0x200001d0
    1e44:	00001c0d 	.word	0x00001c0d

00001e48 <main>:
int main (void)
{	
    1e48:	b570      	push	{r4, r5, r6, lr}
	//
	uint32_t present_pwm_value = 0;
	
	system_init();
    1e4a:	4b0a      	ldr	r3, [pc, #40]	; (1e74 <main+0x2c>)
    1e4c:	4798      	blx	r3
	enable_motor();
    1e4e:	4b0a      	ldr	r3, [pc, #40]	; (1e78 <main+0x30>)
    1e50:	4798      	blx	r3
	configure_encoder();
    1e52:	4b0a      	ldr	r3, [pc, #40]	; (1e7c <main+0x34>)
    1e54:	4798      	blx	r3
	configure_pid_servo_control();
    1e56:	4b0a      	ldr	r3, [pc, #40]	; (1e80 <main+0x38>)
    1e58:	4798      	blx	r3
	irq_initialize_vectors();
	cpu_irq_enable();
    1e5a:	2201      	movs	r2, #1
    1e5c:	4b09      	ldr	r3, [pc, #36]	; (1e84 <main+0x3c>)
    1e5e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1e60:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1e64:	b662      	cpsie	i
	//initialize_xyz();
	//set_motor(0,200) ;
	/* Insert application code here, after the board has been initialized. */
	initialize_find_pwm();
    1e66:	4b08      	ldr	r3, [pc, #32]	; (1e88 <main+0x40>)
    1e68:	4798      	blx	r3
	while(1)
	{
		int i=0 ;
		present_pwm_value = check_pwm();
    1e6a:	4d08      	ldr	r5, [pc, #32]	; (1e8c <main+0x44>)
		check_motor(present_pwm_value);
    1e6c:	4c08      	ldr	r4, [pc, #32]	; (1e90 <main+0x48>)
		present_pwm_value = check_pwm();
    1e6e:	47a8      	blx	r5
		check_motor(present_pwm_value);
    1e70:	47a0      	blx	r4
    1e72:	e7fc      	b.n	1e6e <main+0x26>
    1e74:	000025c5 	.word	0x000025c5
    1e78:	000019a9 	.word	0x000019a9
    1e7c:	00001811 	.word	0x00001811
    1e80:	000018d5 	.word	0x000018d5
    1e84:	20000001 	.word	0x20000001
    1e88:	000016cd 	.word	0x000016cd
    1e8c:	00001dd9 	.word	0x00001dd9
    1e90:	00001e0d 	.word	0x00001e0d

00001e94 <get_data_encoders>:


	

void get_data_encoders(struct i2c_master_module instance)
{
    1e94:	b084      	sub	sp, #16
    1e96:	b510      	push	{r4, lr}
    1e98:	b084      	sub	sp, #16
    1e9a:	9006      	str	r0, [sp, #24]
    1e9c:	9107      	str	r1, [sp, #28]
    1e9e:	9208      	str	r2, [sp, #32]
    1ea0:	9309      	str	r3, [sp, #36]	; 0x24
	struct i2c_master_packet packet = {
    1ea2:	aa01      	add	r2, sp, #4
    1ea4:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <get_data_encoders+0x2c>)
    1ea6:	cb13      	ldmia	r3!, {r0, r1, r4}
    1ea8:	c213      	stmia	r2!, {r0, r1, r4}
		.high_speed = false,
		.hs_master_code  = 0x0,
	};
	
	// Read all the registers of the encoder
	while(i2c_master_read_packet_wait(&instance, &packet) != STATUS_OK)
    1eaa:	4c06      	ldr	r4, [pc, #24]	; (1ec4 <get_data_encoders+0x30>)
    1eac:	a901      	add	r1, sp, #4
    1eae:	a806      	add	r0, sp, #24
    1eb0:	47a0      	blx	r4
    1eb2:	2800      	cmp	r0, #0
    1eb4:	d1fa      	bne.n	1eac <get_data_encoders+0x18>
	{
		
	};
	
}
    1eb6:	b004      	add	sp, #16
    1eb8:	bc10      	pop	{r4}
    1eba:	bc08      	pop	{r3}
    1ebc:	b004      	add	sp, #16
    1ebe:	4718      	bx	r3
    1ec0:	00002a2c 	.word	0x00002a2c
    1ec4:	00000819 	.word	0x00000819

00001ec8 <read_encoders>:




uint16_t read_encoders()
{
    1ec8:	b530      	push	{r4, r5, lr}
    1eca:	b087      	sub	sp, #28
	 uint16_t y_pos;
	
	x_left = 0;
	y_left = 0;
	z_left = 0;
	get_data_encoders(i2c_master_encoder);
    1ecc:	4c22      	ldr	r4, [pc, #136]	; (1f58 <read_encoders+0x90>)
    1ece:	0023      	movs	r3, r4
    1ed0:	3310      	adds	r3, #16
    1ed2:	466a      	mov	r2, sp
    1ed4:	cb23      	ldmia	r3!, {r0, r1, r5}
    1ed6:	c223      	stmia	r2!, {r0, r1, r5}
    1ed8:	cb23      	ldmia	r3!, {r0, r1, r5}
    1eda:	c223      	stmia	r2!, {r0, r1, r5}
    1edc:	6820      	ldr	r0, [r4, #0]
    1ede:	6861      	ldr	r1, [r4, #4]
    1ee0:	68a2      	ldr	r2, [r4, #8]
    1ee2:	68e3      	ldr	r3, [r4, #12]
    1ee4:	4c1d      	ldr	r4, [pc, #116]	; (1f5c <read_encoders+0x94>)
    1ee6:	47a0      	blx	r4
	
	temp = bufferReceive_encoder[5] & 0x0010;
    1ee8:	4b1d      	ldr	r3, [pc, #116]	; (1f60 <read_encoders+0x98>)
    1eea:	795c      	ldrb	r4, [r3, #5]
	conversion_complete = temp<<5;
	
	if(conversion_complete == 0 )
    1eec:	06e3      	lsls	r3, r4, #27
    1eee:	d42f      	bmi.n	1f50 <read_encoders+0x88>
	{
		x_left = bufferReceive_encoder[0];
		x_left = x_left << 4 ;
		temp = bufferReceive_encoder[4] & 0x00F0;
    1ef0:	4b1b      	ldr	r3, [pc, #108]	; (1f60 <read_encoders+0x98>)
    1ef2:	791d      	ldrb	r5, [r3, #4]
		x_left = x_left << 4 ;
    1ef4:	7819      	ldrb	r1, [r3, #0]
    1ef6:	0109      	lsls	r1, r1, #4
		temp = temp >> 4;
    1ef8:	092b      	lsrs	r3, r5, #4
		x_left = x_left + temp ;
    1efa:	18c9      	adds	r1, r1, r3
		temp  = x_left & 0x0800;
		x_left = x_left & 0x07FF;
    1efc:	0548      	lsls	r0, r1, #21
    1efe:	0d40      	lsrs	r0, r0, #21
		if(temp > 0 )
    1f00:	050b      	lsls	r3, r1, #20
    1f02:	d502      	bpl.n	1f0a <read_encoders+0x42>
		{
			x_left = x_left- 2048;
    1f04:	4b17      	ldr	r3, [pc, #92]	; (1f64 <read_encoders+0x9c>)
    1f06:	469c      	mov	ip, r3
    1f08:	4460      	add	r0, ip
		}
		x_left_a[i_count] = x_left;
    1f0a:	4b17      	ldr	r3, [pc, #92]	; (1f68 <read_encoders+0xa0>)
    1f0c:	8018      	strh	r0, [r3, #0]
		y_left = bufferReceive_encoder[1];
    1f0e:	4b14      	ldr	r3, [pc, #80]	; (1f60 <read_encoders+0x98>)
		y_left = y_left << 4 ;
    1f10:	785b      	ldrb	r3, [r3, #1]
    1f12:	011b      	lsls	r3, r3, #4
		temp   = bufferReceive_encoder[4] & 0x000F;
		y_left = y_left + temp ;
    1f14:	220f      	movs	r2, #15
    1f16:	402a      	ands	r2, r5
    1f18:	18d2      	adds	r2, r2, r3
		temp   = y_left & 0x0800;
		y_left = y_left & 0x07FF;
    1f1a:	0551      	lsls	r1, r2, #21
    1f1c:	0d49      	lsrs	r1, r1, #21
		if(temp > 0 )
    1f1e:	0513      	lsls	r3, r2, #20
    1f20:	d502      	bpl.n	1f28 <read_encoders+0x60>
		{
			y_left = y_left- 2048;
    1f22:	4b10      	ldr	r3, [pc, #64]	; (1f64 <read_encoders+0x9c>)
    1f24:	469c      	mov	ip, r3
    1f26:	4461      	add	r1, ip
		}
		y_left_a[i_count] = y_left;
    1f28:	4b10      	ldr	r3, [pc, #64]	; (1f6c <read_encoders+0xa4>)
    1f2a:	8019      	strh	r1, [r3, #0]
		
		z_left = bufferReceive_encoder[2];
    1f2c:	4b0c      	ldr	r3, [pc, #48]	; (1f60 <read_encoders+0x98>)
		z_left = z_left << 4 ;
    1f2e:	789a      	ldrb	r2, [r3, #2]
    1f30:	0112      	lsls	r2, r2, #4
		temp = bufferReceive_encoder[5] & 0x000F;
		z_left = z_left + temp ;
    1f32:	230f      	movs	r3, #15
    1f34:	4023      	ands	r3, r4
    1f36:	189b      	adds	r3, r3, r2
		
		temp  = z_left & 0x0800;
		z_left = z_left & 0x07FF;
    1f38:	055a      	lsls	r2, r3, #21
    1f3a:	0d52      	lsrs	r2, r2, #21
		if(temp > 0 )
    1f3c:	051b      	lsls	r3, r3, #20
    1f3e:	d502      	bpl.n	1f46 <read_encoders+0x7e>
		{
			z_left = z_left- 2048;
    1f40:	4b08      	ldr	r3, [pc, #32]	; (1f64 <read_encoders+0x9c>)
    1f42:	469c      	mov	ip, r3
    1f44:	4462      	add	r2, ip
		}
		z_left_a[i_count] = z_left;
    1f46:	4b0a      	ldr	r3, [pc, #40]	; (1f70 <read_encoders+0xa8>)
    1f48:	801a      	strh	r2, [r3, #0]
		
		//i_count = i_count + 1;
		
		filter_enable = 1;
    1f4a:	2201      	movs	r2, #1
    1f4c:	4b09      	ldr	r3, [pc, #36]	; (1f74 <read_encoders+0xac>)
    1f4e:	601a      	str	r2, [r3, #0]
		//}
		
	}
	//y_pos = 360 - y_pos;
	return y_pos;
}
    1f50:	2000      	movs	r0, #0
    1f52:	b007      	add	sp, #28
    1f54:	bd30      	pop	{r4, r5, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	200002f8 	.word	0x200002f8
    1f5c:	00001e95 	.word	0x00001e95
    1f60:	200001fc 	.word	0x200001fc
    1f64:	fffff800 	.word	0xfffff800
    1f68:	2000034c 	.word	0x2000034c
    1f6c:	20000374 	.word	0x20000374
    1f70:	20000324 	.word	0x20000324
    1f74:	20000150 	.word	0x20000150

00001f78 <tc_callback_servo_control>:
{
    1f78:	b570      	push	{r4, r5, r6, lr}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    1f7a:	4c13      	ldr	r4, [pc, #76]	; (1fc8 <tc_callback_servo_control+0x50>)
    1f7c:	2501      	movs	r5, #1
    1f7e:	6823      	ldr	r3, [r4, #0]
    1f80:	731d      	strb	r5, [r3, #12]
		module->enable_callback_mask &= ~(1 << callback_type);
    1f82:	7e63      	ldrb	r3, [r4, #25]
    1f84:	43ab      	bics	r3, r5
    1f86:	7663      	strb	r3, [r4, #25]
	servo_pos = read_encoders();
    1f88:	4b10      	ldr	r3, [pc, #64]	; (1fcc <tc_callback_servo_control+0x54>)
    1f8a:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1f8c:	6820      	ldr	r0, [r4, #0]
    1f8e:	4b10      	ldr	r3, [pc, #64]	; (1fd0 <tc_callback_servo_control+0x58>)
    1f90:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1f92:	4b10      	ldr	r3, [pc, #64]	; (1fd4 <tc_callback_servo_control+0x5c>)
    1f94:	5c1a      	ldrb	r2, [r3, r0]
    1f96:	231f      	movs	r3, #31
    1f98:	4013      	ands	r3, r2
    1f9a:	002a      	movs	r2, r5
    1f9c:	409a      	lsls	r2, r3
    1f9e:	4b0e      	ldr	r3, [pc, #56]	; (1fd8 <tc_callback_servo_control+0x60>)
    1fa0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    1fa2:	7e63      	ldrb	r3, [r4, #25]
    1fa4:	2201      	movs	r2, #1
    1fa6:	4313      	orrs	r3, r2
    1fa8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1faa:	6823      	ldr	r3, [r4, #0]
    1fac:	735d      	strb	r5, [r3, #13]
	i = i + 1;
    1fae:	4b0b      	ldr	r3, [pc, #44]	; (1fdc <tc_callback_servo_control+0x64>)
    1fb0:	881b      	ldrh	r3, [r3, #0]
    1fb2:	3301      	adds	r3, #1
    1fb4:	b29b      	uxth	r3, r3
	if(i == 255)
    1fb6:	2bff      	cmp	r3, #255	; 0xff
    1fb8:	d002      	beq.n	1fc0 <tc_callback_servo_control+0x48>
	i = i + 1;
    1fba:	4a08      	ldr	r2, [pc, #32]	; (1fdc <tc_callback_servo_control+0x64>)
    1fbc:	8013      	strh	r3, [r2, #0]
}
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
		i=0;
    1fc0:	2200      	movs	r2, #0
    1fc2:	4b06      	ldr	r3, [pc, #24]	; (1fdc <tc_callback_servo_control+0x64>)
    1fc4:	801a      	strh	r2, [r3, #0]
}
    1fc6:	e7fa      	b.n	1fbe <tc_callback_servo_control+0x46>
    1fc8:	200002dc 	.word	0x200002dc
    1fcc:	00001ec9 	.word	0x00001ec9
    1fd0:	000010a9 	.word	0x000010a9
    1fd4:	00002a38 	.word	0x00002a38
    1fd8:	e000e100 	.word	0xe000e100
    1fdc:	20000204 	.word	0x20000204

00001fe0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1fe0:	4770      	bx	lr
	...

00001fe4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1fe4:	4b0c      	ldr	r3, [pc, #48]	; (2018 <cpu_irq_enter_critical+0x34>)
    1fe6:	681b      	ldr	r3, [r3, #0]
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d106      	bne.n	1ffa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1fec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1ff0:	2b00      	cmp	r3, #0
    1ff2:	d007      	beq.n	2004 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1ff4:	2200      	movs	r2, #0
    1ff6:	4b09      	ldr	r3, [pc, #36]	; (201c <cpu_irq_enter_critical+0x38>)
    1ff8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1ffa:	4a07      	ldr	r2, [pc, #28]	; (2018 <cpu_irq_enter_critical+0x34>)
    1ffc:	6813      	ldr	r3, [r2, #0]
    1ffe:	3301      	adds	r3, #1
    2000:	6013      	str	r3, [r2, #0]
}
    2002:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2004:	b672      	cpsid	i
    2006:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    200a:	2200      	movs	r2, #0
    200c:	4b04      	ldr	r3, [pc, #16]	; (2020 <cpu_irq_enter_critical+0x3c>)
    200e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2010:	3201      	adds	r2, #1
    2012:	4b02      	ldr	r3, [pc, #8]	; (201c <cpu_irq_enter_critical+0x38>)
    2014:	701a      	strb	r2, [r3, #0]
    2016:	e7f0      	b.n	1ffa <cpu_irq_enter_critical+0x16>
    2018:	20000208 	.word	0x20000208
    201c:	2000020c 	.word	0x2000020c
    2020:	20000001 	.word	0x20000001

00002024 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2024:	4b08      	ldr	r3, [pc, #32]	; (2048 <cpu_irq_leave_critical+0x24>)
    2026:	681a      	ldr	r2, [r3, #0]
    2028:	3a01      	subs	r2, #1
    202a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	2b00      	cmp	r3, #0
    2030:	d109      	bne.n	2046 <cpu_irq_leave_critical+0x22>
    2032:	4b06      	ldr	r3, [pc, #24]	; (204c <cpu_irq_leave_critical+0x28>)
    2034:	781b      	ldrb	r3, [r3, #0]
    2036:	2b00      	cmp	r3, #0
    2038:	d005      	beq.n	2046 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    203a:	2201      	movs	r2, #1
    203c:	4b04      	ldr	r3, [pc, #16]	; (2050 <cpu_irq_leave_critical+0x2c>)
    203e:	701a      	strb	r2, [r3, #0]
    2040:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2044:	b662      	cpsie	i
	}
}
    2046:	4770      	bx	lr
    2048:	20000208 	.word	0x20000208
    204c:	2000020c 	.word	0x2000020c
    2050:	20000001 	.word	0x20000001

00002054 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2054:	b510      	push	{r4, lr}
	switch (clock_source) {
    2056:	2808      	cmp	r0, #8
    2058:	d803      	bhi.n	2062 <system_clock_source_get_hz+0xe>
    205a:	0080      	lsls	r0, r0, #2
    205c:	4b1b      	ldr	r3, [pc, #108]	; (20cc <system_clock_source_get_hz+0x78>)
    205e:	581b      	ldr	r3, [r3, r0]
    2060:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2062:	2000      	movs	r0, #0
    2064:	e030      	b.n	20c8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    2066:	4b1a      	ldr	r3, [pc, #104]	; (20d0 <system_clock_source_get_hz+0x7c>)
    2068:	6918      	ldr	r0, [r3, #16]
    206a:	e02d      	b.n	20c8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    206c:	4b19      	ldr	r3, [pc, #100]	; (20d4 <system_clock_source_get_hz+0x80>)
    206e:	6a1b      	ldr	r3, [r3, #32]
    2070:	059b      	lsls	r3, r3, #22
    2072:	0f9b      	lsrs	r3, r3, #30
    2074:	4818      	ldr	r0, [pc, #96]	; (20d8 <system_clock_source_get_hz+0x84>)
    2076:	40d8      	lsrs	r0, r3
    2078:	e026      	b.n	20c8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    207a:	4b15      	ldr	r3, [pc, #84]	; (20d0 <system_clock_source_get_hz+0x7c>)
    207c:	6958      	ldr	r0, [r3, #20]
    207e:	e023      	b.n	20c8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2080:	4b13      	ldr	r3, [pc, #76]	; (20d0 <system_clock_source_get_hz+0x7c>)
    2082:	681b      	ldr	r3, [r3, #0]
			return 0;
    2084:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2086:	079b      	lsls	r3, r3, #30
    2088:	d51e      	bpl.n	20c8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    208a:	4912      	ldr	r1, [pc, #72]	; (20d4 <system_clock_source_get_hz+0x80>)
    208c:	2210      	movs	r2, #16
    208e:	68cb      	ldr	r3, [r1, #12]
    2090:	421a      	tst	r2, r3
    2092:	d0fc      	beq.n	208e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2094:	4b0e      	ldr	r3, [pc, #56]	; (20d0 <system_clock_source_get_hz+0x7c>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	075b      	lsls	r3, r3, #29
    209a:	d401      	bmi.n	20a0 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    209c:	480f      	ldr	r0, [pc, #60]	; (20dc <system_clock_source_get_hz+0x88>)
    209e:	e013      	b.n	20c8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    20a0:	2000      	movs	r0, #0
    20a2:	4b0f      	ldr	r3, [pc, #60]	; (20e0 <system_clock_source_get_hz+0x8c>)
    20a4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    20a6:	4b0a      	ldr	r3, [pc, #40]	; (20d0 <system_clock_source_get_hz+0x7c>)
    20a8:	689b      	ldr	r3, [r3, #8]
    20aa:	041b      	lsls	r3, r3, #16
    20ac:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    20ae:	4358      	muls	r0, r3
    20b0:	e00a      	b.n	20c8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    20b2:	2350      	movs	r3, #80	; 0x50
    20b4:	4a07      	ldr	r2, [pc, #28]	; (20d4 <system_clock_source_get_hz+0x80>)
    20b6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    20b8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    20ba:	075b      	lsls	r3, r3, #29
    20bc:	d504      	bpl.n	20c8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    20be:	4b04      	ldr	r3, [pc, #16]	; (20d0 <system_clock_source_get_hz+0x7c>)
    20c0:	68d8      	ldr	r0, [r3, #12]
    20c2:	e001      	b.n	20c8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    20c4:	2080      	movs	r0, #128	; 0x80
    20c6:	0200      	lsls	r0, r0, #8
	}
}
    20c8:	bd10      	pop	{r4, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	00002a3c 	.word	0x00002a3c
    20d0:	20000210 	.word	0x20000210
    20d4:	40000800 	.word	0x40000800
    20d8:	007a1200 	.word	0x007a1200
    20dc:	02dc6c00 	.word	0x02dc6c00
    20e0:	000024b5 	.word	0x000024b5

000020e4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    20e4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    20e6:	490c      	ldr	r1, [pc, #48]	; (2118 <system_clock_source_osc8m_set_config+0x34>)
    20e8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    20ea:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    20ec:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    20ee:	7840      	ldrb	r0, [r0, #1]
    20f0:	2201      	movs	r2, #1
    20f2:	4010      	ands	r0, r2
    20f4:	0180      	lsls	r0, r0, #6
    20f6:	2640      	movs	r6, #64	; 0x40
    20f8:	43b3      	bics	r3, r6
    20fa:	4303      	orrs	r3, r0
    20fc:	402a      	ands	r2, r5
    20fe:	01d2      	lsls	r2, r2, #7
    2100:	2080      	movs	r0, #128	; 0x80
    2102:	4383      	bics	r3, r0
    2104:	4313      	orrs	r3, r2
    2106:	2203      	movs	r2, #3
    2108:	4022      	ands	r2, r4
    210a:	0212      	lsls	r2, r2, #8
    210c:	4803      	ldr	r0, [pc, #12]	; (211c <system_clock_source_osc8m_set_config+0x38>)
    210e:	4003      	ands	r3, r0
    2110:	4313      	orrs	r3, r2
    2112:	620b      	str	r3, [r1, #32]
}
    2114:	bd70      	pop	{r4, r5, r6, pc}
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	40000800 	.word	0x40000800
    211c:	fffffcff 	.word	0xfffffcff

00002120 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2120:	2808      	cmp	r0, #8
    2122:	d803      	bhi.n	212c <system_clock_source_enable+0xc>
    2124:	0080      	lsls	r0, r0, #2
    2126:	4b25      	ldr	r3, [pc, #148]	; (21bc <system_clock_source_enable+0x9c>)
    2128:	581b      	ldr	r3, [r3, r0]
    212a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    212c:	2017      	movs	r0, #23
    212e:	e044      	b.n	21ba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2130:	4a23      	ldr	r2, [pc, #140]	; (21c0 <system_clock_source_enable+0xa0>)
    2132:	6a13      	ldr	r3, [r2, #32]
    2134:	2102      	movs	r1, #2
    2136:	430b      	orrs	r3, r1
    2138:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    213a:	2000      	movs	r0, #0
    213c:	e03d      	b.n	21ba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    213e:	4a20      	ldr	r2, [pc, #128]	; (21c0 <system_clock_source_enable+0xa0>)
    2140:	6993      	ldr	r3, [r2, #24]
    2142:	2102      	movs	r1, #2
    2144:	430b      	orrs	r3, r1
    2146:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2148:	2000      	movs	r0, #0
		break;
    214a:	e036      	b.n	21ba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    214c:	4a1c      	ldr	r2, [pc, #112]	; (21c0 <system_clock_source_enable+0xa0>)
    214e:	8a13      	ldrh	r3, [r2, #16]
    2150:	2102      	movs	r1, #2
    2152:	430b      	orrs	r3, r1
    2154:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2156:	2000      	movs	r0, #0
		break;
    2158:	e02f      	b.n	21ba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    215a:	4a19      	ldr	r2, [pc, #100]	; (21c0 <system_clock_source_enable+0xa0>)
    215c:	8a93      	ldrh	r3, [r2, #20]
    215e:	2102      	movs	r1, #2
    2160:	430b      	orrs	r3, r1
    2162:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2164:	2000      	movs	r0, #0
		break;
    2166:	e028      	b.n	21ba <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2168:	4916      	ldr	r1, [pc, #88]	; (21c4 <system_clock_source_enable+0xa4>)
    216a:	680b      	ldr	r3, [r1, #0]
    216c:	2202      	movs	r2, #2
    216e:	4313      	orrs	r3, r2
    2170:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2172:	4b13      	ldr	r3, [pc, #76]	; (21c0 <system_clock_source_enable+0xa0>)
    2174:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2176:	0019      	movs	r1, r3
    2178:	320e      	adds	r2, #14
    217a:	68cb      	ldr	r3, [r1, #12]
    217c:	421a      	tst	r2, r3
    217e:	d0fc      	beq.n	217a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2180:	4a10      	ldr	r2, [pc, #64]	; (21c4 <system_clock_source_enable+0xa4>)
    2182:	6891      	ldr	r1, [r2, #8]
    2184:	4b0e      	ldr	r3, [pc, #56]	; (21c0 <system_clock_source_enable+0xa0>)
    2186:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2188:	6852      	ldr	r2, [r2, #4]
    218a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    218c:	2200      	movs	r2, #0
    218e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2190:	0019      	movs	r1, r3
    2192:	3210      	adds	r2, #16
    2194:	68cb      	ldr	r3, [r1, #12]
    2196:	421a      	tst	r2, r3
    2198:	d0fc      	beq.n	2194 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    219a:	4b0a      	ldr	r3, [pc, #40]	; (21c4 <system_clock_source_enable+0xa4>)
    219c:	681b      	ldr	r3, [r3, #0]
    219e:	b29b      	uxth	r3, r3
    21a0:	4a07      	ldr	r2, [pc, #28]	; (21c0 <system_clock_source_enable+0xa0>)
    21a2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    21a4:	2000      	movs	r0, #0
    21a6:	e008      	b.n	21ba <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    21a8:	4905      	ldr	r1, [pc, #20]	; (21c0 <system_clock_source_enable+0xa0>)
    21aa:	2244      	movs	r2, #68	; 0x44
    21ac:	5c8b      	ldrb	r3, [r1, r2]
    21ae:	2002      	movs	r0, #2
    21b0:	4303      	orrs	r3, r0
    21b2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    21b4:	2000      	movs	r0, #0
		break;
    21b6:	e000      	b.n	21ba <system_clock_source_enable+0x9a>
		return STATUS_OK;
    21b8:	2000      	movs	r0, #0
}
    21ba:	4770      	bx	lr
    21bc:	00002a60 	.word	0x00002a60
    21c0:	40000800 	.word	0x40000800
    21c4:	20000210 	.word	0x20000210

000021c8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    21c8:	b530      	push	{r4, r5, lr}
    21ca:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    21cc:	22c2      	movs	r2, #194	; 0xc2
    21ce:	00d2      	lsls	r2, r2, #3
    21d0:	4b1a      	ldr	r3, [pc, #104]	; (223c <system_clock_init+0x74>)
    21d2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    21d4:	4a1a      	ldr	r2, [pc, #104]	; (2240 <system_clock_init+0x78>)
    21d6:	6853      	ldr	r3, [r2, #4]
    21d8:	211e      	movs	r1, #30
    21da:	438b      	bics	r3, r1
    21dc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    21de:	2301      	movs	r3, #1
    21e0:	466a      	mov	r2, sp
    21e2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    21e4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    21e6:	4d17      	ldr	r5, [pc, #92]	; (2244 <system_clock_init+0x7c>)
    21e8:	b2e0      	uxtb	r0, r4
    21ea:	4669      	mov	r1, sp
    21ec:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    21ee:	3401      	adds	r4, #1
    21f0:	2c18      	cmp	r4, #24
    21f2:	d1f9      	bne.n	21e8 <system_clock_init+0x20>
	config->run_in_standby  = false;
    21f4:	a803      	add	r0, sp, #12
    21f6:	2400      	movs	r4, #0
    21f8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    21fa:	2501      	movs	r5, #1
    21fc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    21fe:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2200:	4b11      	ldr	r3, [pc, #68]	; (2248 <system_clock_init+0x80>)
    2202:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2204:	2006      	movs	r0, #6
    2206:	4b11      	ldr	r3, [pc, #68]	; (224c <system_clock_init+0x84>)
    2208:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    220a:	4b11      	ldr	r3, [pc, #68]	; (2250 <system_clock_init+0x88>)
    220c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    220e:	4b11      	ldr	r3, [pc, #68]	; (2254 <system_clock_init+0x8c>)
    2210:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2212:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2214:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2216:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    2218:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    221a:	466b      	mov	r3, sp
    221c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    221e:	2306      	movs	r3, #6
    2220:	466a      	mov	r2, sp
    2222:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    2224:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2226:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2228:	4669      	mov	r1, sp
    222a:	2000      	movs	r0, #0
    222c:	4b0a      	ldr	r3, [pc, #40]	; (2258 <system_clock_init+0x90>)
    222e:	4798      	blx	r3
    2230:	2000      	movs	r0, #0
    2232:	4b0a      	ldr	r3, [pc, #40]	; (225c <system_clock_init+0x94>)
    2234:	4798      	blx	r3
#endif
}
    2236:	b005      	add	sp, #20
    2238:	bd30      	pop	{r4, r5, pc}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	40000800 	.word	0x40000800
    2240:	41004000 	.word	0x41004000
    2244:	00002499 	.word	0x00002499
    2248:	000020e5 	.word	0x000020e5
    224c:	00002121 	.word	0x00002121
    2250:	00002261 	.word	0x00002261
    2254:	40000400 	.word	0x40000400
    2258:	00002285 	.word	0x00002285
    225c:	0000233d 	.word	0x0000233d

00002260 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2260:	4a06      	ldr	r2, [pc, #24]	; (227c <system_gclk_init+0x1c>)
    2262:	6993      	ldr	r3, [r2, #24]
    2264:	2108      	movs	r1, #8
    2266:	430b      	orrs	r3, r1
    2268:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    226a:	2201      	movs	r2, #1
    226c:	4b04      	ldr	r3, [pc, #16]	; (2280 <system_gclk_init+0x20>)
    226e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2270:	0019      	movs	r1, r3
    2272:	780b      	ldrb	r3, [r1, #0]
    2274:	4213      	tst	r3, r2
    2276:	d1fc      	bne.n	2272 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2278:	4770      	bx	lr
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	40000400 	.word	0x40000400
    2280:	40000c00 	.word	0x40000c00

00002284 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2284:	b570      	push	{r4, r5, r6, lr}
    2286:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2288:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    228a:	780d      	ldrb	r5, [r1, #0]
    228c:	022d      	lsls	r5, r5, #8
    228e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2290:	784b      	ldrb	r3, [r1, #1]
    2292:	2b00      	cmp	r3, #0
    2294:	d002      	beq.n	229c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2296:	2380      	movs	r3, #128	; 0x80
    2298:	02db      	lsls	r3, r3, #11
    229a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    229c:	7a4b      	ldrb	r3, [r1, #9]
    229e:	2b00      	cmp	r3, #0
    22a0:	d002      	beq.n	22a8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    22a2:	2380      	movs	r3, #128	; 0x80
    22a4:	031b      	lsls	r3, r3, #12
    22a6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    22a8:	6848      	ldr	r0, [r1, #4]
    22aa:	2801      	cmp	r0, #1
    22ac:	d910      	bls.n	22d0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    22ae:	1e43      	subs	r3, r0, #1
    22b0:	4218      	tst	r0, r3
    22b2:	d134      	bne.n	231e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    22b4:	2802      	cmp	r0, #2
    22b6:	d930      	bls.n	231a <system_gclk_gen_set_config+0x96>
    22b8:	2302      	movs	r3, #2
    22ba:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    22bc:	3201      	adds	r2, #1
						mask <<= 1) {
    22be:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    22c0:	4298      	cmp	r0, r3
    22c2:	d8fb      	bhi.n	22bc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    22c4:	0212      	lsls	r2, r2, #8
    22c6:	4332      	orrs	r2, r6
    22c8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    22ca:	2380      	movs	r3, #128	; 0x80
    22cc:	035b      	lsls	r3, r3, #13
    22ce:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    22d0:	7a0b      	ldrb	r3, [r1, #8]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d002      	beq.n	22dc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    22d6:	2380      	movs	r3, #128	; 0x80
    22d8:	039b      	lsls	r3, r3, #14
    22da:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22dc:	4a13      	ldr	r2, [pc, #76]	; (232c <system_gclk_gen_set_config+0xa8>)
    22de:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    22e0:	b25b      	sxtb	r3, r3
    22e2:	2b00      	cmp	r3, #0
    22e4:	dbfb      	blt.n	22de <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    22e6:	4b12      	ldr	r3, [pc, #72]	; (2330 <system_gclk_gen_set_config+0xac>)
    22e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    22ea:	4b12      	ldr	r3, [pc, #72]	; (2334 <system_gclk_gen_set_config+0xb0>)
    22ec:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22ee:	4a0f      	ldr	r2, [pc, #60]	; (232c <system_gclk_gen_set_config+0xa8>)
    22f0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    22f2:	b25b      	sxtb	r3, r3
    22f4:	2b00      	cmp	r3, #0
    22f6:	dbfb      	blt.n	22f0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    22f8:	4b0c      	ldr	r3, [pc, #48]	; (232c <system_gclk_gen_set_config+0xa8>)
    22fa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    22fc:	001a      	movs	r2, r3
    22fe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2300:	b25b      	sxtb	r3, r3
    2302:	2b00      	cmp	r3, #0
    2304:	dbfb      	blt.n	22fe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2306:	4a09      	ldr	r2, [pc, #36]	; (232c <system_gclk_gen_set_config+0xa8>)
    2308:	6853      	ldr	r3, [r2, #4]
    230a:	2180      	movs	r1, #128	; 0x80
    230c:	0249      	lsls	r1, r1, #9
    230e:	400b      	ands	r3, r1
    2310:	431d      	orrs	r5, r3
    2312:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2314:	4b08      	ldr	r3, [pc, #32]	; (2338 <system_gclk_gen_set_config+0xb4>)
    2316:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2318:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    231a:	2200      	movs	r2, #0
    231c:	e7d2      	b.n	22c4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    231e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2320:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2322:	2380      	movs	r3, #128	; 0x80
    2324:	029b      	lsls	r3, r3, #10
    2326:	431d      	orrs	r5, r3
    2328:	e7d2      	b.n	22d0 <system_gclk_gen_set_config+0x4c>
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	40000c00 	.word	0x40000c00
    2330:	00001fe5 	.word	0x00001fe5
    2334:	40000c08 	.word	0x40000c08
    2338:	00002025 	.word	0x00002025

0000233c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    233c:	b510      	push	{r4, lr}
    233e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2340:	4a0b      	ldr	r2, [pc, #44]	; (2370 <system_gclk_gen_enable+0x34>)
    2342:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2344:	b25b      	sxtb	r3, r3
    2346:	2b00      	cmp	r3, #0
    2348:	dbfb      	blt.n	2342 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    234a:	4b0a      	ldr	r3, [pc, #40]	; (2374 <system_gclk_gen_enable+0x38>)
    234c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    234e:	4b0a      	ldr	r3, [pc, #40]	; (2378 <system_gclk_gen_enable+0x3c>)
    2350:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2352:	4a07      	ldr	r2, [pc, #28]	; (2370 <system_gclk_gen_enable+0x34>)
    2354:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2356:	b25b      	sxtb	r3, r3
    2358:	2b00      	cmp	r3, #0
    235a:	dbfb      	blt.n	2354 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    235c:	4a04      	ldr	r2, [pc, #16]	; (2370 <system_gclk_gen_enable+0x34>)
    235e:	6851      	ldr	r1, [r2, #4]
    2360:	2380      	movs	r3, #128	; 0x80
    2362:	025b      	lsls	r3, r3, #9
    2364:	430b      	orrs	r3, r1
    2366:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2368:	4b04      	ldr	r3, [pc, #16]	; (237c <system_gclk_gen_enable+0x40>)
    236a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    236c:	bd10      	pop	{r4, pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	40000c00 	.word	0x40000c00
    2374:	00001fe5 	.word	0x00001fe5
    2378:	40000c04 	.word	0x40000c04
    237c:	00002025 	.word	0x00002025

00002380 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2380:	b570      	push	{r4, r5, r6, lr}
    2382:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2384:	4a1a      	ldr	r2, [pc, #104]	; (23f0 <system_gclk_gen_get_hz+0x70>)
    2386:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2388:	b25b      	sxtb	r3, r3
    238a:	2b00      	cmp	r3, #0
    238c:	dbfb      	blt.n	2386 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    238e:	4b19      	ldr	r3, [pc, #100]	; (23f4 <system_gclk_gen_get_hz+0x74>)
    2390:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2392:	4b19      	ldr	r3, [pc, #100]	; (23f8 <system_gclk_gen_get_hz+0x78>)
    2394:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2396:	4a16      	ldr	r2, [pc, #88]	; (23f0 <system_gclk_gen_get_hz+0x70>)
    2398:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    239a:	b25b      	sxtb	r3, r3
    239c:	2b00      	cmp	r3, #0
    239e:	dbfb      	blt.n	2398 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    23a0:	4e13      	ldr	r6, [pc, #76]	; (23f0 <system_gclk_gen_get_hz+0x70>)
    23a2:	6870      	ldr	r0, [r6, #4]
    23a4:	04c0      	lsls	r0, r0, #19
    23a6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    23a8:	4b14      	ldr	r3, [pc, #80]	; (23fc <system_gclk_gen_get_hz+0x7c>)
    23aa:	4798      	blx	r3
    23ac:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    23ae:	4b12      	ldr	r3, [pc, #72]	; (23f8 <system_gclk_gen_get_hz+0x78>)
    23b0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    23b2:	6876      	ldr	r6, [r6, #4]
    23b4:	02f6      	lsls	r6, r6, #11
    23b6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    23b8:	4b11      	ldr	r3, [pc, #68]	; (2400 <system_gclk_gen_get_hz+0x80>)
    23ba:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23bc:	4a0c      	ldr	r2, [pc, #48]	; (23f0 <system_gclk_gen_get_hz+0x70>)
    23be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    23c0:	b25b      	sxtb	r3, r3
    23c2:	2b00      	cmp	r3, #0
    23c4:	dbfb      	blt.n	23be <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    23c6:	4b0a      	ldr	r3, [pc, #40]	; (23f0 <system_gclk_gen_get_hz+0x70>)
    23c8:	689c      	ldr	r4, [r3, #8]
    23ca:	0224      	lsls	r4, r4, #8
    23cc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    23ce:	4b0d      	ldr	r3, [pc, #52]	; (2404 <system_gclk_gen_get_hz+0x84>)
    23d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    23d2:	2e00      	cmp	r6, #0
    23d4:	d107      	bne.n	23e6 <system_gclk_gen_get_hz+0x66>
    23d6:	2c01      	cmp	r4, #1
    23d8:	d907      	bls.n	23ea <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    23da:	0021      	movs	r1, r4
    23dc:	0028      	movs	r0, r5
    23de:	4b0a      	ldr	r3, [pc, #40]	; (2408 <system_gclk_gen_get_hz+0x88>)
    23e0:	4798      	blx	r3
    23e2:	0005      	movs	r5, r0
    23e4:	e001      	b.n	23ea <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    23e6:	3401      	adds	r4, #1
    23e8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    23ea:	0028      	movs	r0, r5
    23ec:	bd70      	pop	{r4, r5, r6, pc}
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	40000c00 	.word	0x40000c00
    23f4:	00001fe5 	.word	0x00001fe5
    23f8:	40000c04 	.word	0x40000c04
    23fc:	00002055 	.word	0x00002055
    2400:	40000c08 	.word	0x40000c08
    2404:	00002025 	.word	0x00002025
    2408:	000026c5 	.word	0x000026c5

0000240c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    240c:	b510      	push	{r4, lr}
    240e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2410:	4b06      	ldr	r3, [pc, #24]	; (242c <system_gclk_chan_enable+0x20>)
    2412:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2414:	4b06      	ldr	r3, [pc, #24]	; (2430 <system_gclk_chan_enable+0x24>)
    2416:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2418:	4a06      	ldr	r2, [pc, #24]	; (2434 <system_gclk_chan_enable+0x28>)
    241a:	8853      	ldrh	r3, [r2, #2]
    241c:	2180      	movs	r1, #128	; 0x80
    241e:	01c9      	lsls	r1, r1, #7
    2420:	430b      	orrs	r3, r1
    2422:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2424:	4b04      	ldr	r3, [pc, #16]	; (2438 <system_gclk_chan_enable+0x2c>)
    2426:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2428:	bd10      	pop	{r4, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	00001fe5 	.word	0x00001fe5
    2430:	40000c02 	.word	0x40000c02
    2434:	40000c00 	.word	0x40000c00
    2438:	00002025 	.word	0x00002025

0000243c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    243c:	b510      	push	{r4, lr}
    243e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2440:	4b0f      	ldr	r3, [pc, #60]	; (2480 <system_gclk_chan_disable+0x44>)
    2442:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2444:	4b0f      	ldr	r3, [pc, #60]	; (2484 <system_gclk_chan_disable+0x48>)
    2446:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2448:	4a0f      	ldr	r2, [pc, #60]	; (2488 <system_gclk_chan_disable+0x4c>)
    244a:	8853      	ldrh	r3, [r2, #2]
    244c:	051b      	lsls	r3, r3, #20
    244e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2450:	8853      	ldrh	r3, [r2, #2]
    2452:	490e      	ldr	r1, [pc, #56]	; (248c <system_gclk_chan_disable+0x50>)
    2454:	400b      	ands	r3, r1
    2456:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2458:	8853      	ldrh	r3, [r2, #2]
    245a:	490d      	ldr	r1, [pc, #52]	; (2490 <system_gclk_chan_disable+0x54>)
    245c:	400b      	ands	r3, r1
    245e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2460:	0011      	movs	r1, r2
    2462:	2280      	movs	r2, #128	; 0x80
    2464:	01d2      	lsls	r2, r2, #7
    2466:	884b      	ldrh	r3, [r1, #2]
    2468:	4213      	tst	r3, r2
    246a:	d1fc      	bne.n	2466 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    246c:	4906      	ldr	r1, [pc, #24]	; (2488 <system_gclk_chan_disable+0x4c>)
    246e:	884a      	ldrh	r2, [r1, #2]
    2470:	0203      	lsls	r3, r0, #8
    2472:	4806      	ldr	r0, [pc, #24]	; (248c <system_gclk_chan_disable+0x50>)
    2474:	4002      	ands	r2, r0
    2476:	4313      	orrs	r3, r2
    2478:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    247a:	4b06      	ldr	r3, [pc, #24]	; (2494 <system_gclk_chan_disable+0x58>)
    247c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    247e:	bd10      	pop	{r4, pc}
    2480:	00001fe5 	.word	0x00001fe5
    2484:	40000c02 	.word	0x40000c02
    2488:	40000c00 	.word	0x40000c00
    248c:	fffff0ff 	.word	0xfffff0ff
    2490:	ffffbfff 	.word	0xffffbfff
    2494:	00002025 	.word	0x00002025

00002498 <system_gclk_chan_set_config>:
{
    2498:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    249a:	780c      	ldrb	r4, [r1, #0]
    249c:	0224      	lsls	r4, r4, #8
    249e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    24a0:	4b02      	ldr	r3, [pc, #8]	; (24ac <system_gclk_chan_set_config+0x14>)
    24a2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    24a4:	b2a4      	uxth	r4, r4
    24a6:	4b02      	ldr	r3, [pc, #8]	; (24b0 <system_gclk_chan_set_config+0x18>)
    24a8:	805c      	strh	r4, [r3, #2]
}
    24aa:	bd10      	pop	{r4, pc}
    24ac:	0000243d 	.word	0x0000243d
    24b0:	40000c00 	.word	0x40000c00

000024b4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    24b4:	b510      	push	{r4, lr}
    24b6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    24b8:	4b06      	ldr	r3, [pc, #24]	; (24d4 <system_gclk_chan_get_hz+0x20>)
    24ba:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24bc:	4b06      	ldr	r3, [pc, #24]	; (24d8 <system_gclk_chan_get_hz+0x24>)
    24be:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    24c0:	4b06      	ldr	r3, [pc, #24]	; (24dc <system_gclk_chan_get_hz+0x28>)
    24c2:	885c      	ldrh	r4, [r3, #2]
    24c4:	0524      	lsls	r4, r4, #20
    24c6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    24c8:	4b05      	ldr	r3, [pc, #20]	; (24e0 <system_gclk_chan_get_hz+0x2c>)
    24ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    24cc:	0020      	movs	r0, r4
    24ce:	4b05      	ldr	r3, [pc, #20]	; (24e4 <system_gclk_chan_get_hz+0x30>)
    24d0:	4798      	blx	r3
}
    24d2:	bd10      	pop	{r4, pc}
    24d4:	00001fe5 	.word	0x00001fe5
    24d8:	40000c02 	.word	0x40000c02
    24dc:	40000c00 	.word	0x40000c00
    24e0:	00002025 	.word	0x00002025
    24e4:	00002381 	.word	0x00002381

000024e8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    24e8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    24ea:	78d3      	ldrb	r3, [r2, #3]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d135      	bne.n	255c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    24f0:	7813      	ldrb	r3, [r2, #0]
    24f2:	2b80      	cmp	r3, #128	; 0x80
    24f4:	d029      	beq.n	254a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    24f6:	061b      	lsls	r3, r3, #24
    24f8:	2480      	movs	r4, #128	; 0x80
    24fa:	0264      	lsls	r4, r4, #9
    24fc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    24fe:	7854      	ldrb	r4, [r2, #1]
    2500:	2502      	movs	r5, #2
    2502:	43ac      	bics	r4, r5
    2504:	d106      	bne.n	2514 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2506:	7894      	ldrb	r4, [r2, #2]
    2508:	2c00      	cmp	r4, #0
    250a:	d120      	bne.n	254e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    250c:	2480      	movs	r4, #128	; 0x80
    250e:	02a4      	lsls	r4, r4, #10
    2510:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2512:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2514:	7854      	ldrb	r4, [r2, #1]
    2516:	3c01      	subs	r4, #1
    2518:	2c01      	cmp	r4, #1
    251a:	d91c      	bls.n	2556 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    251c:	040d      	lsls	r5, r1, #16
    251e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2520:	24a0      	movs	r4, #160	; 0xa0
    2522:	05e4      	lsls	r4, r4, #23
    2524:	432c      	orrs	r4, r5
    2526:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2528:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    252a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    252c:	24d0      	movs	r4, #208	; 0xd0
    252e:	0624      	lsls	r4, r4, #24
    2530:	432c      	orrs	r4, r5
    2532:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2534:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2536:	78d4      	ldrb	r4, [r2, #3]
    2538:	2c00      	cmp	r4, #0
    253a:	d122      	bne.n	2582 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    253c:	035b      	lsls	r3, r3, #13
    253e:	d51c      	bpl.n	257a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2540:	7893      	ldrb	r3, [r2, #2]
    2542:	2b01      	cmp	r3, #1
    2544:	d01e      	beq.n	2584 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2546:	6141      	str	r1, [r0, #20]
    2548:	e017      	b.n	257a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    254a:	2300      	movs	r3, #0
    254c:	e7d7      	b.n	24fe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    254e:	24c0      	movs	r4, #192	; 0xc0
    2550:	02e4      	lsls	r4, r4, #11
    2552:	4323      	orrs	r3, r4
    2554:	e7dd      	b.n	2512 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2556:	4c0d      	ldr	r4, [pc, #52]	; (258c <_system_pinmux_config+0xa4>)
    2558:	4023      	ands	r3, r4
    255a:	e7df      	b.n	251c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    255c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    255e:	040c      	lsls	r4, r1, #16
    2560:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2562:	23a0      	movs	r3, #160	; 0xa0
    2564:	05db      	lsls	r3, r3, #23
    2566:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2568:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    256a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    256c:	23d0      	movs	r3, #208	; 0xd0
    256e:	061b      	lsls	r3, r3, #24
    2570:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2572:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2574:	78d3      	ldrb	r3, [r2, #3]
    2576:	2b00      	cmp	r3, #0
    2578:	d103      	bne.n	2582 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    257a:	7853      	ldrb	r3, [r2, #1]
    257c:	3b01      	subs	r3, #1
    257e:	2b01      	cmp	r3, #1
    2580:	d902      	bls.n	2588 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2582:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2584:	6181      	str	r1, [r0, #24]
    2586:	e7f8      	b.n	257a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2588:	6081      	str	r1, [r0, #8]
}
    258a:	e7fa      	b.n	2582 <_system_pinmux_config+0x9a>
    258c:	fffbffff 	.word	0xfffbffff

00002590 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2590:	b510      	push	{r4, lr}
    2592:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2594:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2596:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2598:	2900      	cmp	r1, #0
    259a:	d104      	bne.n	25a6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    259c:	0943      	lsrs	r3, r0, #5
    259e:	01db      	lsls	r3, r3, #7
    25a0:	4905      	ldr	r1, [pc, #20]	; (25b8 <system_pinmux_pin_set_config+0x28>)
    25a2:	468c      	mov	ip, r1
    25a4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    25a6:	241f      	movs	r4, #31
    25a8:	4020      	ands	r0, r4
    25aa:	2101      	movs	r1, #1
    25ac:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    25ae:	0018      	movs	r0, r3
    25b0:	4b02      	ldr	r3, [pc, #8]	; (25bc <system_pinmux_pin_set_config+0x2c>)
    25b2:	4798      	blx	r3
}
    25b4:	bd10      	pop	{r4, pc}
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	41004400 	.word	0x41004400
    25bc:	000024e9 	.word	0x000024e9

000025c0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    25c0:	4770      	bx	lr
	...

000025c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    25c4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    25c6:	4b05      	ldr	r3, [pc, #20]	; (25dc <system_init+0x18>)
    25c8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    25ca:	4b05      	ldr	r3, [pc, #20]	; (25e0 <system_init+0x1c>)
    25cc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    25ce:	4b05      	ldr	r3, [pc, #20]	; (25e4 <system_init+0x20>)
    25d0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    25d2:	4b05      	ldr	r3, [pc, #20]	; (25e8 <system_init+0x24>)
    25d4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    25d6:	4b05      	ldr	r3, [pc, #20]	; (25ec <system_init+0x28>)
    25d8:	4798      	blx	r3
}
    25da:	bd10      	pop	{r4, pc}
    25dc:	000021c9 	.word	0x000021c9
    25e0:	00001fe1 	.word	0x00001fe1
    25e4:	000025c1 	.word	0x000025c1
    25e8:	000001a5 	.word	0x000001a5
    25ec:	000025c1 	.word	0x000025c1

000025f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    25f0:	e7fe      	b.n	25f0 <Dummy_Handler>
	...

000025f4 <Reset_Handler>:
{
    25f4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    25f6:	4a26      	ldr	r2, [pc, #152]	; (2690 <Reset_Handler+0x9c>)
    25f8:	4b26      	ldr	r3, [pc, #152]	; (2694 <Reset_Handler+0xa0>)
    25fa:	429a      	cmp	r2, r3
    25fc:	d011      	beq.n	2622 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    25fe:	001a      	movs	r2, r3
    2600:	4b25      	ldr	r3, [pc, #148]	; (2698 <Reset_Handler+0xa4>)
    2602:	429a      	cmp	r2, r3
    2604:	d20d      	bcs.n	2622 <Reset_Handler+0x2e>
    2606:	4a25      	ldr	r2, [pc, #148]	; (269c <Reset_Handler+0xa8>)
    2608:	3303      	adds	r3, #3
    260a:	1a9b      	subs	r3, r3, r2
    260c:	089b      	lsrs	r3, r3, #2
    260e:	3301      	adds	r3, #1
    2610:	009b      	lsls	r3, r3, #2
    2612:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2614:	481f      	ldr	r0, [pc, #124]	; (2694 <Reset_Handler+0xa0>)
    2616:	491e      	ldr	r1, [pc, #120]	; (2690 <Reset_Handler+0x9c>)
    2618:	588c      	ldr	r4, [r1, r2]
    261a:	5084      	str	r4, [r0, r2]
    261c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    261e:	429a      	cmp	r2, r3
    2620:	d1fa      	bne.n	2618 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2622:	4a1f      	ldr	r2, [pc, #124]	; (26a0 <Reset_Handler+0xac>)
    2624:	4b1f      	ldr	r3, [pc, #124]	; (26a4 <Reset_Handler+0xb0>)
    2626:	429a      	cmp	r2, r3
    2628:	d20a      	bcs.n	2640 <Reset_Handler+0x4c>
    262a:	43d3      	mvns	r3, r2
    262c:	491d      	ldr	r1, [pc, #116]	; (26a4 <Reset_Handler+0xb0>)
    262e:	185b      	adds	r3, r3, r1
    2630:	2103      	movs	r1, #3
    2632:	438b      	bics	r3, r1
    2634:	3304      	adds	r3, #4
    2636:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2638:	2100      	movs	r1, #0
    263a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    263c:	4293      	cmp	r3, r2
    263e:	d1fc      	bne.n	263a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2640:	4a19      	ldr	r2, [pc, #100]	; (26a8 <Reset_Handler+0xb4>)
    2642:	21ff      	movs	r1, #255	; 0xff
    2644:	4b19      	ldr	r3, [pc, #100]	; (26ac <Reset_Handler+0xb8>)
    2646:	438b      	bics	r3, r1
    2648:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    264a:	39fd      	subs	r1, #253	; 0xfd
    264c:	2390      	movs	r3, #144	; 0x90
    264e:	005b      	lsls	r3, r3, #1
    2650:	4a17      	ldr	r2, [pc, #92]	; (26b0 <Reset_Handler+0xbc>)
    2652:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2654:	4b17      	ldr	r3, [pc, #92]	; (26b4 <Reset_Handler+0xc0>)
    2656:	7b9a      	ldrb	r2, [r3, #14]
    2658:	312e      	adds	r1, #46	; 0x2e
    265a:	438a      	bics	r2, r1
    265c:	2120      	movs	r1, #32
    265e:	430a      	orrs	r2, r1
    2660:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2662:	7b9a      	ldrb	r2, [r3, #14]
    2664:	210c      	movs	r1, #12
    2666:	438a      	bics	r2, r1
    2668:	2108      	movs	r1, #8
    266a:	430a      	orrs	r2, r1
    266c:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    266e:	7b9a      	ldrb	r2, [r3, #14]
    2670:	2103      	movs	r1, #3
    2672:	438a      	bics	r2, r1
    2674:	2102      	movs	r1, #2
    2676:	430a      	orrs	r2, r1
    2678:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    267a:	4a0f      	ldr	r2, [pc, #60]	; (26b8 <Reset_Handler+0xc4>)
    267c:	6853      	ldr	r3, [r2, #4]
    267e:	2180      	movs	r1, #128	; 0x80
    2680:	430b      	orrs	r3, r1
    2682:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2684:	4b0d      	ldr	r3, [pc, #52]	; (26bc <Reset_Handler+0xc8>)
    2686:	4798      	blx	r3
        main();
    2688:	4b0d      	ldr	r3, [pc, #52]	; (26c0 <Reset_Handler+0xcc>)
    268a:	4798      	blx	r3
    268c:	e7fe      	b.n	268c <Reset_Handler+0x98>
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	00002aa4 	.word	0x00002aa4
    2694:	20000000 	.word	0x20000000
    2698:	20000004 	.word	0x20000004
    269c:	20000004 	.word	0x20000004
    26a0:	20000004 	.word	0x20000004
    26a4:	2000039c 	.word	0x2000039c
    26a8:	e000ed00 	.word	0xe000ed00
    26ac:	00000000 	.word	0x00000000
    26b0:	41007000 	.word	0x41007000
    26b4:	41004800 	.word	0x41004800
    26b8:	41004000 	.word	0x41004000
    26bc:	000029b1 	.word	0x000029b1
    26c0:	00001e49 	.word	0x00001e49

000026c4 <__udivsi3>:
    26c4:	2200      	movs	r2, #0
    26c6:	0843      	lsrs	r3, r0, #1
    26c8:	428b      	cmp	r3, r1
    26ca:	d374      	bcc.n	27b6 <__udivsi3+0xf2>
    26cc:	0903      	lsrs	r3, r0, #4
    26ce:	428b      	cmp	r3, r1
    26d0:	d35f      	bcc.n	2792 <__udivsi3+0xce>
    26d2:	0a03      	lsrs	r3, r0, #8
    26d4:	428b      	cmp	r3, r1
    26d6:	d344      	bcc.n	2762 <__udivsi3+0x9e>
    26d8:	0b03      	lsrs	r3, r0, #12
    26da:	428b      	cmp	r3, r1
    26dc:	d328      	bcc.n	2730 <__udivsi3+0x6c>
    26de:	0c03      	lsrs	r3, r0, #16
    26e0:	428b      	cmp	r3, r1
    26e2:	d30d      	bcc.n	2700 <__udivsi3+0x3c>
    26e4:	22ff      	movs	r2, #255	; 0xff
    26e6:	0209      	lsls	r1, r1, #8
    26e8:	ba12      	rev	r2, r2
    26ea:	0c03      	lsrs	r3, r0, #16
    26ec:	428b      	cmp	r3, r1
    26ee:	d302      	bcc.n	26f6 <__udivsi3+0x32>
    26f0:	1212      	asrs	r2, r2, #8
    26f2:	0209      	lsls	r1, r1, #8
    26f4:	d065      	beq.n	27c2 <__udivsi3+0xfe>
    26f6:	0b03      	lsrs	r3, r0, #12
    26f8:	428b      	cmp	r3, r1
    26fa:	d319      	bcc.n	2730 <__udivsi3+0x6c>
    26fc:	e000      	b.n	2700 <__udivsi3+0x3c>
    26fe:	0a09      	lsrs	r1, r1, #8
    2700:	0bc3      	lsrs	r3, r0, #15
    2702:	428b      	cmp	r3, r1
    2704:	d301      	bcc.n	270a <__udivsi3+0x46>
    2706:	03cb      	lsls	r3, r1, #15
    2708:	1ac0      	subs	r0, r0, r3
    270a:	4152      	adcs	r2, r2
    270c:	0b83      	lsrs	r3, r0, #14
    270e:	428b      	cmp	r3, r1
    2710:	d301      	bcc.n	2716 <__udivsi3+0x52>
    2712:	038b      	lsls	r3, r1, #14
    2714:	1ac0      	subs	r0, r0, r3
    2716:	4152      	adcs	r2, r2
    2718:	0b43      	lsrs	r3, r0, #13
    271a:	428b      	cmp	r3, r1
    271c:	d301      	bcc.n	2722 <__udivsi3+0x5e>
    271e:	034b      	lsls	r3, r1, #13
    2720:	1ac0      	subs	r0, r0, r3
    2722:	4152      	adcs	r2, r2
    2724:	0b03      	lsrs	r3, r0, #12
    2726:	428b      	cmp	r3, r1
    2728:	d301      	bcc.n	272e <__udivsi3+0x6a>
    272a:	030b      	lsls	r3, r1, #12
    272c:	1ac0      	subs	r0, r0, r3
    272e:	4152      	adcs	r2, r2
    2730:	0ac3      	lsrs	r3, r0, #11
    2732:	428b      	cmp	r3, r1
    2734:	d301      	bcc.n	273a <__udivsi3+0x76>
    2736:	02cb      	lsls	r3, r1, #11
    2738:	1ac0      	subs	r0, r0, r3
    273a:	4152      	adcs	r2, r2
    273c:	0a83      	lsrs	r3, r0, #10
    273e:	428b      	cmp	r3, r1
    2740:	d301      	bcc.n	2746 <__udivsi3+0x82>
    2742:	028b      	lsls	r3, r1, #10
    2744:	1ac0      	subs	r0, r0, r3
    2746:	4152      	adcs	r2, r2
    2748:	0a43      	lsrs	r3, r0, #9
    274a:	428b      	cmp	r3, r1
    274c:	d301      	bcc.n	2752 <__udivsi3+0x8e>
    274e:	024b      	lsls	r3, r1, #9
    2750:	1ac0      	subs	r0, r0, r3
    2752:	4152      	adcs	r2, r2
    2754:	0a03      	lsrs	r3, r0, #8
    2756:	428b      	cmp	r3, r1
    2758:	d301      	bcc.n	275e <__udivsi3+0x9a>
    275a:	020b      	lsls	r3, r1, #8
    275c:	1ac0      	subs	r0, r0, r3
    275e:	4152      	adcs	r2, r2
    2760:	d2cd      	bcs.n	26fe <__udivsi3+0x3a>
    2762:	09c3      	lsrs	r3, r0, #7
    2764:	428b      	cmp	r3, r1
    2766:	d301      	bcc.n	276c <__udivsi3+0xa8>
    2768:	01cb      	lsls	r3, r1, #7
    276a:	1ac0      	subs	r0, r0, r3
    276c:	4152      	adcs	r2, r2
    276e:	0983      	lsrs	r3, r0, #6
    2770:	428b      	cmp	r3, r1
    2772:	d301      	bcc.n	2778 <__udivsi3+0xb4>
    2774:	018b      	lsls	r3, r1, #6
    2776:	1ac0      	subs	r0, r0, r3
    2778:	4152      	adcs	r2, r2
    277a:	0943      	lsrs	r3, r0, #5
    277c:	428b      	cmp	r3, r1
    277e:	d301      	bcc.n	2784 <__udivsi3+0xc0>
    2780:	014b      	lsls	r3, r1, #5
    2782:	1ac0      	subs	r0, r0, r3
    2784:	4152      	adcs	r2, r2
    2786:	0903      	lsrs	r3, r0, #4
    2788:	428b      	cmp	r3, r1
    278a:	d301      	bcc.n	2790 <__udivsi3+0xcc>
    278c:	010b      	lsls	r3, r1, #4
    278e:	1ac0      	subs	r0, r0, r3
    2790:	4152      	adcs	r2, r2
    2792:	08c3      	lsrs	r3, r0, #3
    2794:	428b      	cmp	r3, r1
    2796:	d301      	bcc.n	279c <__udivsi3+0xd8>
    2798:	00cb      	lsls	r3, r1, #3
    279a:	1ac0      	subs	r0, r0, r3
    279c:	4152      	adcs	r2, r2
    279e:	0883      	lsrs	r3, r0, #2
    27a0:	428b      	cmp	r3, r1
    27a2:	d301      	bcc.n	27a8 <__udivsi3+0xe4>
    27a4:	008b      	lsls	r3, r1, #2
    27a6:	1ac0      	subs	r0, r0, r3
    27a8:	4152      	adcs	r2, r2
    27aa:	0843      	lsrs	r3, r0, #1
    27ac:	428b      	cmp	r3, r1
    27ae:	d301      	bcc.n	27b4 <__udivsi3+0xf0>
    27b0:	004b      	lsls	r3, r1, #1
    27b2:	1ac0      	subs	r0, r0, r3
    27b4:	4152      	adcs	r2, r2
    27b6:	1a41      	subs	r1, r0, r1
    27b8:	d200      	bcs.n	27bc <__udivsi3+0xf8>
    27ba:	4601      	mov	r1, r0
    27bc:	4152      	adcs	r2, r2
    27be:	4610      	mov	r0, r2
    27c0:	4770      	bx	lr
    27c2:	e7ff      	b.n	27c4 <__udivsi3+0x100>
    27c4:	b501      	push	{r0, lr}
    27c6:	2000      	movs	r0, #0
    27c8:	f000 f8f0 	bl	29ac <__aeabi_idiv0>
    27cc:	bd02      	pop	{r1, pc}
    27ce:	46c0      	nop			; (mov r8, r8)

000027d0 <__aeabi_uidivmod>:
    27d0:	2900      	cmp	r1, #0
    27d2:	d0f7      	beq.n	27c4 <__udivsi3+0x100>
    27d4:	e776      	b.n	26c4 <__udivsi3>
    27d6:	4770      	bx	lr

000027d8 <__divsi3>:
    27d8:	4603      	mov	r3, r0
    27da:	430b      	orrs	r3, r1
    27dc:	d47f      	bmi.n	28de <__divsi3+0x106>
    27de:	2200      	movs	r2, #0
    27e0:	0843      	lsrs	r3, r0, #1
    27e2:	428b      	cmp	r3, r1
    27e4:	d374      	bcc.n	28d0 <__divsi3+0xf8>
    27e6:	0903      	lsrs	r3, r0, #4
    27e8:	428b      	cmp	r3, r1
    27ea:	d35f      	bcc.n	28ac <__divsi3+0xd4>
    27ec:	0a03      	lsrs	r3, r0, #8
    27ee:	428b      	cmp	r3, r1
    27f0:	d344      	bcc.n	287c <__divsi3+0xa4>
    27f2:	0b03      	lsrs	r3, r0, #12
    27f4:	428b      	cmp	r3, r1
    27f6:	d328      	bcc.n	284a <__divsi3+0x72>
    27f8:	0c03      	lsrs	r3, r0, #16
    27fa:	428b      	cmp	r3, r1
    27fc:	d30d      	bcc.n	281a <__divsi3+0x42>
    27fe:	22ff      	movs	r2, #255	; 0xff
    2800:	0209      	lsls	r1, r1, #8
    2802:	ba12      	rev	r2, r2
    2804:	0c03      	lsrs	r3, r0, #16
    2806:	428b      	cmp	r3, r1
    2808:	d302      	bcc.n	2810 <__divsi3+0x38>
    280a:	1212      	asrs	r2, r2, #8
    280c:	0209      	lsls	r1, r1, #8
    280e:	d065      	beq.n	28dc <__divsi3+0x104>
    2810:	0b03      	lsrs	r3, r0, #12
    2812:	428b      	cmp	r3, r1
    2814:	d319      	bcc.n	284a <__divsi3+0x72>
    2816:	e000      	b.n	281a <__divsi3+0x42>
    2818:	0a09      	lsrs	r1, r1, #8
    281a:	0bc3      	lsrs	r3, r0, #15
    281c:	428b      	cmp	r3, r1
    281e:	d301      	bcc.n	2824 <__divsi3+0x4c>
    2820:	03cb      	lsls	r3, r1, #15
    2822:	1ac0      	subs	r0, r0, r3
    2824:	4152      	adcs	r2, r2
    2826:	0b83      	lsrs	r3, r0, #14
    2828:	428b      	cmp	r3, r1
    282a:	d301      	bcc.n	2830 <__divsi3+0x58>
    282c:	038b      	lsls	r3, r1, #14
    282e:	1ac0      	subs	r0, r0, r3
    2830:	4152      	adcs	r2, r2
    2832:	0b43      	lsrs	r3, r0, #13
    2834:	428b      	cmp	r3, r1
    2836:	d301      	bcc.n	283c <__divsi3+0x64>
    2838:	034b      	lsls	r3, r1, #13
    283a:	1ac0      	subs	r0, r0, r3
    283c:	4152      	adcs	r2, r2
    283e:	0b03      	lsrs	r3, r0, #12
    2840:	428b      	cmp	r3, r1
    2842:	d301      	bcc.n	2848 <__divsi3+0x70>
    2844:	030b      	lsls	r3, r1, #12
    2846:	1ac0      	subs	r0, r0, r3
    2848:	4152      	adcs	r2, r2
    284a:	0ac3      	lsrs	r3, r0, #11
    284c:	428b      	cmp	r3, r1
    284e:	d301      	bcc.n	2854 <__divsi3+0x7c>
    2850:	02cb      	lsls	r3, r1, #11
    2852:	1ac0      	subs	r0, r0, r3
    2854:	4152      	adcs	r2, r2
    2856:	0a83      	lsrs	r3, r0, #10
    2858:	428b      	cmp	r3, r1
    285a:	d301      	bcc.n	2860 <__divsi3+0x88>
    285c:	028b      	lsls	r3, r1, #10
    285e:	1ac0      	subs	r0, r0, r3
    2860:	4152      	adcs	r2, r2
    2862:	0a43      	lsrs	r3, r0, #9
    2864:	428b      	cmp	r3, r1
    2866:	d301      	bcc.n	286c <__divsi3+0x94>
    2868:	024b      	lsls	r3, r1, #9
    286a:	1ac0      	subs	r0, r0, r3
    286c:	4152      	adcs	r2, r2
    286e:	0a03      	lsrs	r3, r0, #8
    2870:	428b      	cmp	r3, r1
    2872:	d301      	bcc.n	2878 <__divsi3+0xa0>
    2874:	020b      	lsls	r3, r1, #8
    2876:	1ac0      	subs	r0, r0, r3
    2878:	4152      	adcs	r2, r2
    287a:	d2cd      	bcs.n	2818 <__divsi3+0x40>
    287c:	09c3      	lsrs	r3, r0, #7
    287e:	428b      	cmp	r3, r1
    2880:	d301      	bcc.n	2886 <__divsi3+0xae>
    2882:	01cb      	lsls	r3, r1, #7
    2884:	1ac0      	subs	r0, r0, r3
    2886:	4152      	adcs	r2, r2
    2888:	0983      	lsrs	r3, r0, #6
    288a:	428b      	cmp	r3, r1
    288c:	d301      	bcc.n	2892 <__divsi3+0xba>
    288e:	018b      	lsls	r3, r1, #6
    2890:	1ac0      	subs	r0, r0, r3
    2892:	4152      	adcs	r2, r2
    2894:	0943      	lsrs	r3, r0, #5
    2896:	428b      	cmp	r3, r1
    2898:	d301      	bcc.n	289e <__divsi3+0xc6>
    289a:	014b      	lsls	r3, r1, #5
    289c:	1ac0      	subs	r0, r0, r3
    289e:	4152      	adcs	r2, r2
    28a0:	0903      	lsrs	r3, r0, #4
    28a2:	428b      	cmp	r3, r1
    28a4:	d301      	bcc.n	28aa <__divsi3+0xd2>
    28a6:	010b      	lsls	r3, r1, #4
    28a8:	1ac0      	subs	r0, r0, r3
    28aa:	4152      	adcs	r2, r2
    28ac:	08c3      	lsrs	r3, r0, #3
    28ae:	428b      	cmp	r3, r1
    28b0:	d301      	bcc.n	28b6 <__divsi3+0xde>
    28b2:	00cb      	lsls	r3, r1, #3
    28b4:	1ac0      	subs	r0, r0, r3
    28b6:	4152      	adcs	r2, r2
    28b8:	0883      	lsrs	r3, r0, #2
    28ba:	428b      	cmp	r3, r1
    28bc:	d301      	bcc.n	28c2 <__divsi3+0xea>
    28be:	008b      	lsls	r3, r1, #2
    28c0:	1ac0      	subs	r0, r0, r3
    28c2:	4152      	adcs	r2, r2
    28c4:	0843      	lsrs	r3, r0, #1
    28c6:	428b      	cmp	r3, r1
    28c8:	d301      	bcc.n	28ce <__divsi3+0xf6>
    28ca:	004b      	lsls	r3, r1, #1
    28cc:	1ac0      	subs	r0, r0, r3
    28ce:	4152      	adcs	r2, r2
    28d0:	1a41      	subs	r1, r0, r1
    28d2:	d200      	bcs.n	28d6 <__divsi3+0xfe>
    28d4:	4601      	mov	r1, r0
    28d6:	4152      	adcs	r2, r2
    28d8:	4610      	mov	r0, r2
    28da:	4770      	bx	lr
    28dc:	e05d      	b.n	299a <__divsi3+0x1c2>
    28de:	0fca      	lsrs	r2, r1, #31
    28e0:	d000      	beq.n	28e4 <__divsi3+0x10c>
    28e2:	4249      	negs	r1, r1
    28e4:	1003      	asrs	r3, r0, #32
    28e6:	d300      	bcc.n	28ea <__divsi3+0x112>
    28e8:	4240      	negs	r0, r0
    28ea:	4053      	eors	r3, r2
    28ec:	2200      	movs	r2, #0
    28ee:	469c      	mov	ip, r3
    28f0:	0903      	lsrs	r3, r0, #4
    28f2:	428b      	cmp	r3, r1
    28f4:	d32d      	bcc.n	2952 <__divsi3+0x17a>
    28f6:	0a03      	lsrs	r3, r0, #8
    28f8:	428b      	cmp	r3, r1
    28fa:	d312      	bcc.n	2922 <__divsi3+0x14a>
    28fc:	22fc      	movs	r2, #252	; 0xfc
    28fe:	0189      	lsls	r1, r1, #6
    2900:	ba12      	rev	r2, r2
    2902:	0a03      	lsrs	r3, r0, #8
    2904:	428b      	cmp	r3, r1
    2906:	d30c      	bcc.n	2922 <__divsi3+0x14a>
    2908:	0189      	lsls	r1, r1, #6
    290a:	1192      	asrs	r2, r2, #6
    290c:	428b      	cmp	r3, r1
    290e:	d308      	bcc.n	2922 <__divsi3+0x14a>
    2910:	0189      	lsls	r1, r1, #6
    2912:	1192      	asrs	r2, r2, #6
    2914:	428b      	cmp	r3, r1
    2916:	d304      	bcc.n	2922 <__divsi3+0x14a>
    2918:	0189      	lsls	r1, r1, #6
    291a:	d03a      	beq.n	2992 <__divsi3+0x1ba>
    291c:	1192      	asrs	r2, r2, #6
    291e:	e000      	b.n	2922 <__divsi3+0x14a>
    2920:	0989      	lsrs	r1, r1, #6
    2922:	09c3      	lsrs	r3, r0, #7
    2924:	428b      	cmp	r3, r1
    2926:	d301      	bcc.n	292c <__divsi3+0x154>
    2928:	01cb      	lsls	r3, r1, #7
    292a:	1ac0      	subs	r0, r0, r3
    292c:	4152      	adcs	r2, r2
    292e:	0983      	lsrs	r3, r0, #6
    2930:	428b      	cmp	r3, r1
    2932:	d301      	bcc.n	2938 <__divsi3+0x160>
    2934:	018b      	lsls	r3, r1, #6
    2936:	1ac0      	subs	r0, r0, r3
    2938:	4152      	adcs	r2, r2
    293a:	0943      	lsrs	r3, r0, #5
    293c:	428b      	cmp	r3, r1
    293e:	d301      	bcc.n	2944 <__divsi3+0x16c>
    2940:	014b      	lsls	r3, r1, #5
    2942:	1ac0      	subs	r0, r0, r3
    2944:	4152      	adcs	r2, r2
    2946:	0903      	lsrs	r3, r0, #4
    2948:	428b      	cmp	r3, r1
    294a:	d301      	bcc.n	2950 <__divsi3+0x178>
    294c:	010b      	lsls	r3, r1, #4
    294e:	1ac0      	subs	r0, r0, r3
    2950:	4152      	adcs	r2, r2
    2952:	08c3      	lsrs	r3, r0, #3
    2954:	428b      	cmp	r3, r1
    2956:	d301      	bcc.n	295c <__divsi3+0x184>
    2958:	00cb      	lsls	r3, r1, #3
    295a:	1ac0      	subs	r0, r0, r3
    295c:	4152      	adcs	r2, r2
    295e:	0883      	lsrs	r3, r0, #2
    2960:	428b      	cmp	r3, r1
    2962:	d301      	bcc.n	2968 <__divsi3+0x190>
    2964:	008b      	lsls	r3, r1, #2
    2966:	1ac0      	subs	r0, r0, r3
    2968:	4152      	adcs	r2, r2
    296a:	d2d9      	bcs.n	2920 <__divsi3+0x148>
    296c:	0843      	lsrs	r3, r0, #1
    296e:	428b      	cmp	r3, r1
    2970:	d301      	bcc.n	2976 <__divsi3+0x19e>
    2972:	004b      	lsls	r3, r1, #1
    2974:	1ac0      	subs	r0, r0, r3
    2976:	4152      	adcs	r2, r2
    2978:	1a41      	subs	r1, r0, r1
    297a:	d200      	bcs.n	297e <__divsi3+0x1a6>
    297c:	4601      	mov	r1, r0
    297e:	4663      	mov	r3, ip
    2980:	4152      	adcs	r2, r2
    2982:	105b      	asrs	r3, r3, #1
    2984:	4610      	mov	r0, r2
    2986:	d301      	bcc.n	298c <__divsi3+0x1b4>
    2988:	4240      	negs	r0, r0
    298a:	2b00      	cmp	r3, #0
    298c:	d500      	bpl.n	2990 <__divsi3+0x1b8>
    298e:	4249      	negs	r1, r1
    2990:	4770      	bx	lr
    2992:	4663      	mov	r3, ip
    2994:	105b      	asrs	r3, r3, #1
    2996:	d300      	bcc.n	299a <__divsi3+0x1c2>
    2998:	4240      	negs	r0, r0
    299a:	b501      	push	{r0, lr}
    299c:	2000      	movs	r0, #0
    299e:	f000 f805 	bl	29ac <__aeabi_idiv0>
    29a2:	bd02      	pop	{r1, pc}

000029a4 <__aeabi_idivmod>:
    29a4:	2900      	cmp	r1, #0
    29a6:	d0f8      	beq.n	299a <__divsi3+0x1c2>
    29a8:	e716      	b.n	27d8 <__divsi3>
    29aa:	4770      	bx	lr

000029ac <__aeabi_idiv0>:
    29ac:	4770      	bx	lr
    29ae:	46c0      	nop			; (mov r8, r8)

000029b0 <__libc_init_array>:
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	2600      	movs	r6, #0
    29b4:	4d0c      	ldr	r5, [pc, #48]	; (29e8 <__libc_init_array+0x38>)
    29b6:	4c0d      	ldr	r4, [pc, #52]	; (29ec <__libc_init_array+0x3c>)
    29b8:	1b64      	subs	r4, r4, r5
    29ba:	10a4      	asrs	r4, r4, #2
    29bc:	42a6      	cmp	r6, r4
    29be:	d109      	bne.n	29d4 <__libc_init_array+0x24>
    29c0:	2600      	movs	r6, #0
    29c2:	f000 f85f 	bl	2a84 <_init>
    29c6:	4d0a      	ldr	r5, [pc, #40]	; (29f0 <__libc_init_array+0x40>)
    29c8:	4c0a      	ldr	r4, [pc, #40]	; (29f4 <__libc_init_array+0x44>)
    29ca:	1b64      	subs	r4, r4, r5
    29cc:	10a4      	asrs	r4, r4, #2
    29ce:	42a6      	cmp	r6, r4
    29d0:	d105      	bne.n	29de <__libc_init_array+0x2e>
    29d2:	bd70      	pop	{r4, r5, r6, pc}
    29d4:	00b3      	lsls	r3, r6, #2
    29d6:	58eb      	ldr	r3, [r5, r3]
    29d8:	4798      	blx	r3
    29da:	3601      	adds	r6, #1
    29dc:	e7ee      	b.n	29bc <__libc_init_array+0xc>
    29de:	00b3      	lsls	r3, r6, #2
    29e0:	58eb      	ldr	r3, [r5, r3]
    29e2:	4798      	blx	r3
    29e4:	3601      	adds	r6, #1
    29e6:	e7f2      	b.n	29ce <__libc_init_array+0x1e>
    29e8:	00002a90 	.word	0x00002a90
    29ec:	00002a90 	.word	0x00002a90
    29f0:	00002a90 	.word	0x00002a90
    29f4:	00002a94 	.word	0x00002a94

000029f8 <_tcc_intflag>:
    29f8:	00000001 00000002 00000004 00000008     ................
    2a08:	00001000 00002000 00004000 00008000     ..... ...@......
    2a18:	00010000 00020000 00040000 00080000     ................

00002a28 <tc_interrupt_vectors.11549>:
    2a28:	00000e0d 0006005e 200001fc 00000000     ....^...... ....

00002a38 <tc_interrupt_vectors.11549>:
    2a38:	00000e0d 00002066 00002062 00002062     ....f ..b ..b ..
    2a48:	000020c4 000020c4 0000207a 0000206c     . ... ..z ..l ..
    2a58:	00002080 000020b2 0000214c 0000212c     . ... ..L!..,!..
    2a68:	0000212c 000021b8 0000213e 0000215a     ,!...!..>!..Z!..
    2a78:	00002130 00002168 000021a8              0!..h!...!..

00002a84 <_init>:
    2a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a8a:	bc08      	pop	{r3}
    2a8c:	469e      	mov	lr, r3
    2a8e:	4770      	bx	lr

00002a90 <__init_array_start>:
    2a90:	000000b5 	.word	0x000000b5

00002a94 <_fini>:
    2a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a9a:	bc08      	pop	{r3}
    2a9c:	469e      	mov	lr, r3
    2a9e:	4770      	bx	lr

00002aa0 <__fini_array_start>:
    2aa0:	0000008d 	.word	0x0000008d
